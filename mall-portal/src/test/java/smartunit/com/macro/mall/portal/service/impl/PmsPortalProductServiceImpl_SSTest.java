/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.PmsBrandMapper;
import com.macro.mall.mapper.PmsProductAttributeMapper;
import com.macro.mall.mapper.PmsProductAttributeValueMapper;
import com.macro.mall.mapper.PmsProductCategoryMapper;
import com.macro.mall.mapper.PmsProductFullReductionMapper;
import com.macro.mall.mapper.PmsProductLadderMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.mapper.PmsSkuStockMapper;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.PmsProductAttribute;
import com.macro.mall.model.PmsProductAttributeValue;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.model.PmsProductFullReduction;
import com.macro.mall.model.PmsProductLadder;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.portal.dao.PortalProductDao;
import com.macro.mall.portal.domain.PmsPortalProductDetail;
import com.macro.mall.portal.domain.PmsProductCategoryNode;
import com.macro.mall.portal.service.impl.PmsPortalProductServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsPortalProductServiceImpl_SSTest extends PmsPortalProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 74, 75, 76, 77, 78, 79, 84, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 125, 126, 134, 135, 136, 137, 138, 139, 140]

  @Test(timeout = 4000)
  public void test_categoryTreeList_0()  throws Throwable  {
      //caseID:295e1a6ae448b83e7f086402eb6a8f1c
      //CoveredLines: [24, 74, 75, 76, 77, 77, 78, 78, 79, 134, 135, 136, 137, 137, 138, 138, 139, 140]
      //Assert: assertEquals(1, method_result.size());
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      LinkedList<PmsProductCategory> linkedList0 = new LinkedList<PmsProductCategory>();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(pmsProductCategoryMapper0).selectByExample(any(com.macro.mall.model.PmsProductCategoryExample.class));
      Long long0 = new Long(0L);
      //mock pmsProductCategory0
      PmsProductCategory pmsProductCategory0 = mock(PmsProductCategory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProductCategory0).getParentId();
      
      linkedList0.add(pmsProductCategory0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      
      //Call method: categoryTreeList
      List<PmsProductCategoryNode> list0 = pmsPortalProductServiceImpl0.categoryTreeList();
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_detail_1()  throws Throwable  {
      //caseID:f21aafa280e445e7c8343c4dba8fce37
      //CoveredLines: [24, 84, 86, 87, 89, 90, 92, 93, 94, 95, 97, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 125, 126]
      //Input_0_Long: 1253L
      //Assert: assertNotNull(method_result);
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      //mock pmsBrand0
      PmsBrand pmsBrand0 = mock(PmsBrand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsBrand0).when(pmsBrandMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      Stack<PmsProductAttribute> stack0 = new Stack<PmsProductAttribute>();
      //mock pmsProductAttributeMapper0
      PmsProductAttributeMapper pmsProductAttributeMapper0 = mock(PmsProductAttributeMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductAttributeMapper0).selectByExample(any(com.macro.mall.model.PmsProductAttributeExample.class));
      //mock pmsProductLadderMapper0
      PmsProductLadderMapper pmsProductLadderMapper0 = mock(PmsProductLadderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1253L);
      Integer integer0 = new Integer(3);
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProduct0).getBrandId();
      doReturn(long0).when(pmsProduct0).getId();
      doReturn(long0).when(pmsProduct0).getProductAttributeCategoryId();
      doReturn(integer0).when(pmsProduct0).getPromotionType();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProduct0).when(pmsProductMapper0).selectByPrimaryKey(anyLong());
      LinkedList<PmsSkuStock> linkedList0 = new LinkedList<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productLadderMapper", (Object) pmsProductLadderMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productAttributeMapper", (Object) pmsProductAttributeMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: detail
      PmsPortalProductDetail pmsPortalProductDetail0 = pmsPortalProductServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNotNull(pmsPortalProductDetail0);
  }

  @Test(timeout = 4000)
  public void test_detail_2()  throws Throwable  {
      //caseID:54d8a1e564ff6ebd661f25c518bd6433
      //CoveredLines: [24, 84, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 125, 126]
      //Input_0_Long: 0L
      //Assert: assertNotNull(method_result);
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      //mock pmsBrand0
      PmsBrand pmsBrand0 = mock(PmsBrand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsBrand0).when(pmsBrandMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      Stack<PmsProductAttribute> stack0 = new Stack<PmsProductAttribute>();
      Long long0 = new Long(0L);
      //mock pmsProductAttribute0
      PmsProductAttribute pmsProductAttribute0 = mock(PmsProductAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProductAttribute0).getId();
      
      stack0.add(pmsProductAttribute0);
      //mock pmsProductAttributeMapper0
      PmsProductAttributeMapper pmsProductAttributeMapper0 = mock(PmsProductAttributeMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductAttributeMapper0).selectByExample(any(com.macro.mall.model.PmsProductAttributeExample.class));
      LinkedList<PmsProductAttributeValue> linkedList0 = new LinkedList<PmsProductAttributeValue>();
      //mock pmsProductAttributeValueMapper0
      PmsProductAttributeValueMapper pmsProductAttributeValueMapper0 = mock(PmsProductAttributeValueMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(pmsProductAttributeValueMapper0).selectByExample(any(com.macro.mall.model.PmsProductAttributeValueExample.class));
      ArrayList<PmsProductLadder> arrayList0 = new ArrayList<PmsProductLadder>();
      //mock pmsProductLadderMapper0
      PmsProductLadderMapper pmsProductLadderMapper0 = mock(PmsProductLadderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductLadderMapper0).selectByExample(any(com.macro.mall.model.PmsProductLadderExample.class));
      Integer integer0 = new Integer(3);
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProduct0).getBrandId();
      doReturn(long0, long0, long0, long0).when(pmsProduct0).getId();
      doReturn(long0).when(pmsProduct0).getProductAttributeCategoryId();
      doReturn(long0).when(pmsProduct0).getProductCategoryId();
      doReturn(integer0, integer0).when(pmsProduct0).getPromotionType();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProduct0).when(pmsProductMapper0).selectByPrimaryKey(anyLong());
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      Vector<SmsCoupon> vector1 = new Vector<SmsCoupon>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(portalProductDao0).getAvailableCouponList(nullable(java.lang.Long.class) , nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productLadderMapper", (Object) pmsProductLadderMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productAttributeValueMapper", (Object) pmsProductAttributeValueMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productAttributeMapper", (Object) pmsProductAttributeMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: detail
      PmsPortalProductDetail pmsPortalProductDetail0 = pmsPortalProductServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNotNull(pmsPortalProductDetail0);
  }

  @Test(timeout = 4000)
  public void test_detail_3()  throws Throwable  {
      //caseID:cb3dba29983d2d11533cbce45f9c103b
      //CoveredLines: [24, 84, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 118, 119, 120, 121, 122, 125, 126]
      //Input_0_Long: 4061L
      //Assert: assertNotNull(method_result);
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      //mock pmsBrand0
      PmsBrand pmsBrand0 = mock(PmsBrand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsBrand0).when(pmsBrandMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      Stack<PmsProductAttribute> stack0 = new Stack<PmsProductAttribute>();
      Long long0 = new Long(4061L);
      //mock pmsProductAttribute0
      PmsProductAttribute pmsProductAttribute0 = mock(PmsProductAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProductAttribute0).getId();
      
      stack0.add(pmsProductAttribute0);
      //mock pmsProductAttributeMapper0
      PmsProductAttributeMapper pmsProductAttributeMapper0 = mock(PmsProductAttributeMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductAttributeMapper0).selectByExample(any(com.macro.mall.model.PmsProductAttributeExample.class));
      Vector<PmsProductAttributeValue> vector0 = new Vector<PmsProductAttributeValue>();
      //mock pmsProductAttributeValueMapper0
      PmsProductAttributeValueMapper pmsProductAttributeValueMapper0 = mock(PmsProductAttributeValueMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductAttributeValueMapper0).selectByExample(any(com.macro.mall.model.PmsProductAttributeValueExample.class));
      Stack<PmsProductFullReduction> stack1 = new Stack<PmsProductFullReduction>();
      //mock pmsProductFullReductionMapper0
      PmsProductFullReductionMapper pmsProductFullReductionMapper0 = mock(PmsProductFullReductionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack1).when(pmsProductFullReductionMapper0).selectByExample(any(com.macro.mall.model.PmsProductFullReductionExample.class));
      Integer integer0 = new Integer(2585);
      Integer integer1 = new Integer(4);
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProduct0).getBrandId();
      doReturn(long0, long0, long0, long0).when(pmsProduct0).getId();
      doReturn(long0).when(pmsProduct0).getProductAttributeCategoryId();
      doReturn(long0).when(pmsProduct0).getProductCategoryId();
      doReturn(integer0, integer1).when(pmsProduct0).getPromotionType();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProduct0).when(pmsProductMapper0).selectByPrimaryKey(anyLong());
      Vector<PmsSkuStock> vector1 = new Vector<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      Stack<SmsCoupon> stack2 = new Stack<SmsCoupon>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack2).when(portalProductDao0).getAvailableCouponList(nullable(java.lang.Long.class) , nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productFullReductionMapper", (Object) pmsProductFullReductionMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productAttributeValueMapper", (Object) pmsProductAttributeValueMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productAttributeMapper", (Object) pmsProductAttributeMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: detail
      PmsPortalProductDetail pmsPortalProductDetail0 = pmsPortalProductServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNotNull(pmsPortalProductDetail0);
  }

  @Test(timeout = 4000)
  public void test_search_4()  throws Throwable  {
      //caseID:a209de1da606f2598abd1fa81f6f8738
      //CoveredLines: [24, 46, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 69]
      //Input_0_String: 
      //Input_1_Long: 0L
      //Input_2_Long: 0L
      //Input_3_Integer: 1
      //Input_4_Integer: 1
      //Input_5_Integer: 1
      //Assert: assertNull(method_result);
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1);
      
      //Call method: search
      List<PmsProduct> list0 = pmsPortalProductServiceImpl0.search("", long0, long0, integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_search_5()  throws Throwable  {
      //caseID:2498c8f7a9b48aee2e8fafa951e9ff7d
      //CoveredLines: [24, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 61, 69]
      //Input_0_String: reactor.core.context.marker.
      //Input_1_Long: 0L
      //Input_2_Long: 0L
      //Input_3_Integer: 3
      //Input_4_Integer: 3
      //Input_5_Integer: 1
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1);
      
      //Call method: search
      List<PmsProduct> list0 = pmsPortalProductServiceImpl0.search("reactor.core.context.marker.", long0, long0, integer0, integer0, integer1);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_search_6()  throws Throwable  {
      //caseID:1a6cfd090dec882e9dd384d63d2ed9bf
      //CoveredLines: [24, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 62, 63, 69]
      //Input_0_String: 1.0
      //Input_1_Long: 5263L
      //Input_2_Long: 5263L
      //Input_3_Integer: 2
      //Input_4_Integer: 2
      //Input_5_Integer: 2
      //Assert: assertEquals(0, method_result.size());
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(5263L);
      Integer integer0 = new Integer(2);
      
      //Call method: search
      List<PmsProduct> list0 = pmsPortalProductServiceImpl0.search("1.0", long0, long0, integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_search_7()  throws Throwable  {
      //caseID:353c00fd65c7512b42e5d1b9cd379988
      //CoveredLines: [24, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 62, 64, 65, 69]
      //Input_0_String: |Mg
      //Input_1_Long: 0L
      //Input_2_Long: 0L
      //Input_3_Integer: 0
      //Input_4_Integer: 0
      //Input_5_Integer: 3
      //Assert: assertNull(method_result);
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3);
      
      //Call method: search
      List<PmsProduct> list0 = pmsPortalProductServiceImpl0.search("|Mg", long0, long0, integer0, integer0, integer1);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_search_8()  throws Throwable  {
      //caseID:a3ec8379dea8bf9c913be6ef88cd0c5d
      //CoveredLines: [24, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 62, 64, 66, 69]
      //Input_0_String: 429
      //Input_1_Long: 265L
      //Input_2_Long: 265L
      //Input_3_Integer: 2271
      //Input_4_Integer: 2271
      //Input_5_Integer: 2271
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      ArrayList<PmsProduct> arrayList0 = new ArrayList<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(265L);
      Integer integer0 = new Integer(2271);
      
      //Call method: search
      List<PmsProduct> list0 = pmsPortalProductServiceImpl0.search("429", long0, long0, integer0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_search_9()  throws Throwable  {
      //caseID:181f86526f44cdb5fbabff2fc3bf0bc6
      //CoveredLines: [24, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 62, 64, 66, 67, 69]
      //Input_0_String: com.macro.mall.portal.service.impl.PmsPortalProductServiceImpl
      //Input_1_Long: 204L
      //Input_2_Long: 204L
      //Input_3_Integer: 31
      //Input_4_Integer: 31
      //Input_5_Integer: 4
      //Assert: assertEquals(0, method_result.size());
      
      PmsPortalProductServiceImpl pmsPortalProductServiceImpl0 = new PmsPortalProductServiceImpl();
      Stack<PmsProduct> stack0 = new Stack<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsPortalProductServiceImpl.class, pmsPortalProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(204L);
      Integer integer0 = new Integer(31);
      Integer integer1 = new Integer(4);
      
      //Call method: search
      List<PmsProduct> list0 = pmsPortalProductServiceImpl0.search("com.macro.mall.portal.service.impl.PmsPortalProductServiceImpl", long0, long0, integer0, integer0, integer1);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }
}
