/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.PmsProductAttribute;
import com.macro.mall.model.PmsProductAttributeValue;
import com.macro.mall.model.PmsProductFullReduction;
import com.macro.mall.model.PmsProductLadder;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.portal.domain.PmsPortalProductDetail;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsPortalProductDetail_SSTest extends PmsPortalProductDetail_SSTest_scaffolding {
// allCoveredLines:[15, 16, 18, 20, 22, 24, 26, 28, 30, 32]

  @Test(timeout = 4000)
  public void test_getBrand_00()  throws Throwable  {
      //caseID:65ad37f74b76daacd07730b2f5a55d9a
      //CoveredLines: [16, 20]
      //Assert: assertNull(method_result);
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      
      //Call method: getBrand
      PmsBrand pmsBrand0 = pmsPortalProductDetail0.getBrand();
      
      //Test Result Assert
      assertNull(pmsBrand0);
  }

  @Test(timeout = 4000)
  public void test_getCouponList_01()  throws Throwable  {
      //caseID:2c0d464926455c307e309537b48a7f72
      //CoveredLines: [16, 32]
      //Assert: assertEquals(0, method_result.size());
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      Vector<SmsCoupon> vector0 = new Vector<SmsCoupon>();
      PrivateAccess.setVariable((Class<?>) PmsPortalProductDetail.class, pmsPortalProductDetail0, "couponList", (Object) vector0);
      
      //Call method: getCouponList
      List<SmsCoupon> list0 = pmsPortalProductDetail0.getCouponList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getProduct_02()  throws Throwable  {
      //caseID:f6de665b1ceb1bd864dbb60374a574b8
      //CoveredLines: [16, 18]
      //Assert: assertNull(method_result);
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      
      //Call method: getProduct
      PmsProduct pmsProduct0 = pmsPortalProductDetail0.getProduct();
      
      //Test Result Assert
      assertNull(pmsProduct0);
  }

  @Test(timeout = 4000)
  public void test_getProductAttributeList_03()  throws Throwable  {
      //caseID:1bfd9311f6422fb3408abf25cdff3e25
      //CoveredLines: [16, 22]
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      ArrayList<PmsProductAttribute> arrayList0 = new ArrayList<PmsProductAttribute>();
      PrivateAccess.setVariable((Class<?>) PmsPortalProductDetail.class, pmsPortalProductDetail0, "productAttributeList", (Object) arrayList0);
      
      //Call method: getProductAttributeList
      List<PmsProductAttribute> list0 = pmsPortalProductDetail0.getProductAttributeList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getProductAttributeValueList_04()  throws Throwable  {
      //caseID:863d353bb9d02edb8c1d89ee662ef538
      //CoveredLines: [16, 24]
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      ArrayList<PmsProductAttributeValue> arrayList0 = new ArrayList<PmsProductAttributeValue>();
      PrivateAccess.setVariable((Class<?>) PmsPortalProductDetail.class, pmsPortalProductDetail0, "productAttributeValueList", (Object) arrayList0);
      
      //Call method: getProductAttributeValueList
      List<PmsProductAttributeValue> list0 = pmsPortalProductDetail0.getProductAttributeValueList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getProductFullReductionList_05()  throws Throwable  {
      //caseID:d194153550fc2f2d926b11b666717dba
      //CoveredLines: [16, 30]
      //Assert: assertEquals(0, method_result.size());
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      Vector<PmsProductFullReduction> vector0 = new Vector<PmsProductFullReduction>();
      PrivateAccess.setVariable((Class<?>) PmsPortalProductDetail.class, pmsPortalProductDetail0, "productFullReductionList", (Object) vector0);
      
      //Call method: getProductFullReductionList
      List<PmsProductFullReduction> list0 = pmsPortalProductDetail0.getProductFullReductionList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getProductLadderList_06()  throws Throwable  {
      //caseID:7b7b515fd1c0b8c1f8556ecf9b8d9461
      //CoveredLines: [16, 28]
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      Vector<PmsProductLadder> vector0 = new Vector<PmsProductLadder>();
      PrivateAccess.setVariable((Class<?>) PmsPortalProductDetail.class, pmsPortalProductDetail0, "productLadderList", (Object) vector0);
      
      //Call method: getProductLadderList
      List<PmsProductLadder> list0 = pmsPortalProductDetail0.getProductLadderList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getSkuStockList_07()  throws Throwable  {
      //caseID:63e4b47acf9dc4b5d4195d95a1bcc024
      //CoveredLines: [16, 26]
      //Assert: assertEquals(0, method_result.size());
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      PrivateAccess.setVariable((Class<?>) PmsPortalProductDetail.class, pmsPortalProductDetail0, "skuStockList", (Object) arrayList0);
      
      //Call method: getSkuStockList
      List<PmsSkuStock> list0 = pmsPortalProductDetail0.getSkuStockList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_setBrand_08()  throws Throwable  {
      //caseID:01e56d49b3c7e4f5c153ba83737b2af0
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_PmsBrand: {}
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      //mock pmsBrand0
      PmsBrand pmsBrand0 = mock(PmsBrand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setBrand
      pmsPortalProductDetail0.setBrand(pmsBrand0);
  }

  @Test(timeout = 4000)
  public void test_setCouponList_09()  throws Throwable  {
      //caseID:c5c1a6bb8e11cebf3de4a3bb6bc33ca0
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_SmsCoupon>: arrayList0
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      ArrayList<SmsCoupon> arrayList0 = new ArrayList<SmsCoupon>();
      
      //Call method: setCouponList
      pmsPortalProductDetail0.setCouponList(arrayList0);
      
      //Test Result Assert
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test_setProduct_10()  throws Throwable  {
      //caseID:15fc9d9ce74c4b61598057a8f4fcc2af
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_PmsProduct: {}
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setProduct
      pmsPortalProductDetail0.setProduct(pmsProduct0);
  }

  @Test(timeout = 4000)
  public void test_setProductAttributeList_11()  throws Throwable  {
      //caseID:7c1056e98fe7e523bba908dccc7505bc
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_PmsProductAttribute>: stack0
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      Stack<PmsProductAttribute> stack0 = new Stack<PmsProductAttribute>();
      
      //Call method: setProductAttributeList
      pmsPortalProductDetail0.setProductAttributeList(stack0);
      
      //Test Result Assert
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test_setProductAttributeValueList_12()  throws Throwable  {
      //caseID:50bf5b7009c982c2ac7931585af8a560
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_PmsProductAttributeValue>: arrayList0
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      ArrayList<PmsProductAttributeValue> arrayList0 = new ArrayList<PmsProductAttributeValue>();
      
      //Call method: setProductAttributeValueList
      pmsPortalProductDetail0.setProductAttributeValueList(arrayList0);
      
      //Test Result Assert
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_setProductFullReductionList_13()  throws Throwable  {
      //caseID:fdad2d6029b4220641306a264848e287
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_PmsProductFullReduction>: arrayList0
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      ArrayList<PmsProductFullReduction> arrayList0 = new ArrayList<PmsProductFullReduction>();
      
      //Call method: setProductFullReductionList
      pmsPortalProductDetail0.setProductFullReductionList(arrayList0);
      
      //Test Result Assert
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test_setProductLadderList_14()  throws Throwable  {
      //caseID:60e9b496a57c41f3a1de4b18cee3ce38
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_PmsProductLadder>: linkedList0
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      LinkedList<PmsProductLadder> linkedList0 = new LinkedList<PmsProductLadder>();
      
      //Call method: setProductLadderList
      pmsPortalProductDetail0.setProductLadderList(linkedList0);
      
      //Test Result Assert
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test_setSkuStockList_15()  throws Throwable  {
      //caseID:4de8e8b9d2ec3b6c9210ea15fc2d0b09
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 16]
      //Input_0_PmsSkuStock>: arrayList0
      
      PmsPortalProductDetail pmsPortalProductDetail0 = new PmsPortalProductDetail();
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      
      //Call method: setSkuStockList
      pmsPortalProductDetail0.setSkuStockList(arrayList0);
      
      //Test Result Assert
      assertTrue(arrayList0.isEmpty());
  }
}
