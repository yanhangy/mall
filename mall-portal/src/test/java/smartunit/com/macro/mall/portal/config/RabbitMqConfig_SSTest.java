/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.portal.config.RabbitMqConfig;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.Queue;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RabbitMqConfig_SSTest extends RabbitMqConfig_SSTest_scaffolding {
// allCoveredLines:[13, 20, 21, 22, 23, 31, 32, 33, 34, 42, 50, 51, 52, 53, 54, 62, 63, 64, 65, 73, 74, 75, 76]

  @Test(timeout = 4000)
  public void test_orderBinding_0()  throws Throwable  {
      //caseID:fb95a41ee441060f852deb46785265a4
      //CoveredLines: [13, 62, 63, 64, 65]
      //Input_0_org.springframework.amqp.core.DirectExchange: {}
      //Input_1_org.springframework.amqp.core.Queue: {}
      //Assert: assertTrue(method_result.shouldDeclare());
      
      RabbitMqConfig rabbitMqConfig0 = new RabbitMqConfig();
      //mock directExchange0
      DirectExchange directExchange0 = mock(DirectExchange.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock queue0
      Queue queue0 = mock(Queue.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: orderBinding
      Binding binding0 = (Binding)PrivateAccess.callMethod((Class<RabbitMqConfig>) RabbitMqConfig.class, rabbitMqConfig0, "orderBinding", (Object) directExchange0, (Class<?>) DirectExchange.class, (Object) queue0, (Class<?>) Queue.class);
      
      //Test Result Assert
      assertTrue(binding0.shouldDeclare());
  }

  @Test(timeout = 4000)
  public void test_orderDirect_1()  throws Throwable  {
      //caseID:2c345de730fd5cb6582edaa242a8b128
      //CoveredLines: [13, 20, 21, 22, 23]
      //Assert: assertTrue(method_result.isDurable());
      
      RabbitMqConfig rabbitMqConfig0 = new RabbitMqConfig();
      
      //Call method: orderDirect
      DirectExchange directExchange0 = (DirectExchange)PrivateAccess.callMethod((Class<RabbitMqConfig>) RabbitMqConfig.class, rabbitMqConfig0, "orderDirect");
      
      //Test Result Assert
      assertTrue(directExchange0.isDurable());
  }

  @Test(timeout = 4000)
  public void test_orderQueue_2()  throws Throwable  {
      //caseID:e22c856611dd8d7c3fe0e2d4cf0dbc1a
      //CoveredLines: [13, 42]
      //Assert: assertEquals("mall.order.cancel", method_result.getName());
      
      RabbitMqConfig rabbitMqConfig0 = new RabbitMqConfig();
      
      //Call method: orderQueue
      Queue queue0 = rabbitMqConfig0.orderQueue();
      
      //Test Result Assert
      assertEquals("mall.order.cancel", queue0.getName());
  }

  @Test(timeout = 4000)
  public void test_orderTtlBinding_3()  throws Throwable  {
      //caseID:02ce0eb6fdf072fe39d222aaa7266616
      //CoveredLines: [13, 73, 74, 75, 76]
      //Input_0_org.springframework.amqp.core.DirectExchange: {}
      //Input_1_org.springframework.amqp.core.Queue: {}
      //Assert: assertFalse(method_result.isIgnoreDeclarationExceptions());
      
      RabbitMqConfig rabbitMqConfig0 = new RabbitMqConfig();
      //mock directExchange0
      DirectExchange directExchange0 = mock(DirectExchange.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock queue0
      Queue queue0 = mock(Queue.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: orderTtlBinding
      Binding binding0 = (Binding)PrivateAccess.callMethod((Class<RabbitMqConfig>) RabbitMqConfig.class, rabbitMqConfig0, "orderTtlBinding", (Object) directExchange0, (Class<?>) DirectExchange.class, (Object) queue0, (Class<?>) Queue.class);
      
      //Test Result Assert
      assertFalse(binding0.isIgnoreDeclarationExceptions());
  }

  @Test(timeout = 4000)
  public void test_orderTtlDirect_4()  throws Throwable  {
      //caseID:7e9b250e6ff2a06bec96efaf94b1f6e2
      //CoveredLines: [13, 31, 32, 33, 34]
      //Assert: assertTrue(method_result.isDurable());
      
      RabbitMqConfig rabbitMqConfig0 = new RabbitMqConfig();
      
      //Call method: orderTtlDirect
      DirectExchange directExchange0 = (DirectExchange)PrivateAccess.callMethod((Class<RabbitMqConfig>) RabbitMqConfig.class, rabbitMqConfig0, "orderTtlDirect");
      
      //Test Result Assert
      assertTrue(directExchange0.isDurable());
  }

  @Test(timeout = 4000)
  public void test_orderTtlQueue_5()  throws Throwable  {
      //caseID:5c766824654a933a16fa5b8da15e03b5
      //CoveredLines: [13, 50, 51, 52, 53, 54]
      //Assert: assertFalse(method_result.isExclusive());
      
      RabbitMqConfig rabbitMqConfig0 = new RabbitMqConfig();
      
      //Call method: orderTtlQueue
      Queue queue0 = rabbitMqConfig0.orderTtlQueue();
      
      //Test Result Assert
      assertFalse(queue0.isExclusive());
  }
}
