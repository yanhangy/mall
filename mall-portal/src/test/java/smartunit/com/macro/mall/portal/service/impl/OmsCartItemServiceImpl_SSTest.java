/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.OmsCartItemMapper;
import com.macro.mall.model.OmsCartItem;
import com.macro.mall.model.UmsMember;
import com.macro.mall.portal.dao.PortalProductDao;
import com.macro.mall.portal.domain.CartProduct;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.service.OmsPromotionService;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.OmsCartItemServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsCartItemServiceImpl_SSTest extends OmsCartItemServiceImpl_SSTest_scaffolding {
// allCoveredLines:[29, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 62, 63, 64, 65, 66, 68, 69, 70, 72, 77, 78, 79, 84, 85, 86, 88, 89, 90, 92, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 116, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138]

  @Test(timeout = 4000)
  public void test_clear_00()  throws Throwable  {
      //caseID:d3eccb74eb17a7a01ee1d2ae48f0eb84
      //CoveredLines: [29, 134, 135, 136, 137, 138]
      //Input_0_Long: 1L
      //Assert: assertEquals(0, method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      Long long0 = new Long(1L);
      
      //Call method: clear
      int int0 = omsCartItemServiceImpl0.clear(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_01()  throws Throwable  {
      //caseID:c9496cc569f5eb9f6f4e2b84ee583cd8
      //CoveredLines: [29, 107, 108, 109, 110, 111]
      //Input_0_Long: 1
      //Input_1_List<Long>: stack0
      //Assert: assertEquals(1, method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(omsCartItemMapper0).updateByExampleSelective(any(com.macro.mall.model.OmsCartItem.class) , any(com.macro.mall.model.OmsCartItemExample.class));
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      Long long0 = new Long(1);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      int int0 = omsCartItemServiceImpl0.delete(long0, stack0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_getCartItem_02()  throws Throwable  {
      //caseID:54585809ad7815b8c45610af39a0cf5c
      //CoveredLines: [29, 62, 63, 64, 65, 68, 69, 72]
      //Input_0_com.macro.mall.model.OmsCartItem: {getMemberId=0L, getProductId=0L}
      //Assert: assertNull(method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      Long long0 = new Long(0L);
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn(long0).when(omsCartItem0).getProductId();
      
      //Call method: getCartItem
      Object object0 = PrivateAccess.callMethod((Class<OmsCartItemServiceImpl>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "getCartItem", (Object) omsCartItem0, (Class<?>) OmsCartItem.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getCartProduct_03()  throws Throwable  {
      //caseID:7fdd3d3b050f6d49b0ab91508909d0fc
      //CoveredLines: [29, 116]
      //Input_0_Long: 428L
      //Assert: assertNull(method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "productDao", (Object) portalProductDao0);
      Long long0 = new Long(428L);
      
      //Call method: getCartProduct
      CartProduct cartProduct0 = omsCartItemServiceImpl0.getCartProduct(long0);
      
      //Test Result Assert
      assertNull(cartProduct0);
  }

  @Test(timeout = 4000)
  public void test_listPromotion_04()  throws Throwable  {
      //caseID:cd5ce7a1b58b28f2f9a945330d6c6ab0
      //CoveredLines: [29, 77, 78, 79, 84, 85, 88, 89, 90, 92]
      //Input_0_Long: 2945L
      //Input_1_List<Long>: linkedList0
      //Assert: assertNull(method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      Vector<OmsCartItem> vector0 = new Vector<OmsCartItem>();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsCartItemMapper0).selectByExample(any(com.macro.mall.model.OmsCartItemExample.class));
      //mock omsPromotionService0
      OmsPromotionService omsPromotionService0 = mock(OmsPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "promotionService", (Object) omsPromotionService0);
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(omsCartItem0);
      Long long0 = new Long(2945L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: listPromotion
      List<CartPromotionItem> list0 = omsCartItemServiceImpl0.listPromotion(long0, linkedList0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listPromotion_05()  throws Throwable  {
      //caseID:f937ed333e0d24e4ec05dbe1e8e471f5
      //CoveredLines: [29, 77, 78, 79, 84, 85, 86, 86, 88, 89, 92]
      //Input_0_Long: 4030L
      //Input_1_List<Long>: stack0
      //Assert: assertTrue(method_result.isEmpty());
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      ArrayList<OmsCartItem> arrayList0 = new ArrayList<OmsCartItem>();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(omsCartItem0);
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemMapper0).selectByExample(any(com.macro.mall.model.OmsCartItemExample.class));
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      Long long0 = new Long(4030L);
      Stack<Long> stack0 = new Stack<Long>();
      
      stack0.add(long0);
      
      //Call method: listPromotion
      List<CartPromotionItem> list0 = omsCartItemServiceImpl0.listPromotion(long0, stack0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_listPromotion_06()  throws Throwable  {
      //caseID:2cc67f46de407be3138fb0144ab266c1
      //CoveredLines: [29, 77, 78, 79, 84, 85, 86, 86, 88, 89, 92]
      //Input_0_Long: 1912L
      //Input_1_List<Long>: stack0
      //Assert: assertEquals(0, method_result.size());
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      ArrayList<OmsCartItem> arrayList0 = new ArrayList<OmsCartItem>();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemMapper0).selectByExample(any(com.macro.mall.model.OmsCartItemExample.class));
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      Long long0 = new Long(1912L);
      Stack<Long> stack0 = new Stack<Long>();
      
      stack0.add(long0);
      
      //Call method: listPromotion
      List<CartPromotionItem> list0 = omsCartItemServiceImpl0.listPromotion(long0, stack0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_listPromotion_07()  throws Throwable  {
      //caseID:3592d2cad35a6f823d6b57bb4febee56
      //CoveredLines: [29, 77, 78, 79, 84, 85, 86, 86, 88, 89, 90, 92]
      //Input_0_Long: 0L
      //Input_1_List<Long>: stack0
      //Assert: assertNull(method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      ArrayList<OmsCartItem> arrayList0 = new ArrayList<OmsCartItem>();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemMapper0).selectByExample(any(com.macro.mall.model.OmsCartItemExample.class));
      //mock omsPromotionService0
      OmsPromotionService omsPromotionService0 = mock(OmsPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "promotionService", (Object) omsPromotionService0);
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(omsCartItem0);
      Long long0 = new Long(0L);
      Stack<Long> stack0 = new Stack<Long>();
      
      stack0.add(null);
      
      //Call method: listPromotion
      List<CartPromotionItem> list0 = omsCartItemServiceImpl0.listPromotion(long0, stack0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateAttr_08()  throws Throwable  {
      //caseID:b0bdb2edb0a180f43e732cc30e578565
      //CoveredLines: [29, 42, 43, 44, 45, 46, 47, 48, 49, 55, 62, 63, 64, 65, 66, 68, 69, 72, 122, 123, 124, 125, 126, 127, 128, 129]
      //Input_0_OmsCartItem: {getProductSkuId=(-2095105996) (-2095105996), getId=(-2095105996), getMemberId=(-2095105996), getProductId=(-2095105996)}
      //Assert: assertEquals(1, method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      ArrayList<OmsCartItem> arrayList0 = new ArrayList<OmsCartItem>();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-2095105996)).when(omsCartItemMapper0).insert(any(com.macro.mall.model.OmsCartItem.class));
      doReturn(arrayList0).when(omsCartItemMapper0).selectByExample(any(com.macro.mall.model.OmsCartItemExample.class));
      doReturn((-2095105996)).when(omsCartItemMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsCartItem.class));
      Long long0 = new Long((-2095105996));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn("-2145716169").when(umsMember0).getNickname();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn(long0).when(omsCartItem0).getProductId();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      
      //Call method: updateAttr
      int int0 = omsCartItemServiceImpl0.updateAttr(omsCartItem0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateAttr_09()  throws Throwable  {
      //caseID:8d35953717b1d68d22a6855af3199497
      //CoveredLines: [29, 42, 43, 44, 45, 46, 47, 51, 52, 53, 55, 62, 63, 64, 65, 66, 68, 69, 70, 122, 123, 124, 125, 126, 127, 128, 129]
      //Input_0_OmsCartItem: {getProductSkuId=(-2146950903) (-2146950903), getQuantity=(-2146950903), getId=(-2146950903), getMemberId=(-2146950903), getProductId=(-2146950903)}
      //Assert: assertEquals(1, method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      ArrayList<OmsCartItem> arrayList0 = new ArrayList<OmsCartItem>();
      Integer integer0 = new Integer((-2146950903));
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("reactor.core.publisher.FluxMap$MapSubscriber").when(omsCartItem0).toString();
      
      arrayList0.add(omsCartItem0);
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemMapper0).selectByExample(any(com.macro.mall.model.OmsCartItemExample.class));
      doReturn((-2146950903)).when(omsCartItemMapper0).updateByPrimaryKey(any(com.macro.mall.model.OmsCartItem.class));
      doReturn((-2146950903)).when(omsCartItemMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsCartItem.class));
      Long long0 = new Long((-2146950903));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn("reactor.core.publisher.FluxMap$MapSubscriber").when(umsMember0).getNickname();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      //mock omsCartItem1
      OmsCartItem omsCartItem1 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsCartItem1).getId();
      doReturn(long0).when(omsCartItem1).getMemberId();
      doReturn(long0).when(omsCartItem1).getProductId();
      doReturn(long0, long0).when(omsCartItem1).getProductSkuId();
      doReturn(integer0).when(omsCartItem1).getQuantity();
      
      //Call method: updateAttr
      int int0 = omsCartItemServiceImpl0.updateAttr(omsCartItem1);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateQuantity_10()  throws Throwable  {
      //caseID:a35547ff681c11d53af7d9ffd5849fdf
      //CoveredLines: [29, 97, 98, 99, 100, 101, 102]
      //Input_0_Long: 669
      //Input_1_Long: 669
      //Input_2_Integer: 669
      //Assert: assertEquals(669, method_result);
      
      OmsCartItemServiceImpl omsCartItemServiceImpl0 = new OmsCartItemServiceImpl();
      //mock omsCartItemMapper0
      OmsCartItemMapper omsCartItemMapper0 = mock(OmsCartItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(669).when(omsCartItemMapper0).updateByExampleSelective(any(com.macro.mall.model.OmsCartItem.class) , any(com.macro.mall.model.OmsCartItemExample.class));
      
      PrivateAccess.setVariable((Class<?>) OmsCartItemServiceImpl.class, omsCartItemServiceImpl0, "cartItemMapper", (Object) omsCartItemMapper0);
      Long long0 = new Long(669);
      Integer integer0 = new Integer(669);
      
      //Call method: updateQuantity
      int int0 = omsCartItemServiceImpl0.updateQuantity(long0, long0, integer0);
      
      //Test Result Assert
      assertEquals(669, int0);
  }
}
