/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.model.UmsMember;
import com.macro.mall.portal.domain.MemberReadHistory;
import com.macro.mall.portal.repository.MemberReadHistoryRepository;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.MemberReadHistoryServiceImpl;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MemberReadHistoryServiceImpl_SSTest extends MemberReadHistoryServiceImpl_SSTest_scaffolding {
// allCoveredLines:[23, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 61, 62, 63]

  @Test(timeout = 4000)
  public void test_clear_0()  throws Throwable  {
      //caseID:51797e6537c1b8b48616ee585dada854
      //CoveredLines: [23, 61, 62, 63]
      
      MemberReadHistoryServiceImpl memberReadHistoryServiceImpl0 = new MemberReadHistoryServiceImpl();
      //mock memberReadHistoryRepository0
      MemberReadHistoryRepository memberReadHistoryRepository0 = mock(MemberReadHistoryRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberReadHistoryServiceImpl.class, memberReadHistoryServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberReadHistoryServiceImpl.class, memberReadHistoryServiceImpl0, "memberReadHistoryRepository", (Object) memberReadHistoryRepository0);
      
      //Call method: clear
      memberReadHistoryServiceImpl0.clear();
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:0e788a9b262217fb8cb8ca2255f6e18c
      //CoveredLines: [23, 30, 31, 32, 33, 34, 35, 36, 37]
      //Input_0_MemberReadHistory: {}
      //Assert: assertEquals(1, method_result);
      
      MemberReadHistoryServiceImpl memberReadHistoryServiceImpl0 = new MemberReadHistoryServiceImpl();
      //mock memberReadHistoryRepository0
      MemberReadHistoryRepository memberReadHistoryRepository0 = mock(MemberReadHistoryRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberReadHistoryServiceImpl.class, memberReadHistoryServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberReadHistoryServiceImpl.class, memberReadHistoryServiceImpl0, "memberReadHistoryRepository", (Object) memberReadHistoryRepository0);
      //mock memberReadHistory0
      MemberReadHistory memberReadHistory0 = mock(MemberReadHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = memberReadHistoryServiceImpl0.create(memberReadHistory0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:07b8fd99c9e572303e135cdb837b52bf
      //CoveredLines: [23, 42, 43, 44, 45, 46, 47, 48, 49]
      //Input_0_List<String>: vector0
      //Assert: assertEquals(1, method_result);
      
      MemberReadHistoryServiceImpl memberReadHistoryServiceImpl0 = new MemberReadHistoryServiceImpl();
      //mock memberReadHistoryRepository0
      MemberReadHistoryRepository memberReadHistoryRepository0 = mock(MemberReadHistoryRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) MemberReadHistoryServiceImpl.class, memberReadHistoryServiceImpl0, "memberReadHistoryRepository", (Object) memberReadHistoryRepository0);
      Vector<String> vector0 = new Vector<String>();
      
      vector0.add("RedisSetReactiveCommands must not be null");
      
      //Call method: delete
      int int0 = memberReadHistoryServiceImpl0.delete(vector0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:72464490df7732a484cdb786b0cb03e7
      //CoveredLines: [23, 54, 55, 56]
      //Input_0_Integer: 1
      //Input_1_Integer: 1
      //Assert: assertNull(method_result);
      
      MemberReadHistoryServiceImpl memberReadHistoryServiceImpl0 = new MemberReadHistoryServiceImpl();
      //mock memberReadHistoryRepository0
      MemberReadHistoryRepository memberReadHistoryRepository0 = mock(MemberReadHistoryRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberReadHistoryServiceImpl.class, memberReadHistoryServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberReadHistoryServiceImpl.class, memberReadHistoryServiceImpl0, "memberReadHistoryRepository", (Object) memberReadHistoryRepository0);
      Integer integer0 = new Integer(1);
      
      //Call method: list
      Page<MemberReadHistory> page0 = memberReadHistoryServiceImpl0.list(integer0, integer0);
      
      //Test Result Assert
      assertNull(page0);
  }
}
