/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.model.CmsSubject;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.SmsHomeAdvertise;
import com.macro.mall.portal.domain.HomeContentResult;
import com.macro.mall.portal.domain.HomeFlashPromotion;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HomeContentResult_SSTest extends HomeContentResult_SSTest_scaffolding {
// allCoveredLines:[17, 18, 20, 22, 24, 26, 28, 30]

  @Test(timeout = 4000)
  public void test_getAdvertiseList_00()  throws Throwable  {
      //caseID:d6f4a0519dd3ed4f1f2a31bcf77703cf
      //CoveredLines: [18, 20]
      //Assert: assertEquals(0, method_result.size());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      ArrayList<SmsHomeAdvertise> arrayList0 = new ArrayList<SmsHomeAdvertise>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "advertiseList", (Object) arrayList0);
      
      //Call method: getAdvertiseList
      List<SmsHomeAdvertise> list0 = homeContentResult0.getAdvertiseList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getBrandList_01()  throws Throwable  {
      //caseID:e3741ee53a2b154678a82ee10ae94936
      //CoveredLines: [18, 22]
      //Assert: assertNull(method_result);
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      
      //Call method: getBrandList
      List<PmsBrand> list0 = homeContentResult0.getBrandList();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_getHomeFlashPromotion_02()  throws Throwable  {
      //caseID:9a08bef3bfde8c6d0d34e538279c9cf4
      //CoveredLines: [18, 24]
      //Assert: assertNull(method_result);
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      
      //Call method: getHomeFlashPromotion
      HomeFlashPromotion homeFlashPromotion0 = homeContentResult0.getHomeFlashPromotion();
      
      //Test Result Assert
      assertNull(homeFlashPromotion0);
  }

  @Test(timeout = 4000)
  public void test_getHotProductList_03()  throws Throwable  {
      //caseID:bcac12135e2223478da944f602d2d5ae
      //CoveredLines: [18, 28]
      //Assert: assertTrue(method_result.isEmpty());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      ArrayList<PmsProduct> arrayList0 = new ArrayList<PmsProduct>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "hotProductList", (Object) arrayList0);
      
      //Call method: getHotProductList
      List<PmsProduct> list0 = homeContentResult0.getHotProductList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getNewProductList_04()  throws Throwable  {
      //caseID:e38b35dd0d3a47a36bb717f368463278
      //CoveredLines: [18, 26]
      //Assert: assertEquals(0, method_result.size());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Stack<PmsProduct> stack0 = new Stack<PmsProduct>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "newProductList", (Object) stack0);
      
      //Call method: getNewProductList
      List<PmsProduct> list0 = homeContentResult0.getNewProductList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getSubjectList_05()  throws Throwable  {
      //caseID:20b813386d93d78127983294fdb95c4e
      //CoveredLines: [18, 30]
      //Assert: assertTrue(method_result.isEmpty());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      ArrayList<CmsSubject> arrayList0 = new ArrayList<CmsSubject>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "subjectList", (Object) arrayList0);
      
      //Call method: getSubjectList
      List<CmsSubject> list0 = homeContentResult0.getSubjectList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_setAdvertiseList_06()  throws Throwable  {
      //caseID:8e184298a71d429140826ce8b3d7febc
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<SmsHomeAdvertise>: stack0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Stack<SmsHomeAdvertise> stack0 = new Stack<SmsHomeAdvertise>();
      
      //Call method: setAdvertiseList
      homeContentResult0.setAdvertiseList(stack0);
      
      //Test Result Assert
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test_setBrandList_07()  throws Throwable  {
      //caseID:e9aa25f76c8100e8988950179ffb9746
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<PmsBrand>: vector0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Vector<PmsBrand> vector0 = new Vector<PmsBrand>();
      
      //Call method: setBrandList
      homeContentResult0.setBrandList(vector0);
      
      //Test Result Assert
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test_setHomeFlashPromotion_08()  throws Throwable  {
      //caseID:791ba97ab207eb4863e75236d6a0ab6b
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_HomeFlashPromotion: {}
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      //mock homeFlashPromotion0
      HomeFlashPromotion homeFlashPromotion0 = mock(HomeFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setHomeFlashPromotion
      homeContentResult0.setHomeFlashPromotion(homeFlashPromotion0);
  }

  @Test(timeout = 4000)
  public void test_setHotProductList_09()  throws Throwable  {
      //caseID:4281e533cb92091ab7df99a64ac31dde
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<PmsProduct>: vector0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      
      //Call method: setHotProductList
      homeContentResult0.setHotProductList(vector0);
      
      //Test Result Assert
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test_setNewProductList_10()  throws Throwable  {
      //caseID:34ec67baba3171f3621f9c635ae207f8
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<PmsProduct>: stack0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Stack<PmsProduct> stack0 = new Stack<PmsProduct>();
      
      //Call method: setNewProductList
      homeContentResult0.setNewProductList(stack0);
      
      //Test Result Assert
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test_setSubjectList_11()  throws Throwable  {
      //caseID:7b76d954ac5a568399972caa4433df6d
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<CmsSubject>: arrayList0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      ArrayList<CmsSubject> arrayList0 = new ArrayList<CmsSubject>();
      
      //Call method: setSubjectList
      homeContentResult0.setSubjectList(arrayList0);
      
      //Test Result Assert
      assertEquals(0, arrayList0.size());
  }
}
