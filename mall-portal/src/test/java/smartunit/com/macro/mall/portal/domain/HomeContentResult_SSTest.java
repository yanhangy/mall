/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.model.CmsSubject;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.SmsHomeAdvertise;
import com.macro.mall.portal.domain.HomeContentResult;
import com.macro.mall.portal.domain.HomeFlashPromotion;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HomeContentResult_SSTest extends HomeContentResult_SSTest_scaffolding {
// allCoveredLines:[17, 18, 20, 22, 24, 26, 28, 30]

  @Test(timeout = 4000)
  public void test_getAdvertiseList_00()  throws Throwable  {
      //caseID:d0b062fe20637922dc104b2b155b757f
      //CoveredLines: [18, 20]
      //Assert: assertTrue(method_result.isEmpty());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Vector<SmsHomeAdvertise> vector0 = new Vector<SmsHomeAdvertise>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "advertiseList", (Object) vector0);
      
      //Call method: getAdvertiseList
      List<SmsHomeAdvertise> list0 = homeContentResult0.getAdvertiseList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getBrandList_01()  throws Throwable  {
      //caseID:ee9f8e2aa6f308701550dedc00ce777b
      //CoveredLines: [18, 22]
      //Assert: assertTrue(method_result.isEmpty());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      ArrayList<PmsBrand> arrayList0 = new ArrayList<PmsBrand>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "brandList", (Object) arrayList0);
      
      //Call method: getBrandList
      List<PmsBrand> list0 = homeContentResult0.getBrandList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getHomeFlashPromotion_02()  throws Throwable  {
      //caseID:4a02c947ea38b5cba1b1e1bfde97d6d6
      //CoveredLines: [18, 24]
      //Assert: assertNull(method_result);
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      
      //Call method: getHomeFlashPromotion
      HomeFlashPromotion homeFlashPromotion0 = homeContentResult0.getHomeFlashPromotion();
      
      //Test Result Assert
      assertNull(homeFlashPromotion0);
  }

  @Test(timeout = 4000)
  public void test_getHotProductList_03()  throws Throwable  {
      //caseID:433bda2e3cde7f0771ea864ce39252e9
      //CoveredLines: [18, 28]
      //Assert: assertEquals(0, method_result.size());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Stack<PmsProduct> stack0 = new Stack<PmsProduct>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "hotProductList", (Object) stack0);
      
      //Call method: getHotProductList
      List<PmsProduct> list0 = homeContentResult0.getHotProductList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getNewProductList_04()  throws Throwable  {
      //caseID:f6752a8c83671f6e1595c103dbbe0f0e
      //CoveredLines: [18, 26]
      //Assert: assertTrue(method_result.isEmpty());
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      
      PrivateAccess.setVariable((Class<?>) HomeContentResult.class, homeContentResult0, "newProductList", (Object) vector0);
      
      //Call method: getNewProductList
      List<PmsProduct> list0 = homeContentResult0.getNewProductList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getSubjectList_05()  throws Throwable  {
      //caseID:756a0f379dff9a806f759527fd3ddbb3
      //CoveredLines: [18, 30]
      //Assert: assertNull(method_result);
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      
      //Call method: getSubjectList
      List<CmsSubject> list0 = homeContentResult0.getSubjectList();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_setAdvertiseList_06()  throws Throwable  {
      //caseID:51f3e85af2f8e5a77be999c1cf657274
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<SmsHomeAdvertise>: stack0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Stack<SmsHomeAdvertise> stack0 = new Stack<SmsHomeAdvertise>();
      
      //Call method: setAdvertiseList
      homeContentResult0.setAdvertiseList(stack0);
      
      //Test Result Assert
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test_setBrandList_07()  throws Throwable  {
      //caseID:cfe46c9400ea45381c5b7d6d27eabfd6
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<PmsBrand>: linkedList0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      LinkedList<PmsBrand> linkedList0 = new LinkedList<PmsBrand>();
      
      //Call method: setBrandList
      homeContentResult0.setBrandList(linkedList0);
      
      //Test Result Assert
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test_setHomeFlashPromotion_08()  throws Throwable  {
      //caseID:be5adbb6d08c2faa3146474e3c0c6848
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_HomeFlashPromotion: {}
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      //mock homeFlashPromotion0
      HomeFlashPromotion homeFlashPromotion0 = mock(HomeFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setHomeFlashPromotion
      homeContentResult0.setHomeFlashPromotion(homeFlashPromotion0);
  }

  @Test(timeout = 4000)
  public void test_setHotProductList_09()  throws Throwable  {
      //caseID:5c966af61f8c50b7f4e46cd8d37374d7
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<PmsProduct>: arrayList0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      ArrayList<PmsProduct> arrayList0 = new ArrayList<PmsProduct>();
      
      //Call method: setHotProductList
      homeContentResult0.setHotProductList(arrayList0);
      
      //Test Result Assert
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_setNewProductList_10()  throws Throwable  {
      //caseID:5bd920545dadc424fe1142dbcdcfb044
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<PmsProduct>: linkedList0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      LinkedList<PmsProduct> linkedList0 = new LinkedList<PmsProduct>();
      
      //Call method: setNewProductList
      homeContentResult0.setNewProductList(linkedList0);
      
      //Test Result Assert
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test_setSubjectList_11()  throws Throwable  {
      //caseID:d76c7b7a75be3042704f52e51cf8f466
      //CoveredLines: [17, 17, 17, 17, 17, 17, 18]
      //Input_0_List<CmsSubject>: vector0
      
      HomeContentResult homeContentResult0 = new HomeContentResult();
      Vector<CmsSubject> vector0 = new Vector<CmsSubject>();
      
      //Call method: setSubjectList
      homeContentResult0.setSubjectList(vector0);
      
      //Test Result Assert
      assertEquals(0, vector0.size());
  }
}
