/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.model.UmsMember;
import com.macro.mall.portal.domain.MemberDetails;
import java.util.Collection;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.GrantedAuthority;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MemberDetails_SSTest extends MemberDetails_SSTest_scaffolding {
// allCoveredLines:[18, 19, 20, 25, 30, 35, 40, 45, 50, 55, 59]

  @Test(timeout = 4000)
  public void test_getAuthorities_0()  throws Throwable  {
      //caseID:d5a88f32c42ea37069e047a985dbec92
      //CoveredLines: [18, 19, 20, 25]
      //Assert: assertNotNull(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      
      //Call method: getAuthorities
      Collection<? extends GrantedAuthority> collection0 = memberDetails0.getAuthorities();
      
      //Test Result Assert
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test_getPassword_1()  throws Throwable  {
      //caseID:88ae7a138f5afebe347782e109585e18
      //CoveredLines: [18, 19, 20, 30]
      //Assert: assertNull(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      
      //Call method: getPassword
      String string0 = memberDetails0.getPassword();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getUmsMember_2()  throws Throwable  {
      //caseID:1b1d9b4d305143773cb02662ac8931d4
      //CoveredLines: [18, 19, 20, 59]
      //Assert: assertNull(method_result.getStatus());
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      
      //Call method: getUmsMember
      UmsMember umsMember1 = memberDetails0.getUmsMember();
      
      //Test Result Assert
      assertNull(umsMember1.getStatus());
  }

  @Test(timeout = 4000)
  public void test_getUsername_3()  throws Throwable  {
      //caseID:671ea8a72d80613cfeb64100ad7bb475
      //CoveredLines: [18, 19, 20, 35]
      //Assert: assertNull(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      
      //Call method: getUsername
      String string0 = memberDetails0.getUsername();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_isAccountNonExpired_4()  throws Throwable  {
      //caseID:8ace03b9d9740a7afdeecfd4962a92f2
      //CoveredLines: [18, 19, 20, 40]
      //Assert: assertTrue(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      
      //Call method: isAccountNonExpired
      boolean boolean0 = memberDetails0.isAccountNonExpired();
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isAccountNonLocked_5()  throws Throwable  {
      //caseID:9f87a59754cef8e80276f076245b254a
      //CoveredLines: [18, 19, 20, 45]
      //Assert: assertTrue(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      
      //Call method: isAccountNonLocked
      boolean boolean0 = memberDetails0.isAccountNonLocked();
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isCredentialsNonExpired_6()  throws Throwable  {
      //caseID:f9657db36c29657d8c251b3eff0f12bf
      //CoveredLines: [18, 19, 20, 50]
      //Assert: assertTrue(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      
      //Call method: isCredentialsNonExpired
      boolean boolean0 = memberDetails0.isCredentialsNonExpired();
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isEnabled_7()  throws Throwable  {
      //caseID:3f89715758486cc57b7d42fe8731a5ca
      //CoveredLines: [18, 19, 20, 55]
      //Assert: assertFalse(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      Integer integer0 = new Integer(0);
      //mock umsMember1
      UmsMember umsMember1 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember1).getStatus();
      
      PrivateAccess.setVariable((Class<?>) MemberDetails.class, memberDetails0, "umsMember", (Object) umsMember1);
      
      //Call method: isEnabled
      boolean boolean0 = memberDetails0.isEnabled();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isEnabled_8()  throws Throwable  {
      //caseID:19243b47e4e9dfb495571e131f082336
      //CoveredLines: [18, 19, 20, 55]
      //Assert: assertTrue(method_result);
      
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      MemberDetails memberDetails0 = new MemberDetails(umsMember0);
      Integer integer0 = new Integer(1);
      //mock umsMember1
      UmsMember umsMember1 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember1).getStatus();
      
      PrivateAccess.setVariable((Class<?>) MemberDetails.class, memberDetails0, "umsMember", (Object) umsMember1);
      
      //Call method: isEnabled
      boolean boolean0 = memberDetails0.isEnabled();
      
      //Test Result Assert
      assertTrue(boolean0);
  }
}
