/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.model.SmsCouponProductCategoryRelation;
import com.macro.mall.model.SmsCouponProductRelation;
import com.macro.mall.portal.domain.SmsCouponHistoryDetail;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsCouponHistoryDetail_SSTest extends SmsCouponHistoryDetail_SSTest_scaffolding {
// allCoveredLines:[14, 23, 27, 28, 31, 35, 36, 39, 43, 44]

  @Test(timeout = 4000)
  public void test_getCategoryRelationList_0()  throws Throwable  {
      //caseID:487f39ceccbdfecc198c0b09bd75b4c5
      //CoveredLines: [14, 39]
      //Assert: assertEquals(0, method_result.size());
      
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = new SmsCouponHistoryDetail();
      Stack<SmsCouponProductCategoryRelation> stack0 = new Stack<SmsCouponProductCategoryRelation>();
      
      PrivateAccess.setVariable((Class<?>) SmsCouponHistoryDetail.class, smsCouponHistoryDetail0, "categoryRelationList", (Object) stack0);
      
      //Call method: getCategoryRelationList
      List<SmsCouponProductCategoryRelation> list0 = smsCouponHistoryDetail0.getCategoryRelationList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getCoupon_1()  throws Throwable  {
      //caseID:cbbd348bc26b09bd6269d7ef3a753b9e
      //CoveredLines: [14, 23]
      //Assert: assertNull(method_result);
      
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = new SmsCouponHistoryDetail();
      
      //Call method: getCoupon
      SmsCoupon smsCoupon0 = smsCouponHistoryDetail0.getCoupon();
      
      //Test Result Assert
      assertNull(smsCoupon0);
  }

  @Test(timeout = 4000)
  public void test_getProductRelationList_2()  throws Throwable  {
      //caseID:b099f853e324fa841f839f25e30f50c1
      //CoveredLines: [14, 31]
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = new SmsCouponHistoryDetail();
      Vector<SmsCouponProductRelation> vector0 = new Vector<SmsCouponProductRelation>();
      
      PrivateAccess.setVariable((Class<?>) SmsCouponHistoryDetail.class, smsCouponHistoryDetail0, "productRelationList", (Object) vector0);
      
      //Call method: getProductRelationList
      List<SmsCouponProductRelation> list0 = smsCouponHistoryDetail0.getProductRelationList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_setCategoryRelationList_3()  throws Throwable  {
      //caseID:45ab1bdf058429cfe11a9fd1d62d7f7c
      //CoveredLines: [14, 43, 44]
      //Input_0_List<SmsCouponProductCategoryRelation>: stack0
      
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = new SmsCouponHistoryDetail();
      Stack<SmsCouponProductCategoryRelation> stack0 = new Stack<SmsCouponProductCategoryRelation>();
      
      //Call method: setCategoryRelationList
      smsCouponHistoryDetail0.setCategoryRelationList(stack0);
      
      //Test Result Assert
      assertNull(smsCouponHistoryDetail0.getMemberNickname());
  }

  @Test(timeout = 4000)
  public void test_setCoupon_4()  throws Throwable  {
      //caseID:0f1ccfd0aa8fa00f8047e401db85c39a
      //CoveredLines: [14, 27, 28]
      //Input_0_SmsCoupon: {}
      
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = new SmsCouponHistoryDetail();
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCoupon
      smsCouponHistoryDetail0.setCoupon(smsCoupon0);
      
      //Test Result Assert
      assertNull(smsCouponHistoryDetail0.getGetType());
  }

  @Test(timeout = 4000)
  public void test_setProductRelationList_5()  throws Throwable  {
      //caseID:7623de0556d250018ba8c3f60afedbb4
      //CoveredLines: [14, 35, 36]
      //Input_0_List<SmsCouponProductRelation>: stack0
      
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = new SmsCouponHistoryDetail();
      Stack<SmsCouponProductRelation> stack0 = new Stack<SmsCouponProductRelation>();
      
      //Call method: setProductRelationList
      smsCouponHistoryDetail0.setProductRelationList(stack0);
      
      //Test Result Assert
      assertNull(smsCouponHistoryDetail0.getUseStatus());
  }
}
