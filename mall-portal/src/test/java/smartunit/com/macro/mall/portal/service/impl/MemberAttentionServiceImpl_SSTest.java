/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.model.UmsMember;
import com.macro.mall.portal.domain.MemberBrandAttention;
import com.macro.mall.portal.repository.MemberBrandAttentionRepository;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.MemberAttentionServiceImpl;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MemberAttentionServiceImpl_SSTest extends MemberAttentionServiceImpl_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 52, 53, 54, 59, 60, 65, 66, 67]

  @Test(timeout = 4000)
  public void test_add_0()  throws Throwable  {
      //caseID:7d7f69bf58ebae9db1c45055bd773c61
      //CoveredLines: [22, 30, 31, 32, 33, 34, 35, 36, 37, 41]
      //Input_0_MemberBrandAttention: {getBrandId=1L, getMemberId=1L}
      //Assert: assertEquals(0, method_result);
      
      MemberAttentionServiceImpl memberAttentionServiceImpl0 = new MemberAttentionServiceImpl();
      //mock memberBrandAttention0
      MemberBrandAttention memberBrandAttention0 = mock(MemberBrandAttention.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock memberBrandAttentionRepository0
      MemberBrandAttentionRepository memberBrandAttentionRepository0 = mock(MemberBrandAttentionRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(memberBrandAttention0).when(memberBrandAttentionRepository0).findByMemberIdAndBrandId(anyLong() , anyLong());
      Long long0 = new Long(1L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reactor.core.publisher.FluxPublishOn$PublishOnConditionalSubscriber").when(umsMember0).getIcon();
      doReturn(long0).when(umsMember0).getId();
      doReturn("reactor.core.publisher.FluxPublishOn$PublishOnConditionalSubscriber").when(umsMember0).getNickname();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberBrandAttentionRepository", (Object) memberBrandAttentionRepository0);
      //mock memberBrandAttention1
      MemberBrandAttention memberBrandAttention1 = mock(MemberBrandAttention.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(memberBrandAttention1).getBrandId();
      doReturn(long0).when(memberBrandAttention1).getMemberId();
      
      //Call method: add
      int int0 = memberAttentionServiceImpl0.add(memberBrandAttention1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_add_1()  throws Throwable  {
      //caseID:b383b859bfe9a75b07206a86f7c63fe3
      //CoveredLines: [22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41]
      //Input_0_MemberBrandAttention: {}
      //Assert: assertEquals(1, method_result);
      
      MemberAttentionServiceImpl memberAttentionServiceImpl0 = new MemberAttentionServiceImpl();
      //mock memberBrandAttentionRepository0
      MemberBrandAttentionRepository memberBrandAttentionRepository0 = mock(MemberBrandAttentionRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberBrandAttentionRepository", (Object) memberBrandAttentionRepository0);
      //mock memberBrandAttention0
      MemberBrandAttention memberBrandAttention0 = mock(MemberBrandAttention.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: add
      int int0 = memberAttentionServiceImpl0.add(memberBrandAttention0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_clear_2()  throws Throwable  {
      //caseID:fcc73e0ae512d2def37700c5643e3e96
      //CoveredLines: [22, 65, 66, 67]
      
      MemberAttentionServiceImpl memberAttentionServiceImpl0 = new MemberAttentionServiceImpl();
      //mock memberBrandAttentionRepository0
      MemberBrandAttentionRepository memberBrandAttentionRepository0 = mock(MemberBrandAttentionRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberBrandAttentionRepository", (Object) memberBrandAttentionRepository0);
      
      //Call method: clear
      memberAttentionServiceImpl0.clear();
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:8dec7f23220a3f4e6c626a1ce1335c6a
      //CoveredLines: [22, 46, 47]
      //Input_0_Long: 2L
      //Assert: assertEquals(0, method_result);
      
      MemberAttentionServiceImpl memberAttentionServiceImpl0 = new MemberAttentionServiceImpl();
      //mock memberBrandAttentionRepository0
      MemberBrandAttentionRepository memberBrandAttentionRepository0 = mock(MemberBrandAttentionRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberBrandAttentionRepository", (Object) memberBrandAttentionRepository0);
      Long long0 = new Long(2L);
      
      //Call method: delete
      int int0 = memberAttentionServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_detail_4()  throws Throwable  {
      //caseID:db69dffc27910ffa48ffb6f377733def
      //CoveredLines: [22, 59, 60]
      //Input_0_Long: 590L
      //Assert: assertNull(method_result);
      
      MemberAttentionServiceImpl memberAttentionServiceImpl0 = new MemberAttentionServiceImpl();
      //mock memberBrandAttentionRepository0
      MemberBrandAttentionRepository memberBrandAttentionRepository0 = mock(MemberBrandAttentionRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberBrandAttentionRepository", (Object) memberBrandAttentionRepository0);
      Long long0 = new Long(590L);
      
      //Call method: detail
      MemberBrandAttention memberBrandAttention0 = memberAttentionServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNull(memberBrandAttention0);
  }

  @Test(timeout = 4000)
  public void test_list_5()  throws Throwable  {
      //caseID:60e2daffe9385fea6555e207bec422c1
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_Integer: 1
      //Input_1_Integer: 1
      //Assert: assertNull(method_result);
      
      MemberAttentionServiceImpl memberAttentionServiceImpl0 = new MemberAttentionServiceImpl();
      //mock memberBrandAttentionRepository0
      MemberBrandAttentionRepository memberBrandAttentionRepository0 = mock(MemberBrandAttentionRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionServiceImpl.class, memberAttentionServiceImpl0, "memberBrandAttentionRepository", (Object) memberBrandAttentionRepository0);
      Integer integer0 = new Integer(1);
      
      //Call method: list
      Page<MemberBrandAttention> page0 = memberAttentionServiceImpl0.list(integer0, integer0);
      
      //Test Result Assert
      assertNull(page0);
  }
}
