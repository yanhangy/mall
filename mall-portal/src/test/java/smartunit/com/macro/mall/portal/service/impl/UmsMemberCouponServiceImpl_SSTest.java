/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.mapper.SmsCouponHistoryMapper;
import com.macro.mall.mapper.SmsCouponMapper;
import com.macro.mall.mapper.SmsCouponProductCategoryRelationMapper;
import com.macro.mall.mapper.SmsCouponProductRelationMapper;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.model.SmsCouponHistory;
import com.macro.mall.model.SmsCouponProductCategoryRelation;
import com.macro.mall.model.SmsCouponProductRelation;
import com.macro.mall.model.UmsMember;
import com.macro.mall.portal.dao.SmsCouponHistoryDao;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.domain.SmsCouponHistoryDetail;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.UmsMemberCouponServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsMemberCouponServiceImpl_SSTest extends UmsMemberCouponServiceImpl_SSTest_scaffolding {
// allCoveredLines:[27, 44, 46, 47, 48, 50, 51, 53, 54, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 99, 104, 105, 106, 107, 108, 109, 111, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 135, 137, 140, 141, 142, 143, 144, 145, 148, 150, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 168, 174, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 210, 211, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 230, 231, 235, 236, 237, 238, 239, 241, 242]

  @Test(timeout = 4000)
  public void test_add_00()  throws Throwable  {
      //caseID:bb30ac4d4bb49e0f0fe5307a1d6f705e
      //CoveredLines: [27, 44, 46, 47, 48]
      //Input_0_Long: 0L
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      Long long0 = new Long(0L);
      
      //Call method: add
      // Undeclared exception!
      try { 
        umsMemberCouponServiceImpl0.add(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4F18\u60E0\u5238\u4E0D\u5B58\u5728", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_add_01()  throws Throwable  {
      //caseID:68ed68778335598aecb92fe288c540e1
      //CoveredLines: [27, 44, 46, 47, 50, 51]
      //Input_0_Long: 0L
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Integer integer0 = new Integer((-1));
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getCount();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      Long long0 = new Long(0L);
      
      //Call method: add
      // Undeclared exception!
      try { 
        umsMemberCouponServiceImpl0.add(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4F18\u60E0\u5238\u5DF2\u7ECF\u9886\u5B8C\u4E86", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_add_02()  throws Throwable  {
      //caseID:cd1e456c9068e37f5275c4c43fe8bf24
      //CoveredLines: [27, 44, 46, 47, 50, 53, 54, 58, 59, 60, 61, 62]
      //Input_0_Long: (-1L)
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3808L).when(smsCouponHistoryMapper0).countByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      Integer integer0 = new Integer(412);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getCount();
      doReturn(date0).when(smsCoupon0).getEnableTime();
      doReturn(integer0).when(smsCoupon0).getPerLimit();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponMapper0).selectByPrimaryKey(anyLong());
      Long long0 = new Long((-1L));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      //Call method: add
      // Undeclared exception!
      try { 
        umsMemberCouponServiceImpl0.add(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u60A8\u5DF2\u7ECF\u9886\u53D6\u8FC7\u8BE5\u4F18\u60E0\u5238", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_add_03()  throws Throwable  {
      //caseID:f9bd6517a3074659cc10c03ae0856b47
      //CoveredLines: [27, 44, 46, 47, 50, 53, 54, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 93, 94, 97, 99]
      //Input_0_Long: (-5089L)
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1L)).when(smsCouponHistoryMapper0).countByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      Integer integer0 = new Integer(593);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getCount();
      doReturn(date0).when(smsCoupon0).getEnableTime();
      doReturn(integer0).when(smsCoupon0).getPerLimit();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponMapper0).selectByPrimaryKey(anyLong());
      Long long0 = new Long((-5089L));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      //Call method: add
      umsMemberCouponServiceImpl0.add(long0);
  }

  @Test(timeout = 4000)
  public void test_add_04()  throws Throwable  {
      //caseID:62e3147c8268b93a0babf37af3f504fa
      //CoveredLines: [27, 44, 46, 47, 50, 53, 54, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 93, 94, 95, 99]
      //Input_0_Long: 0L
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(smsCouponHistoryMapper0).countByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(307).when(smsCouponHistoryMapper0).insert(any(com.macro.mall.model.SmsCouponHistory.class));
      Integer integer0 = new Integer(307);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(smsCoupon0).getCount();
      doReturn(date0).when(smsCoupon0).getEnableTime();
      doReturn(integer0).when(smsCoupon0).getPerLimit();
      doReturn(integer0, integer0).when(smsCoupon0).getReceiveCount();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponMapper0).selectByPrimaryKey(anyLong());
      doReturn(307).when(smsCouponMapper0).updateByPrimaryKey(any(com.macro.mall.model.SmsCoupon.class));
      Long long0 = new Long(0L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(umsMember0).getId();
      doReturn("\u4F18\u60E0\u5238\u8FD8\u6CA1\u5230\u9886\u53D6\u65F6\u95F4").when(umsMember0).getNickname();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      //Call method: add
      umsMemberCouponServiceImpl0.add(long0);
  }

  @Test(timeout = 4000)
  public void test_add_05()  throws Throwable  {
      //caseID:a6960558d4a36ad057322b588c9cc651
      //CoveredLines: [27, 44, 46, 47, 50, 53, 54, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 93, 94, 95, 99]
      //Input_0_Long: (-921L)
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-921L)).when(smsCouponHistoryMapper0).countByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      Integer integer0 = new Integer(8);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getCount();
      doReturn(date0).when(smsCoupon0).getEnableTime();
      doReturn(integer0).when(smsCoupon0).getPerLimit();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponMapper0).selectByPrimaryKey(anyLong());
      Long long0 = new Long((-921L));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      //Call method: add
      umsMemberCouponServiceImpl0.add(long0);
  }

  @Test(timeout = 4000)
  public void test_calcTotalAmount_06()  throws Throwable  {
      //caseID:d305270aed1e341525524c9cc047d1fd
      //CoveredLines: [27, 215, 216, 217, 218, 219, 220]
      //Input_0_List<com.macro.mall.portal.domain.CartPromotionItem>: arrayList0
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Integer integer0 = new Integer(10);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn(integer0).when(cartPromotionItem0).getQuantity();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList0.add(cartPromotionItem0);
      
      //Call method: calcTotalAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<UmsMemberCouponServiceImpl>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "calcTotalAmount", (Object) arrayList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_calcTotalAmountByProductId_07()  throws Throwable  {
      //caseID:c5641570bd30f26ecef2514dbc4c8c5f
      //CoveredLines: [27, 235, 236, 237, 241, 242]
      //Input_0_List<com.macro.mall.portal.domain.CartPromotionItem>: arrayList0
      //Input_1_List<Long>: vector0
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      Long long0 = new Long(4290L);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(cartPromotionItem0).getProductId();
      
      arrayList0.add(cartPromotionItem0);
      Vector<Long> vector0 = new Vector<Long>();
      
      //Call method: calcTotalAmountByProductId
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<UmsMemberCouponServiceImpl>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "calcTotalAmountByProductId", (Object) arrayList0, (Class<?>) List.class, (Object) vector0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test_calcTotalAmountByproductCategoryId_08()  throws Throwable  {
      //caseID:c8713323764f1184cea64dcb1c39d504
      //CoveredLines: [27, 224, 225, 226, 227, 228, 230, 231]
      //Input_0_List<com.macro.mall.portal.domain.CartPromotionItem>: arrayList0
      //Input_1_List<Long>: linkedList0
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1L));
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      
      arrayList0.add(cartPromotionItem0);
      Long long1 = new Long(1L);
      Long long2 = new Long(1L);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      Integer integer0 = new Integer(1);
      //mock cartPromotionItem1
      CartPromotionItem cartPromotionItem1 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem1).getPrice();
      doReturn(long2).when(cartPromotionItem1).getProductCategoryId();
      doReturn(integer0).when(cartPromotionItem1).getQuantity();
      doReturn(bigDecimal0).when(cartPromotionItem1).getReduceAmount();
      
      arrayList0.add(cartPromotionItem1);
      
      linkedList0.add(long1);
      
      //Call method: calcTotalAmountByproductCategoryId
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<UmsMemberCouponServiceImpl>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "calcTotalAmountByproductCategoryId", (Object) arrayList0, (Class<?>) List.class, (Object) linkedList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_list_09()  throws Throwable  {
      //caseID:0020541fac2f6341041e75ba0b6a2347
      //CoveredLines: [27, 210, 211]
      //Input_0_Integer: 755
      //Assert: assertNull(method_result);
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      //mock smsCouponHistoryDao0
      SmsCouponHistoryDao smsCouponHistoryDao0 = mock(SmsCouponHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryDao", (Object) smsCouponHistoryDao0);
      Integer integer0 = new Integer(755);
      
      //Call method: list
      List<SmsCoupon> list0 = umsMemberCouponServiceImpl0.list(integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listByProduct_10()  throws Throwable  {
      //caseID:967e913fdfedf6082cbde74f246b627c
      //CoveredLines: [27, 174, 176, 177, 178, 179, 184, 185, 186, 187, 188, 192, 193]
      //Input_0_Long: 1L
      //Assert: assertEquals(0, method_result.size());
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Long long0 = new Long(1L);
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProduct0).getProductCategoryId();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProduct0).when(pmsProductMapper0).selectByPrimaryKey(anyLong());
      //mock smsCouponProductCategoryRelationMapper0
      SmsCouponProductCategoryRelationMapper smsCouponProductCategoryRelationMapper0 = mock(SmsCouponProductCategoryRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Vector<SmsCouponProductRelation> vector0 = new Vector<SmsCouponProductRelation>();
      //mock smsCouponProductRelationMapper0
      SmsCouponProductRelationMapper smsCouponProductRelationMapper0 = mock(SmsCouponProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsCouponProductRelationMapper0).selectByExample(any(com.macro.mall.model.SmsCouponProductRelationExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductRelationMapper", (Object) smsCouponProductRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductCategoryRelationMapper", (Object) smsCouponProductCategoryRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: listByProduct
      List<SmsCoupon> list0 = umsMemberCouponServiceImpl0.listByProduct(long0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_listByProduct_11()  throws Throwable  {
      //caseID:d40f7652234086e7e5f2540f816011df
      //CoveredLines: [27, 174, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 190, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205]
      //Input_0_Long: 1000L
      //Assert: assertNull(method_result);
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Long long0 = new Long(1000L);
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProduct0).getProductCategoryId();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProduct0).when(pmsProductMapper0).selectByPrimaryKey(anyLong());
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ArrayList<SmsCouponProductCategoryRelation> arrayList0 = new ArrayList<SmsCouponProductCategoryRelation>();
      //mock smsCouponProductCategoryRelation0
      SmsCouponProductCategoryRelation smsCouponProductCategoryRelation0 = mock(SmsCouponProductCategoryRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(smsCouponProductCategoryRelation0);
      //mock smsCouponProductCategoryRelationMapper0
      SmsCouponProductCategoryRelationMapper smsCouponProductCategoryRelationMapper0 = mock(SmsCouponProductCategoryRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsCouponProductCategoryRelationMapper0).selectByExample(any(com.macro.mall.model.SmsCouponProductCategoryRelationExample.class));
      LinkedList<SmsCouponProductRelation> linkedList0 = new LinkedList<SmsCouponProductRelation>();
      //mock smsCouponProductRelationMapper0
      SmsCouponProductRelationMapper smsCouponProductRelationMapper0 = mock(SmsCouponProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsCouponProductRelationMapper0).selectByExample(any(com.macro.mall.model.SmsCouponProductRelationExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductRelationMapper", (Object) smsCouponProductRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductCategoryRelationMapper", (Object) smsCouponProductCategoryRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: listByProduct
      List<SmsCoupon> list0 = umsMemberCouponServiceImpl0.listByProduct(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listByProduct_12()  throws Throwable  {
      //caseID:4784068a80f306102665c78f77a322bb
      //CoveredLines: [27, 174, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205]
      //Input_0_Long: 624L
      //Assert: assertNull(method_result);
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Long long0 = new Long(624L);
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProduct0).getProductCategoryId();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProduct0).when(pmsProductMapper0).selectByPrimaryKey(anyLong());
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCouponProductCategoryRelationMapper0
      SmsCouponProductCategoryRelationMapper smsCouponProductCategoryRelationMapper0 = mock(SmsCouponProductCategoryRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Stack<SmsCouponProductRelation> stack0 = new Stack<SmsCouponProductRelation>();
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductRelation0).getCouponId();
      
      stack0.add(smsCouponProductRelation0);
      //mock smsCouponProductRelationMapper0
      SmsCouponProductRelationMapper smsCouponProductRelationMapper0 = mock(SmsCouponProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponProductRelationMapper0).selectByExample(any(com.macro.mall.model.SmsCouponProductRelationExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductRelationMapper", (Object) smsCouponProductRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductCategoryRelationMapper", (Object) smsCouponProductCategoryRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: listByProduct
      List<SmsCoupon> list0 = umsMemberCouponServiceImpl0.listByProduct(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listByProduct_13()  throws Throwable  {
      //caseID:43d6d636bee01dbfb82d818a53cb5ef6
      //CoveredLines: [27, 174, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205]
      //Input_0_Long: 5910L
      //Assert: assertTrue(method_result.isEmpty());
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Long long0 = new Long(5910L);
      //mock pmsProduct0
      PmsProduct pmsProduct0 = mock(PmsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProduct0).getProductCategoryId();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProduct0).when(pmsProductMapper0).selectByPrimaryKey(anyLong());
      Vector<SmsCoupon> vector0 = new Vector<SmsCoupon>();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsCouponMapper0).selectByExample(any(com.macro.mall.model.SmsCouponExample.class));
      ArrayList<SmsCouponProductCategoryRelation> arrayList0 = new ArrayList<SmsCouponProductCategoryRelation>();
      //mock smsCouponProductCategoryRelation0
      SmsCouponProductCategoryRelation smsCouponProductCategoryRelation0 = mock(SmsCouponProductCategoryRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductCategoryRelation0).getCouponId();
      
      arrayList0.add(smsCouponProductCategoryRelation0);
      //mock smsCouponProductCategoryRelationMapper0
      SmsCouponProductCategoryRelationMapper smsCouponProductCategoryRelationMapper0 = mock(SmsCouponProductCategoryRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsCouponProductCategoryRelationMapper0).selectByExample(any(com.macro.mall.model.SmsCouponProductCategoryRelationExample.class));
      LinkedList<SmsCouponProductRelation> linkedList0 = new LinkedList<SmsCouponProductRelation>();
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductRelation0).getCouponId();
      
      linkedList0.add(smsCouponProductRelation0);
      //mock smsCouponProductRelationMapper0
      SmsCouponProductRelationMapper smsCouponProductRelationMapper0 = mock(SmsCouponProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsCouponProductRelationMapper0).selectByExample(any(com.macro.mall.model.SmsCouponProductRelationExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductRelationMapper", (Object) smsCouponProductRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponProductCategoryRelationMapper", (Object) smsCouponProductCategoryRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: listByProduct
      List<SmsCoupon> list0 = umsMemberCouponServiceImpl0.listByProduct(long0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_listCart_14()  throws Throwable  {
      //caseID:2025199a0fd7055064d9dbb1a5afa89b
      //CoveredLines: [27, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 164, 165, 168]
      //Input_0_List<CartPromotionItem>: linkedList0
      //Input_1_Integer: 3244
      //Assert: assertFalse(method_result.contains(smsCouponHistoryDetail0));
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Vector<SmsCouponHistoryDetail> vector0 = new Vector<SmsCouponHistoryDetail>();
      Integer integer0 = new Integer(3244);
      BigDecimal bigDecimal0 = new BigDecimal(3244);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getUseType();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(smsCoupon1).getEndTime();
      //mock smsCoupon2
      SmsCoupon smsCoupon2 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon2).getMinPoint();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0, smsCoupon2, smsCoupon1).when(smsCouponHistoryDetail0).getCoupon();
      
      vector0.add(smsCouponHistoryDetail0);
      //mock smsCouponHistoryDao0
      SmsCouponHistoryDao smsCouponHistoryDao0 = mock(SmsCouponHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsCouponHistoryDao0).getDetailList(nullable(java.lang.Long.class));
      Long long0 = new Long(3244);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryDao", (Object) smsCouponHistoryDao0);
      LinkedList<CartPromotionItem> linkedList0 = new LinkedList<CartPromotionItem>();
      
      //Call method: listCart
      List<SmsCouponHistoryDetail> list0 = umsMemberCouponServiceImpl0.listCart(linkedList0, integer0);
      
      //Test Result Assert
      assertFalse(list0.contains(smsCouponHistoryDetail0));
  }

  @Test(timeout = 4000)
  public void test_listCart_15()  throws Throwable  {
      //caseID:3d964fa363281d91d4c88dc7c8fffb5f
      //CoveredLines: [27, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 131, 132, 135, 137, 164, 165, 168, 215, 216, 220]
      //Input_0_List<CartPromotionItem>: linkedList0
      //Input_1_Integer: 0
      //Assert: assertTrue(method_result.contains(smsCouponHistoryDetail0));
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Stack<SmsCouponHistoryDetail> stack0 = new Stack<SmsCouponHistoryDetail>();
      Integer integer0 = new Integer(0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getUseType();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(smsCoupon1).getEndTime();
      //mock smsCoupon2
      SmsCoupon smsCoupon2 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon2).getMinPoint();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0gy$B2").when(smsCouponHistoryDetail0).toString();
      doReturn(smsCoupon0, smsCoupon2, smsCoupon1).when(smsCouponHistoryDetail0).getCoupon();
      
      stack0.add(smsCouponHistoryDetail0);
      //mock smsCouponHistoryDao0
      SmsCouponHistoryDao smsCouponHistoryDao0 = mock(SmsCouponHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponHistoryDao0).getDetailList(nullable(java.lang.Long.class));
      Long long0 = new Long(0);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryDao", (Object) smsCouponHistoryDao0);
      LinkedList<CartPromotionItem> linkedList0 = new LinkedList<CartPromotionItem>();
      
      //Call method: listCart
      List<SmsCouponHistoryDetail> list0 = umsMemberCouponServiceImpl0.listCart(linkedList0, integer0);
      
      //Test Result Assert
      assertTrue(list0.contains(smsCouponHistoryDetail0));
  }

  @Test(timeout = 4000)
  public void test_listCart_16()  throws Throwable  {
      //caseID:568071ec5c534149025ea05bd1c4d07a
      //CoveredLines: [27, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 140, 141, 142, 143, 144, 145, 148, 150, 164, 165, 168, 224, 225, 231]
      //Input_0_List<CartPromotionItem>: linkedList0
      //Input_1_Integer: 3244
      //Assert: assertEquals(1, method_result.size());
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Stack<SmsCouponHistoryDetail> stack0 = new Stack<SmsCouponHistoryDetail>();
      //mock smsCouponHistoryDao0
      SmsCouponHistoryDao smsCouponHistoryDao0 = mock(SmsCouponHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponHistoryDao0).getDetailList(nullable(java.lang.Long.class));
      Long long0 = new Long(3244);
      Integer integer0 = new Integer(1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getUseType();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(smsCoupon1).getEndTime();
      //mock smsCoupon2
      SmsCoupon smsCoupon2 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon2).getMinPoint();
      ArrayList<SmsCouponProductCategoryRelation> arrayList0 = new ArrayList<SmsCouponProductCategoryRelation>();
      //mock smsCouponProductCategoryRelation0
      SmsCouponProductCategoryRelation smsCouponProductCategoryRelation0 = mock(SmsCouponProductCategoryRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductCategoryRelation0).getProductCategoryId();
      
      arrayList0.add(smsCouponProductCategoryRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("~78T$").when(smsCouponHistoryDetail0).toString();
      doReturn(arrayList0).when(smsCouponHistoryDetail0).getCategoryRelationList();
      doReturn(smsCoupon0, smsCoupon2, smsCoupon1).when(smsCouponHistoryDetail0).getCoupon();
      
      stack0.add(smsCouponHistoryDetail0);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryDao", (Object) smsCouponHistoryDao0);
      LinkedList<CartPromotionItem> linkedList0 = new LinkedList<CartPromotionItem>();
      Integer integer1 = new Integer(3244);
      
      //Call method: listCart
      List<SmsCouponHistoryDetail> list0 = umsMemberCouponServiceImpl0.listCart(linkedList0, integer1);
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_listCart_17()  throws Throwable  {
      //caseID:b4dd5d9404e4c13f9d0b1726d6116c31
      //CoveredLines: [27, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 153, 154, 155, 156, 157, 158, 161, 164, 165, 168, 235, 236, 237, 238, 239, 241, 242]
      //Input_0_List<CartPromotionItem>: arrayList0
      //Input_1_Integer: 2
      //Assert: assertEquals(1, method_result.size());
      //Assert: assertTrue(method_result.contains(smsCouponHistoryDetail0));
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Stack<SmsCouponHistoryDetail> stack0 = new Stack<SmsCouponHistoryDetail>();
      Integer integer0 = new Integer(2);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getUseType();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(smsCoupon1).getEndTime();
      //mock smsCoupon2
      SmsCoupon smsCoupon2 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon2).getMinPoint();
      Stack<SmsCouponProductRelation> stack1 = new Stack<SmsCouponProductRelation>();
      Long long0 = new Long(100L);
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductRelation0).getProductId();
      
      stack1.add(smsCouponProductRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(smsCouponHistoryDetail0).toString();
      doReturn(smsCoupon0, smsCoupon2, smsCoupon1).when(smsCouponHistoryDetail0).getCoupon();
      doReturn(stack1).when(smsCouponHistoryDetail0).getProductRelationList();
      
      stack0.add(smsCouponHistoryDetail0);
      //mock smsCouponHistoryDao0
      SmsCouponHistoryDao smsCouponHistoryDao0 = mock(SmsCouponHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponHistoryDao0).getDetailList(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryDao", (Object) smsCouponHistoryDao0);
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn(integer0).when(cartPromotionItem0).getQuantity();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList0.add(cartPromotionItem0);
      
      //Call method: listCart
      List<SmsCouponHistoryDetail> list0 = umsMemberCouponServiceImpl0.listCart(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(1, list0.size());
      
      //Test Result Assert
      assertTrue(list0.contains(smsCouponHistoryDetail0));
  }

  @Test(timeout = 4000)
  public void test_listCart_18()  throws Throwable  {
      //caseID:fc3dfb28030f232bd28fab41ada7ac10
      //CoveredLines: [27, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 235, 236, 237, 238, 239, 241, 242]
      //Input_0_List<CartPromotionItem>: stack1
      //Input_1_Integer: 1
      //Assert: assertEquals(0, method_result.size());
      //Assert: assertEquals("[null]", stack1.toString());
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      Stack<SmsCouponHistoryDetail> stack0 = new Stack<SmsCouponHistoryDetail>();
      Integer integer0 = new Integer(2);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(smsCoupon0).getUseType();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(smsCoupon1).getEndTime();
      //mock smsCoupon2
      SmsCoupon smsCoupon2 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon2).getMinPoint();
      ArrayList<SmsCouponProductRelation> arrayList0 = new ArrayList<SmsCouponProductRelation>();
      Long long0 = new Long(2);
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductRelation0).getProductId();
      
      arrayList0.add(smsCouponProductRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0, smsCoupon2, smsCoupon1).when(smsCouponHistoryDetail0).getCoupon();
      doReturn(arrayList0).when(smsCouponHistoryDetail0).getProductRelationList();
      
      stack0.add(smsCouponHistoryDetail0);
      //mock smsCouponHistoryDao0
      SmsCouponHistoryDao smsCouponHistoryDao0 = mock(SmsCouponHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponHistoryDao0).getDetailList(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryDao", (Object) smsCouponHistoryDao0);
      Stack<CartPromotionItem> stack1 = new Stack<CartPromotionItem>();
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn(integer0).when(cartPromotionItem0).getQuantity();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      stack1.add(cartPromotionItem0);
      Integer integer1 = new Integer(1);
      
      //Call method: listCart
      List<SmsCouponHistoryDetail> list0 = umsMemberCouponServiceImpl0.listCart(stack1, integer1);
      
      //Test Result Assert
      assertEquals(0, list0.size());
      
      //Test Result Assert
      assertEquals("[null]", stack1.toString());
  }

  @Test(timeout = 4000)
  public void test_listHistory_19()  throws Throwable  {
      //caseID:4f75381f0a643da48ccb9a8ab6e9bc28
      //CoveredLines: [27, 104, 105, 106, 107, 108, 109, 111]
      //Input_0_Integer: 793
      //Assert: assertNull(method_result);
      
      UmsMemberCouponServiceImpl umsMemberCouponServiceImpl0 = new UmsMemberCouponServiceImpl();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(3684L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberCouponServiceImpl.class, umsMemberCouponServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      Integer integer0 = new Integer(793);
      
      //Call method: listHistory
      List<SmsCouponHistory> list0 = umsMemberCouponServiceImpl0.listHistory(integer0);
      
      //Test Result Assert
      assertNull(list0);
  }
}
