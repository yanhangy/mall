/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.portal.controller.MemberAttentionController;
import com.macro.mall.portal.domain.MemberBrandAttention;
import com.macro.mall.portal.service.MemberAttentionService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MemberAttentionController_SSTest extends MemberAttentionController_SSTest_scaffolding {
// allCoveredLines:[24, 31, 32, 33, 35, 43, 44, 45, 47, 56, 57, 64, 65, 72, 73]

  @Test(timeout = 4000)
  public void test_add_0()  throws Throwable  {
      //caseID:841182fd5490985543ff6c622ca3bbc3
      //CoveredLines: [24, 31, 32, 33]
      //Input_0_MemberBrandAttention: {}
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(68).when(memberAttentionService0).add(any(com.macro.mall.portal.domain.MemberBrandAttention.class));
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      //mock memberBrandAttention0
      MemberBrandAttention memberBrandAttention0 = mock(MemberBrandAttention.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: add
      CommonResult commonResult0 = memberAttentionController0.add(memberBrandAttention0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_add_1()  throws Throwable  {
      //caseID:5b095503d84dff0faaf09824c34b6596
      //CoveredLines: [24, 31, 32, 35]
      //Input_0_MemberBrandAttention: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      //mock memberBrandAttention0
      MemberBrandAttention memberBrandAttention0 = mock(MemberBrandAttention.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: add
      CommonResult commonResult0 = memberAttentionController0.add(memberBrandAttention0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_clear_2()  throws Throwable  {
      //caseID:63af0eb25a3d3f0b477a5c7c9fa8fd4e
      //CoveredLines: [24, 72, 73]
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      
      //Call method: clear
      CommonResult commonResult0 = memberAttentionController0.clear();
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:12d56f4dd58df9e861b54f08f5bf0f1a
      //CoveredLines: [24, 43, 44, 45]
      //Input_0_Long: 1
      //Assert: assertEquals(200L, method_result.getCode());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(memberAttentionService0).delete(anyLong());
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Long long0 = new Long(1);
      
      //Call method: delete
      CommonResult commonResult0 = memberAttentionController0.delete(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_4()  throws Throwable  {
      //caseID:304d0777b6feacd454216e561211c5db
      //CoveredLines: [24, 43, 44, 47]
      //Input_0_Long: (-9223372036854775808L)
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Long long0 = new Long((-9223372036854775808L));
      
      //Call method: delete
      CommonResult commonResult0 = memberAttentionController0.delete(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_detail_5()  throws Throwable  {
      //caseID:c70f9544080aef487ecfdfb9a023ec93
      //CoveredLines: [24, 64, 65]
      //Input_0_Long: 633L
      //Assert: assertEquals(200L, method_result.getCode());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Long long0 = new Long(633L);
      
      //Call method: detail
      CommonResult<MemberBrandAttention> commonResult0 = memberAttentionController0.detail(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_list_6()  throws Throwable  {
      //caseID:8ccd867cc005c4acbfb4f680eca778f5
      //CoveredLines: [24, 56, 57]
      //Input_0_Integer: 1
      //Input_1_Integer: 1
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock page0
      Page<MemberBrandAttention> page0 = (Page<MemberBrandAttention>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(page0).when(memberAttentionService0).list(anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Integer integer0 = new Integer(1);
      
      //Call method: list
      CommonResult<CommonPage<MemberBrandAttention>> commonResult0 = memberAttentionController0.list(integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
}
