/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.portal.controller.MemberAttentionController;
import com.macro.mall.portal.domain.MemberBrandAttention;
import com.macro.mall.portal.service.MemberAttentionService;
import java.util.LinkedList;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MemberAttentionController_SSTest extends MemberAttentionController_SSTest_scaffolding {
// allCoveredLines:[24, 31, 32, 33, 35, 43, 44, 45, 47, 56, 57, 64, 65, 72, 73]

  @Test(timeout = 4000)
  public void test_add_0()  throws Throwable  {
      //caseID:4f664f15b55face95108fd2334f84b00
      //CoveredLines: [24, 31, 32, 33]
      //Input_0_MemberBrandAttention: {}
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(memberAttentionService0).add(any(com.macro.mall.portal.domain.MemberBrandAttention.class));
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      //mock memberBrandAttention0
      MemberBrandAttention memberBrandAttention0 = mock(MemberBrandAttention.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: add
      CommonResult commonResult0 = memberAttentionController0.add(memberBrandAttention0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_add_1()  throws Throwable  {
      //caseID:b333f94abc57b44e81852cc357491eb1
      //CoveredLines: [24, 31, 32, 35]
      //Input_0_MemberBrandAttention: {}
      //Assert: assertEquals(500L, method_result.getCode());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      //mock memberBrandAttention0
      MemberBrandAttention memberBrandAttention0 = mock(MemberBrandAttention.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: add
      CommonResult commonResult0 = memberAttentionController0.add(memberBrandAttention0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_clear_2()  throws Throwable  {
      //caseID:04cb6877d1438c4711d469272c0a1503
      //CoveredLines: [24, 72, 73]
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      
      //Call method: clear
      CommonResult commonResult0 = memberAttentionController0.clear();
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:c6a7126a75a7831b0906e9ba7a30aa66
      //CoveredLines: [24, 43, 44, 45]
      //Input_0_Long: 47
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(47).when(memberAttentionService0).delete(anyLong());
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Long long0 = new Long(47);
      
      //Call method: delete
      CommonResult commonResult0 = memberAttentionController0.delete(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_4()  throws Throwable  {
      //caseID:5336caa41ecb4f932462e17ad702036e
      //CoveredLines: [24, 43, 44, 47]
      //Input_0_Long: 4189L
      //Assert: assertEquals(500L, method_result.getCode());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Long long0 = new Long(4189L);
      
      //Call method: delete
      CommonResult commonResult0 = memberAttentionController0.delete(long0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_detail_5()  throws Throwable  {
      //caseID:34ae75ee930a60135d3f90ed29a47f5b
      //CoveredLines: [24, 64, 65]
      //Input_0_Long: 1723L
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Long long0 = new Long(1723L);
      
      //Call method: detail
      CommonResult<MemberBrandAttention> commonResult0 = memberAttentionController0.detail(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_list_6()  throws Throwable  {
      //caseID:eb56108aca3bb60366505a18067ba1ba
      //CoveredLines: [24, 56, 57]
      //Input_0_Integer: 29
      //Input_1_Integer: 29
      //Assert: assertEquals(200L, method_result.getCode());
      
      MemberAttentionController memberAttentionController0 = new MemberAttentionController();
      LinkedList<MemberBrandAttention> linkedList0 = new LinkedList<MemberBrandAttention>();
      //mock page0
      Page<MemberBrandAttention> page0 = (Page<MemberBrandAttention>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(781L).when(page0).getTotalElements();
      doReturn(22).when(page0).getTotalPages();
      doReturn(linkedList0).when(page0).getContent();
      doReturn((-1530)).when(page0).getNumber();
      doReturn(0).when(page0).getSize();
      //mock memberAttentionService0
      MemberAttentionService memberAttentionService0 = mock(MemberAttentionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(page0).when(memberAttentionService0).list(anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) MemberAttentionController.class, memberAttentionController0, "memberAttentionService", (Object) memberAttentionService0);
      Integer integer0 = new Integer(29);
      
      //Call method: list
      CommonResult<CommonPage<MemberBrandAttention>> commonResult0 = memberAttentionController0.list(integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }
}
