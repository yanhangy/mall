/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.model.CmsSubject;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.portal.controller.HomeController;
import com.macro.mall.portal.domain.HomeContentResult;
import com.macro.mall.portal.service.HomeService;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HomeController_SSTest extends HomeController_SSTest_scaffolding {
// allCoveredLines:[24, 32, 33, 41, 42, 49, 50, 59, 60, 68, 69, 77, 78]

  @Test(timeout = 4000)
  public void test_content_0()  throws Throwable  {
      //caseID:8bf02ed0cbc210801f14c01295ab623a
      //CoveredLines: [24, 32, 33]
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      HomeController homeController0 = new HomeController();
      //mock homeService0
      HomeService homeService0 = mock(HomeService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) HomeController.class, homeController0, "homeService", (Object) homeService0);
      
      //Call method: content
      CommonResult<HomeContentResult> commonResult0 = homeController0.content();
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getProductCateList_1()  throws Throwable  {
      //caseID:484bdfea49da76648bde0b10c6809800
      //CoveredLines: [24, 49, 50]
      //Input_0_Long: 0L
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      HomeController homeController0 = new HomeController();
      //mock homeService0
      HomeService homeService0 = mock(HomeService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) HomeController.class, homeController0, "homeService", (Object) homeService0);
      Long long0 = new Long(0L);
      
      //Call method: getProductCateList
      CommonResult<List<PmsProductCategory>> commonResult0 = homeController0.getProductCateList(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getSubjectList_2()  throws Throwable  {
      //caseID:bc09dc673692f28894bb3e474f6b0ff9
      //CoveredLines: [24, 59, 60]
      //Input_0_Long: 0L
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      HomeController homeController0 = new HomeController();
      //mock homeService0
      HomeService homeService0 = mock(HomeService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) HomeController.class, homeController0, "homeService", (Object) homeService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      
      //Call method: getSubjectList
      CommonResult<List<CmsSubject>> commonResult0 = homeController0.getSubjectList(long0, integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_hotProductList_3()  throws Throwable  {
      //caseID:cf495dac6774d4b2c7c76207818eebc2
      //CoveredLines: [24, 68, 69]
      //Input_0_Integer: 2240
      //Input_1_Integer: 2240
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      HomeController homeController0 = new HomeController();
      //mock homeService0
      HomeService homeService0 = mock(HomeService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) HomeController.class, homeController0, "homeService", (Object) homeService0);
      Integer integer0 = new Integer(2240);
      
      //Call method: hotProductList
      CommonResult<List<PmsProduct>> commonResult0 = homeController0.hotProductList(integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_newProductList_4()  throws Throwable  {
      //caseID:53de6275400ea0b9d4dc580751ba1ca9
      //CoveredLines: [24, 77, 78]
      //Input_0_Integer: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertEquals(200L, method_result.getCode());
      
      HomeController homeController0 = new HomeController();
      //mock homeService0
      HomeService homeService0 = mock(HomeService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) HomeController.class, homeController0, "homeService", (Object) homeService0);
      Integer integer0 = new Integer((-1));
      
      //Call method: newProductList
      CommonResult<List<PmsProduct>> commonResult0 = homeController0.newProductList(integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_recommendProductList_5()  throws Throwable  {
      //caseID:e6a5048ed2e1710e334c1aa0530aadad
      //CoveredLines: [24, 41, 42]
      //Input_0_Integer: 1
      //Input_1_Integer: 1
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      HomeController homeController0 = new HomeController();
      //mock homeService0
      HomeService homeService0 = mock(HomeService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) HomeController.class, homeController0, "homeService", (Object) homeService0);
      Integer integer0 = new Integer(1);
      
      //Call method: recommendProductList
      CommonResult<List<PmsProduct>> commonResult0 = homeController0.recommendProductList(integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
}
