/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.CmsSubjectMapper;
import com.macro.mall.mapper.PmsProductCategoryMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.mapper.SmsFlashPromotionMapper;
import com.macro.mall.mapper.SmsFlashPromotionSessionMapper;
import com.macro.mall.mapper.SmsHomeAdvertiseMapper;
import com.macro.mall.model.CmsSubject;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.model.SmsFlashPromotion;
import com.macro.mall.model.SmsFlashPromotionSession;
import com.macro.mall.portal.dao.HomeDao;
import com.macro.mall.portal.domain.FlashPromotionProduct;
import com.macro.mall.portal.domain.HomeContentResult;
import com.macro.mall.portal.service.impl.HomeServiceImpl;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HomeServiceImpl_SSTest extends HomeServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 42, 44, 46, 48, 50, 52, 54, 55, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 93, 94, 99, 100, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 121, 122, 125, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 165, 166, 167, 168, 169, 170, 171, 172, 174]

  @Test(timeout = 4000)
  public void test_content_0()  throws Throwable  {
      //caseID:7f51abb6d9ee7729e16b5ad3004a6d50
      //CoveredLines: [24, 42, 44, 46, 48, 50, 52, 54, 55, 104, 106, 107, 108, 125, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 160]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: content
      HomeContentResult homeContentResult0 = homeServiceImpl0.content();
      
      //Test Result Assert
      assertNotNull(homeContentResult0);
  }

  @Test(timeout = 4000)
  public void test_getHomeFlashPromotion_1()  throws Throwable  {
      //caseID:3fa2227ca305823fe1acd3a1bbeca03a
      //CoveredLines: [24, 104, 106, 107, 108, 110, 111, 125, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 174]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      ArrayList<SmsFlashPromotion> arrayList0 = new ArrayList<SmsFlashPromotion>();
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(smsFlashPromotion0);
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsFlashPromotionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionExample.class));
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: getHomeFlashPromotion
      Object object0 = PrivateAccess.callMethod((Class<HomeServiceImpl>) HomeServiceImpl.class, homeServiceImpl0, "getHomeFlashPromotion");
      
      //Test Result Assert
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getHomeFlashPromotion_2()  throws Throwable  {
      //caseID:60f0d19ff0822a6a8083cad3c21da495
      //CoveredLines: [24, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 121, 122, 125, 130, 131, 132, 133, 134, 135, 138, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      ArrayList<SmsFlashPromotion> arrayList0 = new ArrayList<SmsFlashPromotion>();
      Long long0 = new Long(2666L);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsFlashPromotion0).getId();
      doReturn("start_time asc").when(smsFlashPromotion0).toString();
      
      arrayList0.add(smsFlashPromotion0);
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsFlashPromotionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionExample.class));
      ArrayList<SmsFlashPromotionSession> arrayList1 = new ArrayList<SmsFlashPromotionSession>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(date0).getTime();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsFlashPromotionSession0
      SmsFlashPromotionSession smsFlashPromotionSession0 = mock(SmsFlashPromotionSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(smsFlashPromotionSession0).getEndTime();
      doReturn(long0).when(smsFlashPromotionSession0).getId();
      doReturn(date0).when(smsFlashPromotionSession0).getStartTime();
      doReturn("start_time asc").when(smsFlashPromotionSession0).toString();
      
      arrayList1.add(smsFlashPromotionSession0);
      Vector<SmsFlashPromotionSession> vector0 = new Vector<SmsFlashPromotionSession>();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1, vector0).when(smsFlashPromotionSessionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionSessionExample.class));
      Vector<FlashPromotionProduct> vector1 = new Vector<FlashPromotionProduct>();
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(homeDao0).getFlashProductList(nullable(java.lang.Long.class) , nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: getHomeFlashPromotion
      Object object0 = PrivateAccess.callMethod((Class<HomeServiceImpl>) HomeServiceImpl.class, homeServiceImpl0, "getHomeFlashPromotion");
      
      //Test Result Assert
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getHomeFlashPromotion_3()  throws Throwable  {
      //caseID:a3d42021ddefa4810c65fb48702ef4d4
      //CoveredLines: [24, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 121, 122, 125, 130, 131, 132, 133, 134, 135, 136, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      ArrayList<SmsFlashPromotion> arrayList0 = new ArrayList<SmsFlashPromotion>();
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("start_time asc").when(smsFlashPromotion0).toString();
      
      arrayList0.add(smsFlashPromotion0);
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsFlashPromotionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionExample.class));
      ArrayList<SmsFlashPromotionSession> arrayList1 = new ArrayList<SmsFlashPromotionSession>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsFlashPromotionSession0
      SmsFlashPromotionSession smsFlashPromotionSession0 = mock(SmsFlashPromotionSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(smsFlashPromotionSession0).getEndTime();
      doReturn(date0).when(smsFlashPromotionSession0).getStartTime();
      doReturn("4").when(smsFlashPromotionSession0).toString();
      
      arrayList1.add(smsFlashPromotionSession0);
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(smsFlashPromotionSessionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionSessionExample.class));
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: getHomeFlashPromotion
      Object object0 = PrivateAccess.callMethod((Class<HomeServiceImpl>) HomeServiceImpl.class, homeServiceImpl0, "getHomeFlashPromotion");
      
      //Test Result Assert
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getProductCateList_4()  throws Throwable  {
      //caseID:3cb9b1e9c3b7f6c6c7e9067976212759
      //CoveredLines: [24, 71, 72, 73, 74, 75, 76]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getProductCateList
      List<PmsProductCategory> list0 = homeServiceImpl0.getProductCateList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_getSubjectList_5()  throws Throwable  {
      //caseID:d9b624476fbe2ead25337b4bcbc39049
      //CoveredLines: [24, 81, 82, 83, 84, 85, 88]
      //Input_0_Long: null
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Assert: assertEquals(0, method_result.size());
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      LinkedList<CmsSubject> linkedList0 = new LinkedList<CmsSubject>();
      //mock cmsSubjectMapper0
      CmsSubjectMapper cmsSubjectMapper0 = mock(CmsSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(cmsSubjectMapper0).selectByExample(any(com.macro.mall.model.CmsSubjectExample.class));
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "subjectMapper", (Object) cmsSubjectMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: getSubjectList
      List<CmsSubject> list0 = homeServiceImpl0.getSubjectList((Long) null, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getSubjectList_6()  throws Throwable  {
      //caseID:cb3557bb01714b9ece39670399a8d94c
      //CoveredLines: [24, 81, 82, 83, 84, 85, 86, 88]
      //Input_0_Long: (-1L)
      //Input_1_Integer: 6
      //Input_2_Integer: 6
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock cmsSubjectMapper0
      CmsSubjectMapper cmsSubjectMapper0 = mock(CmsSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "subjectMapper", (Object) cmsSubjectMapper0);
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer(6);
      
      //Call method: getSubjectList
      List<CmsSubject> list0 = homeServiceImpl0.getSubjectList(long0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_hotProductList_7()  throws Throwable  {
      //caseID:7d9f86341429c82c7f77a7e8937b6b41
      //CoveredLines: [24, 93, 94]
      //Input_0_Integer: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      Integer integer0 = new Integer((-1));
      
      //Call method: hotProductList
      List<PmsProduct> list0 = homeServiceImpl0.hotProductList(integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_newProductList_8()  throws Throwable  {
      //caseID:6fc235cee4fb9a8e058f26abe2d1a8ce
      //CoveredLines: [24, 99, 100]
      //Input_0_Integer: 2
      //Input_1_Integer: 2
      //Assert: assertEquals(0, method_result.size());
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      LinkedList<PmsProduct> linkedList0 = new LinkedList<PmsProduct>();
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(homeDao0).getNewProductList(anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      Integer integer0 = new Integer(2);
      
      //Call method: newProductList
      List<PmsProduct> list0 = homeServiceImpl0.newProductList(integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_recommendProductList_9()  throws Throwable  {
      //caseID:822086908f790dbd70b0f6ddcc8c6a93
      //CoveredLines: [24, 61, 62, 63, 64, 65, 66]
      //Input_0_Integer: 1718
      //Input_1_Integer: 1718
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Integer integer0 = new Integer(1718);
      
      //Call method: recommendProductList
      List<PmsProduct> list0 = homeServiceImpl0.recommendProductList(integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }
}
