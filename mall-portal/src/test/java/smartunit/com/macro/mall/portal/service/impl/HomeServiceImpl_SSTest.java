/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.CmsSubjectMapper;
import com.macro.mall.mapper.PmsProductCategoryMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.mapper.SmsFlashPromotionMapper;
import com.macro.mall.mapper.SmsFlashPromotionSessionMapper;
import com.macro.mall.mapper.SmsHomeAdvertiseMapper;
import com.macro.mall.model.CmsSubject;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.model.SmsFlashPromotion;
import com.macro.mall.model.SmsFlashPromotionSession;
import com.macro.mall.model.SmsHomeAdvertise;
import com.macro.mall.portal.dao.HomeDao;
import com.macro.mall.portal.domain.FlashPromotionProduct;
import com.macro.mall.portal.domain.HomeContentResult;
import com.macro.mall.portal.service.impl.HomeServiceImpl;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HomeServiceImpl_SSTest extends HomeServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 42, 44, 46, 48, 50, 52, 54, 55, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 93, 94, 99, 100, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 121, 122, 125, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 165, 166, 167, 168, 169, 170, 171, 172, 174]

  @Test(timeout = 4000)
  public void test_content_0()  throws Throwable  {
      //caseID:df4bed98671db2a528daed383d54e65b
      //CoveredLines: [24, 42, 44, 46, 48, 50, 52, 54, 55, 104, 106, 107, 108, 125, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 160]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: content
      HomeContentResult homeContentResult0 = homeServiceImpl0.content();
      
      //Test Result Assert
      assertNotNull(homeContentResult0);
  }

  @Test(timeout = 4000)
  public void test_content_1()  throws Throwable  {
      //caseID:9fcc2cc3aecdc737a54e39b728559b48
      //CoveredLines: [24, 42, 44, 46, 48, 50, 52, 54, 55, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 121, 122, 125, 130, 131, 132, 133, 134, 135, 136, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      LinkedList<SmsFlashPromotion> linkedList0 = new LinkedList<SmsFlashPromotion>();
      Long long0 = new Long(704L);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsFlashPromotion0).getId();
      doReturn("Access-Control-Request-Method").when(smsFlashPromotion0).toString();
      
      linkedList0.add(smsFlashPromotion0);
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsFlashPromotionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionExample.class));
      ArrayList<SmsFlashPromotionSession> arrayList0 = new ArrayList<SmsFlashPromotionSession>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3188L).when(date0).getTime();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date2
      Date date2 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsFlashPromotionSession0
      SmsFlashPromotionSession smsFlashPromotionSession0 = mock(SmsFlashPromotionSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1, date0).when(smsFlashPromotionSession0).getEndTime();
      doReturn(long0).when(smsFlashPromotionSession0).getId();
      doReturn(date0, date2).when(smsFlashPromotionSession0).getStartTime();
      doReturn("0", "4").when(smsFlashPromotionSession0).toString();
      
      arrayList0.add(smsFlashPromotionSession0);
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0, arrayList0).when(smsFlashPromotionSessionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionSessionExample.class));
      Stack<SmsHomeAdvertise> stack0 = new Stack<SmsHomeAdvertise>();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsHomeAdvertiseMapper0).selectByExample(any(com.macro.mall.model.SmsHomeAdvertiseExample.class));
      LinkedList<CmsSubject> linkedList1 = new LinkedList<CmsSubject>();
      Vector<PmsBrand> vector0 = new Vector<PmsBrand>();
      Vector<PmsProduct> vector1 = new Vector<PmsProduct>();
      LinkedList<PmsProduct> linkedList2 = new LinkedList<PmsProduct>();
      Vector<FlashPromotionProduct> vector2 = new Vector<FlashPromotionProduct>();
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector2).when(homeDao0).getFlashProductList(nullable(java.lang.Long.class) , nullable(java.lang.Long.class));
      doReturn(linkedList2).when(homeDao0).getHotProductList(anyInt() , anyInt());
      doReturn(vector1).when(homeDao0).getNewProductList(anyInt() , anyInt());
      doReturn(vector0).when(homeDao0).getRecommendBrandList(anyInt() , anyInt());
      doReturn(linkedList1).when(homeDao0).getRecommendSubjectList(anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: content
      HomeContentResult homeContentResult0 = homeServiceImpl0.content();
      
      //Test Result Assert
      assertNotNull(homeContentResult0);
  }

  @Test(timeout = 4000)
  public void test_getHomeFlashPromotion_2()  throws Throwable  {
      //caseID:6a4deaa059b520c326ebc055a50a8aad
      //CoveredLines: [24, 104, 106, 107, 108, 110, 111, 125, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 174]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      LinkedList<SmsFlashPromotion> linkedList0 = new LinkedList<SmsFlashPromotion>();
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(smsFlashPromotion0);
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsFlashPromotionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionExample.class));
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: getHomeFlashPromotion
      Object object0 = PrivateAccess.callMethod((Class<HomeServiceImpl>) HomeServiceImpl.class, homeServiceImpl0, "getHomeFlashPromotion");
      
      //Test Result Assert
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getHomeFlashPromotion_3()  throws Throwable  {
      //caseID:a14c6390e1ede24f8a525e3e814dc149
      //CoveredLines: [24, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 121, 122, 125, 130, 131, 132, 133, 134, 135, 138, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172]
      //Assert: assertNotNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      ArrayList<SmsFlashPromotion> arrayList0 = new ArrayList<SmsFlashPromotion>();
      Long long0 = new Long(1738L);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsFlashPromotion0).getId();
      doReturn("1").when(smsFlashPromotion0).toString();
      
      arrayList0.add(smsFlashPromotion0);
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsFlashPromotionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionExample.class));
      Vector<SmsFlashPromotionSession> vector0 = new Vector<SmsFlashPromotionSession>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(date0).getTime();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date2
      Date date2 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsFlashPromotionSession0
      SmsFlashPromotionSession smsFlashPromotionSession0 = mock(SmsFlashPromotionSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1, date0).when(smsFlashPromotionSession0).getEndTime();
      doReturn(long0).when(smsFlashPromotionSession0).getId();
      doReturn(date0, date2).when(smsFlashPromotionSession0).getStartTime();
      doReturn("1", "P6").when(smsFlashPromotionSession0).toString();
      
      vector0.add(smsFlashPromotionSession0);
      Stack<SmsFlashPromotionSession> stack0 = new Stack<SmsFlashPromotionSession>();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0, stack0).when(smsFlashPromotionSessionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionSessionExample.class));
      Stack<FlashPromotionProduct> stack1 = new Stack<FlashPromotionProduct>();
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack1).when(homeDao0).getFlashProductList(nullable(java.lang.Long.class) , nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      
      //Call method: getHomeFlashPromotion
      Object object0 = PrivateAccess.callMethod((Class<HomeServiceImpl>) HomeServiceImpl.class, homeServiceImpl0, "getHomeFlashPromotion");
      
      //Test Result Assert
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getProductCateList_4()  throws Throwable  {
      //caseID:90a3ee52ee4b70000ead4142429935e7
      //CoveredLines: [24, 71, 72, 73, 74, 75, 76]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getProductCateList
      List<PmsProductCategory> list0 = homeServiceImpl0.getProductCateList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_getSubjectList_5()  throws Throwable  {
      //caseID:4aae6cf60faef20e61c8fc4a637a82f6
      //CoveredLines: [24, 81, 82, 83, 84, 85, 88]
      //Input_0_Long: null
      //Input_1_Integer: (-768)
      //Input_2_Integer: (-768)
      //Assert: assertEquals(0, method_result.size());
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      ArrayList<CmsSubject> arrayList0 = new ArrayList<CmsSubject>();
      //mock cmsSubjectMapper0
      CmsSubjectMapper cmsSubjectMapper0 = mock(CmsSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(cmsSubjectMapper0).selectByExample(any(com.macro.mall.model.CmsSubjectExample.class));
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "subjectMapper", (Object) cmsSubjectMapper0);
      Integer integer0 = new Integer((-768));
      
      //Call method: getSubjectList
      List<CmsSubject> list0 = homeServiceImpl0.getSubjectList((Long) null, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getSubjectList_6()  throws Throwable  {
      //caseID:46fe9c37a9ccef74390ffd91c00c1631
      //CoveredLines: [24, 81, 82, 83, 84, 85, 86, 88]
      //Input_0_Long: 732L
      //Input_1_Integer: (-768)
      //Input_2_Integer: (-768)
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock cmsSubjectMapper0
      CmsSubjectMapper cmsSubjectMapper0 = mock(CmsSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "subjectMapper", (Object) cmsSubjectMapper0);
      Long long0 = new Long(732L);
      Integer integer0 = new Integer((-768));
      
      //Call method: getSubjectList
      List<CmsSubject> list0 = homeServiceImpl0.getSubjectList(long0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_hotProductList_7()  throws Throwable  {
      //caseID:e22ea8e66d6d4e14f40ac5998282abe8
      //CoveredLines: [24, 93, 94]
      //Input_0_Integer: 1291
      //Input_1_Integer: 1291
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      Integer integer0 = new Integer(1291);
      
      //Call method: hotProductList
      List<PmsProduct> list0 = homeServiceImpl0.hotProductList(integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_newProductList_8()  throws Throwable  {
      //caseID:cb6ce4f9e85b04dbf1ccc72dbcc98a85
      //CoveredLines: [24, 99, 100]
      //Input_0_Integer: 0
      //Input_1_Integer: 0
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock homeDao0
      HomeDao homeDao0 = mock(HomeDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "homeDao", (Object) homeDao0);
      Integer integer0 = new Integer(0);
      
      //Call method: newProductList
      List<PmsProduct> list0 = homeServiceImpl0.newProductList(integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_recommendProductList_9()  throws Throwable  {
      //caseID:472beee6c81a4ff35a27ab1816c1c552
      //CoveredLines: [24, 61, 62, 63, 64, 65, 66]
      //Input_0_Integer: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertNull(method_result);
      
      HomeServiceImpl homeServiceImpl0 = new HomeServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) HomeServiceImpl.class, homeServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: recommendProductList
      List<PmsProduct> list0 = homeServiceImpl0.recommendProductList(integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }
}
