/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.UmsMemberReceiveAddressMapper;
import com.macro.mall.model.UmsMember;
import com.macro.mall.model.UmsMemberReceiveAddress;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.UmsMemberReceiveAddressServiceImpl;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsMemberReceiveAddressServiceImpl_SSTest extends UmsMemberReceiveAddressServiceImpl_SSTest_scaffolding {
// allCoveredLines:[20, 27, 28, 29, 34, 35, 36, 37, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 61, 62, 63, 64, 69, 70, 71, 72, 73, 74, 76]

  @Test(timeout = 4000)
  public void test_add_0()  throws Throwable  {
      //caseID:f583aad10d3622af541443521d047741
      //CoveredLines: [20, 27, 28, 29]
      //Input_0_UmsMemberReceiveAddress: {}
      //Assert: assertEquals(0, method_result);
      
      UmsMemberReceiveAddressServiceImpl umsMemberReceiveAddressServiceImpl0 = new UmsMemberReceiveAddressServiceImpl();
      //mock umsMemberReceiveAddressMapper0
      UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper0 = mock(UmsMemberReceiveAddressMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "addressMapper", (Object) umsMemberReceiveAddressMapper0);
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: add
      int int0 = umsMemberReceiveAddressServiceImpl0.add(umsMemberReceiveAddress0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:3f204eeb2e99616c2c96b08e9858df5c
      //CoveredLines: [20, 34, 35, 36, 37]
      //Input_0_Long: 26
      //Assert: assertEquals(26, method_result);
      
      UmsMemberReceiveAddressServiceImpl umsMemberReceiveAddressServiceImpl0 = new UmsMemberReceiveAddressServiceImpl();
      //mock umsMemberReceiveAddressMapper0
      UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper0 = mock(UmsMemberReceiveAddressMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(26).when(umsMemberReceiveAddressMapper0).deleteByExample(any(com.macro.mall.model.UmsMemberReceiveAddressExample.class));
      Long long0 = new Long(26);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "addressMapper", (Object) umsMemberReceiveAddressMapper0);
      
      //Call method: delete
      int int0 = umsMemberReceiveAddressServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:6cfd960f3750babddcc22c5ca2ff99d1
      //CoveredLines: [20, 69, 70, 71, 72, 73, 74]
      //Input_0_Long: 9223372036854775807L
      //Assert: assertNull(method_result.getName());
      
      UmsMemberReceiveAddressServiceImpl umsMemberReceiveAddressServiceImpl0 = new UmsMemberReceiveAddressServiceImpl();
      Vector<UmsMemberReceiveAddress> vector0 = new Vector<UmsMemberReceiveAddress>();
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-9").when(umsMemberReceiveAddress0).toString();
      
      vector0.add(umsMemberReceiveAddress0);
      //mock umsMemberReceiveAddressMapper0
      UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper0 = mock(UmsMemberReceiveAddressMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsMemberReceiveAddressMapper0).selectByExample(any(com.macro.mall.model.UmsMemberReceiveAddressExample.class));
      Long long0 = new Long(9223372036854775807L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "addressMapper", (Object) umsMemberReceiveAddressMapper0);
      
      //Call method: getItem
      UmsMemberReceiveAddress umsMemberReceiveAddress1 = umsMemberReceiveAddressServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsMemberReceiveAddress1.getName());
  }

  @Test(timeout = 4000)
  public void test_getItem_3()  throws Throwable  {
      //caseID:d1ab7e423d5e8793ea63f7c3a44b52d5
      //CoveredLines: [20, 69, 70, 71, 72, 73, 76]
      //Input_0_Long: 231L
      //Assert: assertNull(method_result);
      
      UmsMemberReceiveAddressServiceImpl umsMemberReceiveAddressServiceImpl0 = new UmsMemberReceiveAddressServiceImpl();
      Stack<UmsMemberReceiveAddress> stack0 = new Stack<UmsMemberReceiveAddress>();
      //mock umsMemberReceiveAddressMapper0
      UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper0 = mock(UmsMemberReceiveAddressMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsMemberReceiveAddressMapper0).selectByExample(any(com.macro.mall.model.UmsMemberReceiveAddressExample.class));
      Long long0 = new Long(231L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "addressMapper", (Object) umsMemberReceiveAddressMapper0);
      
      //Call method: getItem
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = umsMemberReceiveAddressServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsMemberReceiveAddress0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:ef46443edf1a28bec023d9f76946b288
      //CoveredLines: [20, 61, 62, 63, 64]
      //Assert: assertNull(method_result);
      
      UmsMemberReceiveAddressServiceImpl umsMemberReceiveAddressServiceImpl0 = new UmsMemberReceiveAddressServiceImpl();
      //mock umsMemberReceiveAddressMapper0
      UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper0 = mock(UmsMemberReceiveAddressMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(541L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "addressMapper", (Object) umsMemberReceiveAddressMapper0);
      
      //Call method: list
      List<UmsMemberReceiveAddress> list0 = umsMemberReceiveAddressServiceImpl0.list();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:d84887d43aa63edbab2840123ddb2d38
      //CoveredLines: [20, 42, 43, 44, 45, 46, 56]
      //Input_0_Long: (-2108L)
      //Input_1_UmsMemberReceiveAddress: {getDefaultStatus=0}
      //Assert: assertEquals((-1), method_result);
      
      UmsMemberReceiveAddressServiceImpl umsMemberReceiveAddressServiceImpl0 = new UmsMemberReceiveAddressServiceImpl();
      //mock umsMemberReceiveAddressMapper0
      UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper0 = mock(UmsMemberReceiveAddressMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(umsMemberReceiveAddressMapper0).updateByExampleSelective(any(com.macro.mall.model.UmsMemberReceiveAddress.class) , any(com.macro.mall.model.UmsMemberReceiveAddressExample.class));
      Long long0 = new Long((-2108L));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "addressMapper", (Object) umsMemberReceiveAddressMapper0);
      Integer integer0 = new Integer(0);
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMemberReceiveAddress0).getDefaultStatus();
      
      //Call method: update
      int int0 = umsMemberReceiveAddressServiceImpl0.update(long0, umsMemberReceiveAddress0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_update_6()  throws Throwable  {
      //caseID:1be7634d78b050be706b700764880ab0
      //CoveredLines: [20, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56]
      //Input_0_Long: 3329L
      //Input_1_UmsMemberReceiveAddress: {getDefaultStatus=1}
      //Assert: assertEquals(0, method_result);
      
      UmsMemberReceiveAddressServiceImpl umsMemberReceiveAddressServiceImpl0 = new UmsMemberReceiveAddressServiceImpl();
      //mock umsMemberReceiveAddressMapper0
      UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper0 = mock(UmsMemberReceiveAddressMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(3329L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberReceiveAddressServiceImpl.class, umsMemberReceiveAddressServiceImpl0, "addressMapper", (Object) umsMemberReceiveAddressMapper0);
      Integer integer0 = new Integer(1);
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMemberReceiveAddress0).getDefaultStatus();
      
      //Call method: update
      int int0 = umsMemberReceiveAddressServiceImpl0.update(long0, umsMemberReceiveAddress0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
