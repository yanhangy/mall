/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.portal.controller.PortalBrandController;
import com.macro.mall.portal.service.PortalBrandService;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PortalBrandController_SSTest extends PortalBrandController_SSTest_scaffolding {
// allCoveredLines:[23, 33, 34, 41, 42, 51, 52]

  @Test(timeout = 4000)
  public void test_detail_0()  throws Throwable  {
      //caseID:8dfdf5e6b5e1aaf63bb31333680e2fb4
      //CoveredLines: [23, 41, 42]
      //Input_0_Long: 673L
      //Assert: assertEquals(200L, method_result.getCode());
      
      PortalBrandController portalBrandController0 = new PortalBrandController();
      //mock portalBrandService0
      PortalBrandService portalBrandService0 = mock(PortalBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PortalBrandController.class, portalBrandController0, "homeBrandService", (Object) portalBrandService0);
      Long long0 = new Long(673L);
      
      //Call method: detail
      CommonResult<PmsBrand> commonResult0 = portalBrandController0.detail(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_productList_1()  throws Throwable  {
      //caseID:374f12fa8fee2ce130e384e93daf14bf
      //CoveredLines: [23, 51, 52]
      //Input_0_Long: 1L
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PortalBrandController portalBrandController0 = new PortalBrandController();
      //mock portalBrandService0
      PortalBrandService portalBrandService0 = mock(PortalBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PortalBrandController.class, portalBrandController0, "homeBrandService", (Object) portalBrandService0);
      Long long0 = new Long(1L);
      Integer integer0 = new Integer((-1));
      
      //Call method: productList
      CommonResult<CommonPage<PmsProduct>> commonResult0 = portalBrandController0.productList(long0, integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_recommendList_2()  throws Throwable  {
      //caseID:89be405bdb5da661a98590c57b4909d1
      //CoveredLines: [23, 33, 34]
      //Input_0_Integer: 0
      //Input_1_Integer: 0
      //Assert: assertEquals(200L, method_result.getCode());
      
      PortalBrandController portalBrandController0 = new PortalBrandController();
      //mock portalBrandService0
      PortalBrandService portalBrandService0 = mock(PortalBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PortalBrandController.class, portalBrandController0, "homeBrandService", (Object) portalBrandService0);
      Integer integer0 = new Integer(0);
      
      //Call method: recommendList
      CommonResult<List<PmsBrand>> commonResult0 = portalBrandController0.recommendList(integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }
}
