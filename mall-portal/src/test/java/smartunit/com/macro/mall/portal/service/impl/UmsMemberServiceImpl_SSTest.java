/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.mapper.UmsMemberLevelMapper;
import com.macro.mall.mapper.UmsMemberMapper;
import com.macro.mall.model.UmsMember;
import com.macro.mall.model.UmsMemberLevel;
import com.macro.mall.portal.service.UmsMemberCacheService;
import com.macro.mall.portal.service.impl.UmsMemberServiceImpl;
import com.macro.mall.security.util.JwtTokenUtil;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsMemberServiceImpl_SSTest extends UmsMemberServiceImpl_SSTest_scaffolding {
// allCoveredLines:[40, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 74, 80, 81, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 111, 112, 113, 114, 116, 117, 122, 123, 124, 125, 126, 129, 130, 132, 133, 134, 135, 136, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 157, 158, 159, 161, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 184, 189, 190, 192, 193]

  @Test(timeout = 4000)
  public void test_generateAuthCode_00()  throws Throwable  {
      //caseID:c96cc46f28c9a167307a4a3ef425dcf7
      //CoveredLines: [40, 111, 112, 113, 114, 116, 117]
      //Input_0_String: 1
      //Assert: assertEquals("000000", method_result);
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      //Call method: generateAuthCode
      String string0 = umsMemberServiceImpl0.generateAuthCode("1");
      
      //Test Result Assert
      assertEquals("000000", string0);
  }

  @Test(timeout = 4000)
  public void test_getById_01()  throws Throwable  {
      //caseID:e588ab0ed640611a8aa0d8679120e5dc
      //CoveredLines: [40, 74]
      //Input_0_Long: 1494L
      //Assert: assertNull(method_result);
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1494L);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      //Call method: getById
      UmsMember umsMember0 = umsMemberServiceImpl0.getById(long0);
      
      //Test Result Assert
      assertNull(umsMember0);
  }

  @Test(timeout = 4000)
  public void test_getCurrentMember_02()  throws Throwable  {
      //caseID:52a614eb9680efde3288e00702984a9d
    try {
      //CoveredLines: [40, 140, 141, 142, 143]
      //Assert: assertNull(method_result.getGrowth());
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      
      //Call method: getCurrentMember
      UmsMember umsMember0 = umsMemberServiceImpl0.getCurrentMember();
      
      //Test Result Assert
      assertNull(umsMember0.getGrowth());
    } catch (java.lang.Exception checkException) {
            // Need to catch junit check exceptions
   assertEquals("java.lang.NullPointerException", checkException.getClass().getName());

    }
  }

  @Test(timeout = 4000)
  public void test_loadUserByUsername_03()  throws Throwable  {
      //caseID:1a982a9aecfb656883ab0ec051b80d4d
      //CoveredLines: [40, 59, 60, 61, 62, 63, 64, 65, 66, 67, 157, 158, 159]
      //Input_0_String: \u0002rV[:.6iwz_0&.vCp2
      //Assert: assertNull(method_result.getUsername());
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      Stack<UmsMember> stack0 = new Stack<UmsMember>();
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(umsMember0);
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsMemberMapper0).selectByExample(any(com.macro.mall.model.UmsMemberExample.class));
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsMember) null).when(umsMemberCacheService0).getMember(anyString());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      //Call method: loadUserByUsername
      UserDetails userDetails0 = umsMemberServiceImpl0.loadUserByUsername("\u0002rV[:.6iwz_0&.vCp2");
      
      //Test Result Assert
      assertNull(userDetails0.getUsername());
  }

  @Test(timeout = 4000)
  public void test_login_04()  throws Throwable  {
      //caseID:e270dbf6b6de80d9989f8eb58625f935
      //CoveredLines: [40, 59, 60, 157, 158, 159, 166, 169, 170, 171, 176, 177, 179]
      //Input_0_String: b+0hbg>ra|9h8|\"b
      //Input_1_String: 
      //Assert: assertNull(method_result);
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberCacheService0).getMember(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      //Call method: login
      String string0 = umsMemberServiceImpl0.login("b+0hbg>ra|9h8|\"b", "");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_login_05()  throws Throwable  {
      //caseID:0f51900b09623a027ec84994e99c55d8
      //CoveredLines: [40, 59, 60, 157, 158, 159, 166, 169, 170, 173, 174, 175, 178, 179]
      //Input_0_String: b+0hbg>ra|9h8|\"b
      //Input_1_String: 
      //Assert: assertNull(method_result);
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.portal.service.impl.UmsMemberServiceImpl").when(umsMember0).getPassword();
      doReturn("com.macro.mall.portal.service.impl.UmsMemberServiceImpl").when(umsMember0).toString();
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberCacheService0).getMember(anyString());
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      //Call method: login
      String string0 = umsMemberServiceImpl0.login("b+0hbg>ra|9h8|\"b", "");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_login_06()  throws Throwable  {
      //caseID:a2f64d86e062ca4b5bc93866a67b3aa6
      //CoveredLines: [40, 59, 60, 61, 62, 63, 64, 69, 157, 158, 161, 166, 169, 176, 177, 179]
      //Input_0_String: b+0hbg>ra|9h8|\"b
      //Input_1_String: 
      //Assert: assertNull(method_result);
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      //Call method: login
      String string0 = umsMemberServiceImpl0.login("b+0hbg>ra|9h8|\"b", "");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_refreshToken_07()  throws Throwable  {
      //caseID:5ea631cdaef7dc114313fd588ad536aa
      //CoveredLines: [40, 184]
      //Input_0_String: io.lettuce.core.dynamic.ReactiveTypeAdapters$PublisherToRxJava2FlowableAdapter
      //Assert: assertNull(method_result);
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      //Call method: refreshToken
      String string0 = umsMemberServiceImpl0.refreshToken("io.lettuce.core.dynamic.ReactiveTypeAdapters$PublisherToRxJava2FlowableAdapter");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_register_08()  throws Throwable  {
      //caseID:ade3e116f01877bac5147f4edc546992
      //CoveredLines: [40, 80, 81, 189, 190]
      //Input_0_String: h9l12s#0Z<NFC>XH_K@W
      //Input_1_String: h9l12s#0Z<NFC>XH_K@W
      //Input_2_String: h9l12s#0Z<NFC>XH_K@W
      //Input_3_String: 
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      
      //Call method: register
      // Undeclared exception!
      try { 
        umsMemberServiceImpl0.register("h9l12s#0Z<NFC>XH_K@W", "h9l12s#0Z<NFC>XH_K@W", "h9l12s#0Z<NFC>XH_K@W", "");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u9A8C\u8BC1\u7801\u9519\u8BEF", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_register_09()  throws Throwable  {
      //caseID:d72dfba6c83a05a4139788256de9a058
      //CoveredLines: [40, 80, 81, 189, 192, 193]
      //Input_0_String: h9l12s#0Z<NFC>XH_K@W
      //Input_1_String: h9l12s#0Z<NFC>XH_K@W
      //Input_2_String: h9l12s#0Z<NFC>XH_K@W
      //Input_3_String: The bufferSupplier returned a null initial buffer
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      //Call method: register
      // Undeclared exception!
      try { 
        umsMemberServiceImpl0.register("h9l12s#0Z<NFC>XH_K@W", "h9l12s#0Z<NFC>XH_K@W", "h9l12s#0Z<NFC>XH_K@W", "The bufferSupplier returned a null initial buffer");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u9A8C\u8BC1\u7801\u9519\u8BEF", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_register_10()  throws Throwable  {
      //caseID:d3eb86e30c3ec3ca11753d285722854c
      //CoveredLines: [40, 80, 84, 85, 86, 87, 88, 89, 189, 192, 193]
      //Input_0_String: Mismatching names (
      //Input_1_String: Mismatching names (
      //Input_2_String: Mismatching names (
      //Input_3_String: \u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      LinkedList<UmsMember> linkedList0 = new LinkedList<UmsMember>();
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(umsMember0);
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsMemberMapper0).selectByExample(any(com.macro.mall.model.UmsMemberExample.class));
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728").when(umsMemberCacheService0).getAuthCode(anyString());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      //Call method: register
      // Undeclared exception!
      try { 
        umsMemberServiceImpl0.register("Mismatching names (", "Mismatching names (", "Mismatching names (", "\u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_register_11()  throws Throwable  {
      //caseID:19a037d06ee972b15f58c626ec15bc5d
      //CoveredLines: [40, 80, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 189, 192, 193]
      //Input_0_String: Qe #5)
      //Input_1_String: Qe #5)
      //Input_2_String: Qe #5)
      //Input_3_String: \u5BC6\u7801\u4E0D\u6B63\u786E
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMemberLevelMapper0
      UmsMemberLevelMapper umsMemberLevelMapper0 = mock(UmsMemberLevelMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u5BC6\u7801\u4E0D\u6B63\u786E").when(umsMemberCacheService0).getAuthCode(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberLevelMapper", (Object) umsMemberLevelMapper0);
      
      //Call method: register
      umsMemberServiceImpl0.register("Qe #5)", "Qe #5)", "Qe #5)", "\u5BC6\u7801\u4E0D\u6B63\u786E");
  }

  @Test(timeout = 4000)
  public void test_register_12()  throws Throwable  {
      //caseID:e14f5881cc813ff1e19858c6718552dc
      //CoveredLines: [40, 80, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 189, 192, 193]
      //Input_0_String: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport
      //Input_1_String: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport
      //Input_2_String: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport
      //Input_3_String: \u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      Vector<UmsMemberLevel> vector0 = new Vector<UmsMemberLevel>();
      //mock umsMemberLevel0
      UmsMemberLevel umsMemberLevel0 = mock(UmsMemberLevel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(umsMemberLevel0);
      //mock umsMemberLevelMapper0
      UmsMemberLevelMapper umsMemberLevelMapper0 = mock(UmsMemberLevelMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsMemberLevelMapper0).selectByExample(any(com.macro.mall.model.UmsMemberLevelExample.class));
      ArrayList<UmsMember> arrayList0 = new ArrayList<UmsMember>();
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(6).when(umsMemberMapper0).insert(any(com.macro.mall.model.UmsMember.class));
      doReturn(arrayList0).when(umsMemberMapper0).selectByExample(any(com.macro.mall.model.UmsMemberExample.class));
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728").when(umsMemberCacheService0).getAuthCode(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728").when(passwordEncoder0).encode(any(java.lang.CharSequence.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberLevelMapper", (Object) umsMemberLevelMapper0);
      
      //Call method: register
      umsMemberServiceImpl0.register("org.springframework.scheduling.concurrent.ExecutorConfigurationSupport", "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport", "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport", "\u8BE5\u7528\u6237\u5DF2\u7ECF\u5B58\u5728");
  }

  @Test(timeout = 4000)
  public void test_updateIntegration_13()  throws Throwable  {
      //caseID:0a0c5b390474370a1b12825d0958f4b8
      //CoveredLines: [40, 148, 149, 150, 151, 152, 153]
      //Input_0_Long: 1966L
      //Input_1_Integer: 0
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1966L);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: updateIntegration
      umsMemberServiceImpl0.updateIntegration(long0, integer0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_14()  throws Throwable  {
      //caseID:142295d9dacf70ea4773404787bad6b8
      //CoveredLines: [40, 122, 123, 124, 125, 126]
      //Input_0_String: 
      //Input_1_String: 0
      //Input_2_String: h$h-tww!
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      //Call method: updatePassword
      // Undeclared exception!
      try { 
        umsMemberServiceImpl0.updatePassword("", "0", "h$h-tww!");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u8D26\u53F7\u4E0D\u5B58\u5728", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_updatePassword_15()  throws Throwable  {
      //caseID:5c281ae6338a4d8c43498b75a4604b97
      //CoveredLines: [40, 122, 123, 124, 125, 129, 130, 189, 192, 193]
      //Input_0_String: 3
      //Input_1_String: 0
      //Input_2_String: h$h-tww!
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      ArrayList<UmsMember> arrayList0 = new ArrayList<UmsMember>();
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(umsMember0);
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsMemberMapper0).selectByExample(any(com.macro.mall.model.UmsMemberExample.class));
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      //Call method: updatePassword
      // Undeclared exception!
      try { 
        umsMemberServiceImpl0.updatePassword("3", "0", "h$h-tww!");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u9A8C\u8BC1\u7801\u9519\u8BEF", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_updatePassword_16()  throws Throwable  {
      //caseID:443584f6af9fb261446754241de3c9d9
      //CoveredLines: [40, 122, 123, 124, 125, 129, 132, 133, 134, 135, 136, 189, 192, 193]
      //Input_0_String: 
      //Input_1_String: 0
      //Input_2_String: h$h-tww!
      
      UmsMemberServiceImpl umsMemberServiceImpl0 = new UmsMemberServiceImpl();
      ArrayList<UmsMember> arrayList0 = new ArrayList<UmsMember>();
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(umsMember0);
      //mock umsMemberMapper0
      UmsMemberMapper umsMemberMapper0 = mock(UmsMemberMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsMemberMapper0).selectByExample(any(com.macro.mall.model.UmsMemberExample.class));
      //mock umsMemberCacheService0
      UmsMemberCacheService umsMemberCacheService0 = mock(UmsMemberCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("h$h-tww!").when(umsMemberCacheService0).getAuthCode(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberCacheService", (Object) umsMemberCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsMemberServiceImpl.class, umsMemberServiceImpl0, "memberMapper", (Object) umsMemberMapper0);
      
      //Call method: updatePassword
      umsMemberServiceImpl0.updatePassword("", "0", "h$h-tww!");
  }
}
