/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.service.RedisService;
import com.macro.mall.mapper.OmsOrderItemMapper;
import com.macro.mall.mapper.OmsOrderMapper;
import com.macro.mall.mapper.OmsOrderSettingMapper;
import com.macro.mall.mapper.PmsSkuStockMapper;
import com.macro.mall.mapper.SmsCouponHistoryMapper;
import com.macro.mall.mapper.UmsIntegrationConsumeSettingMapper;
import com.macro.mall.model.OmsOrder;
import com.macro.mall.model.OmsOrderItem;
import com.macro.mall.model.OmsOrderSetting;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.model.SmsCouponHistory;
import com.macro.mall.model.SmsCouponProductCategoryRelation;
import com.macro.mall.model.SmsCouponProductRelation;
import com.macro.mall.model.UmsIntegrationConsumeSetting;
import com.macro.mall.model.UmsMember;
import com.macro.mall.model.UmsMemberReceiveAddress;
import com.macro.mall.portal.component.CancelOrderSender;
import com.macro.mall.portal.dao.PortalOrderDao;
import com.macro.mall.portal.dao.PortalOrderItemDao;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.domain.ConfirmOrderResult;
import com.macro.mall.portal.domain.OmsOrderDetail;
import com.macro.mall.portal.domain.OrderParam;
import com.macro.mall.portal.domain.SmsCouponHistoryDetail;
import com.macro.mall.portal.service.OmsCartItemService;
import com.macro.mall.portal.service.UmsMemberCouponService;
import com.macro.mall.portal.service.UmsMemberReceiveAddressService;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsPortalOrderServiceImpl_SSTest extends OmsPortalOrderServiceImpl_SSTest_scaffolding {
// allCoveredLines:[33, 71, 73, 74, 75, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 126, 127, 128, 131, 132, 133, 136, 139, 141, 142, 143, 146, 147, 148, 149, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 257, 262, 263, 265, 266, 267, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 285, 286, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 307, 308, 311, 313, 314, 315, 318, 323, 324, 326, 327, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 347, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 402, 403, 404, 405, 407, 408, 409, 411, 413, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 439, 440, 441, 442, 443, 444, 450, 451, 452, 453, 454, 461, 462, 463, 464, 465, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 491, 493, 494, 495, 496, 497, 498, 499, 505, 506, 507, 508, 509, 510, 511, 512, 514, 522, 523, 524, 525, 526, 527, 534, 535, 536, 537, 539, 540, 547, 548, 549, 550, 552, 553, 560, 561, 562, 563, 565, 566, 578, 580, 581, 585, 586, 588, 591, 592, 595, 596, 597, 598, 600, 610, 611, 613, 614, 616, 617, 618, 620, 621, 623, 631, 632, 634, 635, 636, 637, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 683, 684, 685, 686, 688, 689, 696, 697, 698, 699, 700, 707, 708, 709, 710, 711, 712, 718, 719, 720, 722, 723, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741]

  @Test(timeout = 4000)
  public void test_calcCouponAmount_00()  throws Throwable  {
      //caseID:2018532382144f654c1c1a1dfbf7b00a
      //CoveredLines: [33, 547, 548, 549, 552, 553]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: arrayList0
      //Assert: assertEquals((byte)0, method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(omsOrderItem0);
      
      //Call method: calcCouponAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcCouponAmount", (Object) arrayList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test_calcCouponAmount_01()  throws Throwable  {
      //caseID:6c8184f6a85a11cb7d6b1e1c9d6b0d76
      //CoveredLines: [33, 547, 548, 549, 550, 552, 553]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: vector0
      //Assert: assertEquals((short)27390, method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      BigDecimal bigDecimal0 = new BigDecimal((-2546.6));
      Integer integer0 = new Integer(401);
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getCouponAmount();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      
      vector0.add(omsOrderItem0);
      
      //Call method: calcCouponAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcCouponAmount", (Object) vector0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((short)27390, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_calcIntegrationAmount_02()  throws Throwable  {
      //caseID:0953abcf4828ead3d0a2634246f366b6
      //CoveredLines: [33, 534, 535, 536, 539, 540]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: stack0
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(omsOrderItem0);
      
      //Call method: calcIntegrationAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcIntegrationAmount", (Object) stack0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test_calcPromotionAmount_03()  throws Throwable  {
      //caseID:c4cd4efcdf8486be7f6161843a3ad6d6
      //CoveredLines: [33, 560, 561, 562, 565, 566]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: stack0
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(omsOrderItem0);
      
      //Call method: calcPromotionAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcPromotionAmount", (Object) stack0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_04()  throws Throwable  {
      //caseID:a1ba9baa1475e8e9a7dfe40f08917775
      //CoveredLines: [33, 292, 293, 294, 295, 296]
      //Input_0_Long: 2694L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(2694L);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_05()  throws Throwable  {
      //caseID:0763bd2a2d10ec22e5f5d2fcee6c6246
      //CoveredLines: [33, 292, 293, 294, 295, 298, 299, 318]
      //Input_0_Long: 798L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrder> stack0 = new Stack<OmsOrder>();
      Long long0 = new Long(798L);
      
      stack0.add(null);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn((-1)).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_06()  throws Throwable  {
      //caseID:74f7138542e7f5c5a0a16b758df9e27c
      //CoveredLines: [33, 292, 293, 294, 295, 298, 299, 301, 302, 303, 304, 305, 307, 308, 311, 313, 318, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488]
      //Input_0_Long: 1L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderItem0);
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      LinkedList<OmsOrder> linkedList1 = new LinkedList<OmsOrder>();
      Long long0 = new Long(1L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn((Integer) null).when(omsOrder0).getUseIntegration();
      
      linkedList1.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn(60).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      LinkedList<SmsCouponHistory> linkedList2 = new LinkedList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList2.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList2).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(0).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(portalOrderDao0).releaseSkuStockLock(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_07()  throws Throwable  {
      //caseID:d3bb93158b56d1e5fa7a997c4f15becf
      //CoveredLines: [33, 292, 293, 294, 295, 298, 299, 301, 302, 303, 304, 305, 307, 311, 313, 314, 315, 318, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488]
      //Input_0_Long: 2707L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      ArrayList<OmsOrder> arrayList0 = new ArrayList<OmsOrder>();
      Integer integer0 = new Integer(41);
      Long long0 = new Long(2707L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(long0, long0, long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getUseIntegration();
      
      arrayList0.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn(6).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      LinkedList<SmsCouponHistory> linkedList0 = new LinkedList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(1000).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getById(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_08()  throws Throwable  {
      //caseID:fb47ee33de341e685f7eb3cba70b394c
      //CoveredLines: [33, 262, 263, 265, 266, 267]
      //Assert: assertEquals(0, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer0 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_09()  throws Throwable  {
      //caseID:1d0ebefed728f59915780df93e692cea
      //CoveredLines: [33, 262, 263, 265, 266, 270, 271, 272, 273, 274, 275, 277, 279, 281, 285, 286, 476]
      //Assert: assertEquals(1, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(60);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      ArrayList<OmsOrderDetail> arrayList0 = new ArrayList<OmsOrderDetail>();
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(omsOrderDetail0);
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(portalOrderDao0).getTimeOutOrders(nullable(java.lang.Integer.class));
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer1 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_10()  throws Throwable  {
      //caseID:6c7b536438b77c75f1640310d9f96557
      //CoveredLines: [33, 262, 263, 265, 266, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 285, 286, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488]
      //Assert: assertEquals(1, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer((-717));
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      LinkedList<SmsCouponHistory> linkedList0 = new LinkedList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(3).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      ArrayList<OmsOrderDetail> arrayList0 = new ArrayList<OmsOrderDetail>();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      Long long0 = new Long(2088L);
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderDetail0).getCouponId();
      doReturn(long0).when(omsOrderDetail0).getId();
      doReturn(long0, long0, long0).when(omsOrderDetail0).getMemberId();
      doReturn(integer0, integer0).when(omsOrderDetail0).getUseIntegration();
      doReturn(stack0).when(omsOrderDetail0).getOrderItemList();
      
      arrayList0.add(omsOrderDetail0);
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(portalOrderDao0).getTimeOutOrders(anyInt());
      doReturn(4).when(portalOrderDao0).releaseSkuStockLock(nullable(java.util.List.class));
      doReturn(32767).when(portalOrderDao0).updateOrderStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getById(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer1 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_11()  throws Throwable  {
      //caseID:fb979f52991a9caf657040dc2a318bd3
      //CoveredLines: [33, 331, 332, 333, 334]
      //Input_0_Long: 5485L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(5485L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      Long long1 = new Long(0L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_12()  throws Throwable  {
      //caseID:1d2b9f336cdb4f7dfd6f852ecaf663ff
      //CoveredLines: [33, 331, 332, 333, 336, 337]
      //Input_0_Long: 0L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1508);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_13()  throws Throwable  {
      //caseID:50f2411a924a6ed4384559a8c68a21ca
      //CoveredLines: [33, 331, 332, 333, 336, 339, 340, 341, 342, 343]
      //Input_0_Long: 1L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1L);
      Integer integer0 = new Integer(2);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      doReturn(1029).when(omsOrderMapper0).updateByPrimaryKey(any(com.macro.mall.model.OmsOrder.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_14()  throws Throwable  {
      //caseID:903847308789e641753cbdb336d728f0
      //CoveredLines: [33, 402, 403, 404, 405]
      //Input_0_Long: 813L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      Long long1 = new Long(813L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.deleteOrder(long1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_15()  throws Throwable  {
      //caseID:816166ff91e4d4be778eade03459c41c
      //CoveredLines: [33, 402, 403, 404, 407, 411]
      //Input_0_Long: 354L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(354L);
      Integer integer0 = new Integer(1508);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.deleteOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_16()  throws Throwable  {
      //caseID:8fe8308c94d8c03e4c453c86da9edc6f
      //CoveredLines: [33, 402, 403, 404, 407, 408, 409, 413]
      //Input_0_Long: 2274L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(2274L);
      Integer integer0 = new Integer(3);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      omsPortalOrderServiceImpl0.deleteOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_17()  throws Throwable  {
      //caseID:2a408ee801739224e570a388cbc5d6ed
      //CoveredLines: [33, 402, 403, 404, 407, 408, 409, 413]
      //Input_0_Long: 1352L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1352L);
      Integer integer0 = new Integer(4);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      omsPortalOrderServiceImpl0.deleteOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_detail_18()  throws Throwable  {
      //caseID:4e92a2af398335bf27090ad7f925d5cd
      //CoveredLines: [33, 390, 391, 392, 393, 394, 395, 396, 397]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result.getBillHeader());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      Long long0 = new Long(0L);
      
      //Call method: detail
      OmsOrderDetail omsOrderDetail0 = omsPortalOrderServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNull(omsOrderDetail0.getBillHeader());
  }

  @Test(timeout = 4000)
  public void test_generateConfirmOrder_19()  throws Throwable  {
      //caseID:91e186bccb47da388a827795e67bb50c
      //CoveredLines: [33, 71, 73, 74, 75, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741]
      //Input_0_List<Long>: stack1
      //Assert: assertEquals(505, (int)method_result.getMemberIntegration());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      Vector<CartPromotionItem> vector0 = new Vector<CartPromotionItem>();
      Integer integer0 = new Integer(505);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn(integer0, integer0).when(cartPromotionItem0).getQuantity();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      vector0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Stack<SmsCouponHistoryDetail> stack0 = new Stack<SmsCouponHistoryDetail>();
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsMemberCouponService0).listCart(nullable(java.util.List.class) , nullable(java.lang.Integer.class));
      Vector<UmsMemberReceiveAddress> vector1 = new Vector<UmsMemberReceiveAddress>();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(umsMemberReceiveAddressService0).list();
      Long long0 = new Long(1L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      Stack<Long> stack1 = new Stack<Long>();
      
      //Call method: generateConfirmOrder
      ConfirmOrderResult confirmOrderResult0 = omsPortalOrderServiceImpl0.generateConfirmOrder(stack1);
      
      //Test Result Assert
      assertEquals(505, (int)confirmOrderResult0.getMemberIntegration());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_20()  throws Throwable  {
      //caseID:013e5d61b3c47cf35e117a13e9d333d6
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 131, 132, 136, 139, 141, 142, 143, 159, 491, 493, 494, 495, 610, 611, 614, 623, 683, 684, 685, 686, 718, 719, 722, 723]
      //Input_0_OrderParam: {getCouponId=1339L 1339L, getCartIds=stack0, getUseIntegration=2 0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(1000);
      Long long0 = new Long(1339L);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn("sources must be non-null").when(cartPromotionItem0).getProductAttr();
      doReturn(")>G%@6/Sa1%t5nNkz*C").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("rCv[|").when(cartPromotionItem0).getProductName();
      doReturn("-2145883434").when(cartPromotionItem0).getProductPic();
      doReturn("orderItemList").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("100").when(cartPromotionItem0).getProductSn();
      doReturn(integer0).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer1).when(cartPromotionItem0).getIntegration();
      doReturn("S+e5:cdvij\\*BJ+-Br").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer0).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList0.add(cartPromotionItem0);
      LinkedList<SmsCouponHistoryDetail> linkedList0 = new LinkedList<SmsCouponHistoryDetail>();
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer1).when(smsCoupon0).getUseType();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCoupon1).getId();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-2147483644").when(smsCouponHistoryDetail0).toString();
      doReturn(smsCoupon1, smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      linkedList0.add(smsCouponHistoryDetail0);
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsMemberCouponService0).listCart(ArgumentMatchers.<com.macro.mall.portal.domain.CartPromotionItem>anyList() , anyInt());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer2 = new Integer(0);
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      doReturn(long0, long0).when(orderParam0).getCouponId();
      doReturn(integer0, integer2).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_21()  throws Throwable  {
      //caseID:7c067ad8c8488bbfef802b3661e17a90
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 131, 132, 133, 683, 684, 685, 688, 689, 718, 723]
      //Input_0_OrderParam: {getCouponId=0L (Long) null, getCartIds=stack0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      ArrayList<SmsCouponHistoryDetail> arrayList1 = new ArrayList<SmsCouponHistoryDetail>();
      Long long0 = new Long(0L);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCoupon0).getId();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      arrayList1.add(smsCouponHistoryDetail0);
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(umsMemberCouponService0).listCart(ArgumentMatchers.<com.macro.mall.portal.domain.CartPromotionItem>anyList() , anyInt());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      Stack<Long> stack0 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      doReturn(long0, (Long) null).when(orderParam0).getCouponId();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u4F18\u60E0\u5238\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_22()  throws Throwable  {
      //caseID:4ba2d8f9397dc1c3dc7eae17e0bf3420
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 146, 147, 148, 149, 578, 580, 581, 696, 697, 700, 718, 723]
      //Input_0_OrderParam: {getCouponId=(Long) null 1612L, getCartIds=stack0, getUseIntegration=376 376 376}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Long long0 = new Long(1612L);
      Integer integer0 = new Integer(0);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer1 = new Integer(376);
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      doReturn((Long) null, long0).when(orderParam0).getCouponId();
      doReturn(integer1, integer1, integer1).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u79EF\u5206\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_23()  throws Throwable  {
      //caseID:ab13b68b974a62ffe64698997cf02e77
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 146, 147, 148, 149, 578, 580, 585, 586, 591, 592, 696, 697, 700, 718, 723]
      //Input_0_OrderParam: {getCouponId=(Long) null (Long) null, getCartIds=stack0, getUseIntegration=100 100 6}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(100);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Long long0 = new Long(1568L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer1 = new Integer(6);
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      doReturn((Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(integer0, integer0, integer1).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u79EF\u5206\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_24()  throws Throwable  {
      //caseID:d6a45635cdf0837d1771f6e5173340d0
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 718, 719, 720]
      //Input_0_OrderParam: {getCartIds=stack0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<CartPromotionItem> vector0 = new Vector<CartPromotionItem>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      Long long0 = new Long(0L);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01").when(cartPromotionItem0).getProductAttr();
      doReturn("reactor.core.publisher.MonoCallableOnAssembly.").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("0a0").when(cartPromotionItem0).getProductName();
      doReturn("(Zl^").when(cartPromotionItem0).getProductPic();
      doReturn("requestedFromSource").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("1000").when(cartPromotionItem0).getProductSn();
      doReturn(integer0).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer1).when(cartPromotionItem0).getIntegration();
      doReturn("product_pic >").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer1).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      vector0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      Stack<Long> stack0 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E93\u5B58\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u4E0B\u5355", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_25()  throws Throwable  {
      //caseID:0b5cc9512c0dfe088bd8759161991efe
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 718, 719, 720]
      //Input_0_OrderParam: {getCartIds=arrayList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Long long0 = new Long(0L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(orderParam0).getCartIds();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E93\u5B58\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u4E0B\u5355", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_26()  throws Throwable  {
      //caseID:a9924a3057e3b043fb81f4546dbde2ba
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 228, 231, 236, 238, 239, 240, 241, 242, 323, 324, 326, 327, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 443, 444, 450, 451, 454, 461, 462, 465, 476, 491, 499, 505, 506, 510, 511, 514, 522, 523, 524, 525, 526, 527, 534, 535, 540, 547, 548, 553, 560, 561, 566, 696, 697, 700, 707, 712, 718, 723]
      //Input_0_OrderParam: {getCouponId=(Long) null 460L 460L 460L (Long) null, getPayType=0, getCartIds=stack1, getMemberReceiveAddressId=460L, getUseIntegration=0 0 0 0 (Integer) null}
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(460L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1343).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Stack<OmsOrderSetting> stack0 = new Stack<OmsOrderSetting>();
      Integer integer0 = new Integer(2147483645);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getConfirmOvertime();
      
      stack0.add(omsOrderSetting0);
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting1).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(6).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("406").when(umsMemberReceiveAddress0).getCity();
      doReturn("z8cw~^k{dhg").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("-1").when(umsMemberReceiveAddress0).getName();
      doReturn("1.0").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("r :`N9Pa2").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("1000").when(umsMemberReceiveAddress0).getProvince();
      doReturn("100").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      Integer integer1 = new Integer(0);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0).when(umsMember0).getId();
      doReturn("^+O>;Gsn|*").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      Stack<Long> stack1 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack1).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, long0, long0, (Long) null).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer1).when(orderParam0).getPayType();
      doReturn(integer1, integer1, integer1, integer1, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_27()  throws Throwable  {
      //caseID:9319dd5c094a5cf28a639316d9885b2d
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 323, 324, 326, 327, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 443, 444, 450, 451, 454, 461, 462, 465, 476, 478, 479, 480, 481, 482, 488, 491, 499, 505, 506, 510, 511, 514, 522, 523, 524, 525, 526, 527, 534, 535, 540, 547, 548, 553, 560, 561, 566, 696, 697, 700, 707, 712, 718, 723]
      //Input_0_OrderParam: {getCouponId=(Long) null 0L 0L 0L 0L, getPayType=0, getCartIds=stack1, getMemberReceiveAddressId=0L, getUseIntegration=0 0 0 0 0 0 (-1)}
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(100).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      ArrayList<OmsOrderSetting> arrayList0 = new ArrayList<OmsOrderSetting>();
      Integer integer0 = new Integer((-1));
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getConfirmOvertime();
      
      arrayList0.add(omsOrderSetting0);
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting1).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      Stack<SmsCouponHistory> stack0 = new Stack<SmsCouponHistory>();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1920).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList1 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(100).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList1).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("orderItemList").when(umsMemberReceiveAddress0).getCity();
      doReturn("%TcPx#").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("orderItemList").when(umsMemberReceiveAddress0).getName();
      doReturn("rLBI7PQJeO").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("orderItemList").when(umsMemberReceiveAddress0).getPostCode();
      doReturn(":").when(umsMemberReceiveAddress0).getProvince();
      doReturn("use_time <>;;").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      Integer integer1 = new Integer(0);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer1).when(umsMember0).getIntegration();
      doReturn("^+O>;Gsn|*").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      Stack<Long> stack1 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack1).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, long0, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer1).when(orderParam0).getPayType();
      doReturn(integer1, integer1, integer1, integer1, integer1, integer1, integer0).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_28()  throws Throwable  {
      //caseID:0058e287b485fdce4ef7f39b0206a3a4
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 323, 324, 326, 327, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 443, 444, 450, 451, 454, 461, 462, 465, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 491, 499, 505, 506, 510, 511, 514, 522, 523, 524, 525, 526, 527, 547, 548, 553, 560, 561, 566, 696, 697, 700, 707, 712, 718, 723]
      //Input_0_OrderParam: {getCouponId=(Long) null 270L 270L 270L 270L, getPayType=100, getCartIds=stack0, getMemberReceiveAddressId=270L, getUseIntegration=(Integer) null (Integer) null 100 100 100}
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(270L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(30).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(100);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      Vector<OmsOrderSetting> vector0 = new Vector<OmsOrderSetting>();
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      vector0.add(omsOrderSetting1);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      Vector<SmsCouponHistory> vector1 = new Vector<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector1.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(25).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("yyyyMMdd").when(umsMemberReceiveAddress0).getCity();
      doReturn("Rz;Lv").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn(";").when(umsMemberReceiveAddress0).getName();
      doReturn("1").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("\u8BE5\u4F18\u60E0\u5238\u4E0D\u53EF\u7528;;").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("reactor.core.publisher.FluxMergeOrdered$MergeOrderedMainProducer").when(umsMemberReceiveAddress0).getProvince();
      doReturn("").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      doReturn("893").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      Stack<Long> stack0 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, long0, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn((Integer) null, (Integer) null, integer0, integer0, integer0).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_29()  throws Throwable  {
      //caseID:ab0212dee6fc731825ad5fdddec3a8f8
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 139, 141, 142, 143, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 231, 232, 233, 236, 238, 239, 240, 241, 242, 323, 324, 326, 327, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 441, 442, 443, 444, 450, 451, 452, 453, 454, 461, 462, 463, 464, 465, 491, 493, 494, 495, 496, 497, 498, 499, 505, 506, 507, 508, 509, 510, 511, 512, 514, 522, 523, 524, 525, 526, 527, 534, 535, 536, 537, 539, 540, 560, 561, 562, 563, 565, 566, 696, 697, 698, 699, 700, 707, 708, 709, 710, 711, 712, 718, 719, 722, 723]
      //Input_0_OrderParam: {getCouponId=(Long) null (Long) null (Long) null, getPayType=1000, getCartIds=arrayList1, getMemberReceiveAddressId=260L, getUseIntegration=(Integer) null 1000 (Integer) null 1000 93 93}
      //Assert: assertEquals(2, method_result.size());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(260L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1452).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(93);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      Vector<OmsOrderSetting> vector0 = new Vector<OmsOrderSetting>();
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      vector0.add(omsOrderSetting1);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsSkuStock0).when(pmsSkuStockMapper0).selectByPrimaryKey(anyLong());
      doReturn(2).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(303).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer1 = new Integer(1000);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(cartPromotionItem0).getId();
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn("0").when(cartPromotionItem0).getProductAttr();
      doReturn("create_time desc").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("bill_type not between").when(cartPromotionItem0).getProductName();
      doReturn("member_id <=").when(cartPromotionItem0).getProductPic();
      doReturn(":").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0, long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("--3:~;hF$]").when(cartPromotionItem0).getProductSn();
      doReturn(integer0, integer1).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer0).when(cartPromotionItem0).getIntegration();
      doReturn("1000").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer1).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1000").when(umsMemberReceiveAddress0).getCity();
      doReturn("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("1.0").when(umsMemberReceiveAddress0).getName();
      doReturn("2844").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getProvince();
      doReturn("2de*K@`#").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(orderParam0).getCartIds();
      doReturn((Long) null, (Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer1).when(orderParam0).getPayType();
      doReturn((Integer) null, integer1, (Integer) null, integer1, integer0, integer0).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test_generateOrderSn_30()  throws Throwable  {
      //caseID:5c951cc57d4c57ddf2dd83830d283efe
      //CoveredLines: [33, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 432]
      //Input_0_com.macro.mall.model.OmsOrder: {getPayType=4, getSourceType=4}
      //Assert: assertEquals("2014021404042147483647", method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(2147483647L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      Integer integer0 = new Integer(4);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrder0).getPayType();
      doReturn(integer0).when(omsOrder0).getSourceType();
      
      //Call method: generateOrderSn
      Object object0 = PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "generateOrderSn", (Object) omsOrder0, (Class<?>) OmsOrder.class);
      
      //Test Result Assert
      assertEquals("2014021404042147483647", object0);
  }

  @Test(timeout = 4000)
  public void test_getCouponOrderItemByRelation_31()  throws Throwable  {
      //caseID:eabea8d6299d69cc539e0a874bf336d9
      //CoveredLines: [33, 647, 648, 673]
      //Input_0_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {}
      //Input_1_List<com.macro.mall.model.OmsOrderItem>: vector0
      //Input_2_int: 500
      //Assert: assertTrue(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      
      //Call method: getCouponOrderItemByRelation
      List<OmsOrderItem> list0 = (List<OmsOrderItem>)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getCouponOrderItemByRelation", (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class, (Object) vector0, (Class<?>) List.class, (Object) 500, (Class<?>) int.class);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getUseIntegrationAmount_32()  throws Throwable  {
      //caseID:bd627f59261bbf0e154cf07ea66730ee
      //CoveredLines: [33, 578, 580, 585, 586, 588]
      //Input_0_Integer: 0
      //Input_1_BigDecimal: BigDecimal.TEN
      //Input_2_com.macro.mall.model.UmsMember: {getIntegration=0}
      //Input_3_boolean: true
      //Assert: assertEquals((byte)0, method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(0);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getCouponStatus();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      
      //Call method: getUseIntegrationAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getUseIntegrationAmount", (Object) integer0, (Class<?>) Integer.class, (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) umsMember0, (Class<?>) UmsMember.class, (Object) true, (Class<?>) boolean.class);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test_getUseIntegrationAmount_33()  throws Throwable  {
      //caseID:eec03f3e153925181868d22ee460f092
      //CoveredLines: [33, 578, 580, 585, 586, 591, 595, 596, 597, 600]
      //Input_0_Integer: 60
      //Input_1_BigDecimal: BigDecimal.TEN
      //Input_2_com.macro.mall.model.UmsMember: {getIntegration=60}
      //Input_3_boolean: true
      //Assert: assertEquals((short) (-60), method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer((-1));
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getCouponStatus();
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getMaxPercentPerOrder();
      doReturn(integer0, integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      Integer integer1 = new Integer(60);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1).when(umsMember0).getIntegration();
      
      //Call method: getUseIntegrationAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getUseIntegrationAmount", (Object) integer1, (Class<?>) Integer.class, (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) umsMember0, (Class<?>) UmsMember.class, (Object) true, (Class<?>) boolean.class);
      
      //Test Result Assert
      assertEquals((short) (-60), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_getUseIntegrationAmount_34()  throws Throwable  {
      //caseID:c516ea5239ae0b8c61ba783cf81b7a19
      //CoveredLines: [33, 578, 580, 585, 586, 591, 595, 596, 597, 598]
      //Input_0_Integer: 2
      //Input_1_BigDecimal: BigDecimal.TEN
      //Input_2_com.macro.mall.model.UmsMember: {getIntegration=2}
      //Input_3_boolean: true
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(2);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getCouponStatus();
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getMaxPercentPerOrder();
      doReturn(integer0, integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      
      //Call method: getUseIntegrationAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getUseIntegrationAmount", (Object) integer0, (Class<?>) Integer.class, (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) umsMember0, (Class<?>) UmsMember.class, (Object) true, (Class<?>) boolean.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_35()  throws Throwable  {
      //caseID:a9cc5eda1696338c1277ae5f0ed01953
      //CoveredLines: [33, 610, 611, 613, 623, 631, 632, 634, 635, 636, 637, 696, 697, 698, 699, 700]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: linkedList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      Integer integer0 = new Integer((-1));
      BigDecimal bigDecimal0 = new BigDecimal(1411L);
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getProductPrice();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      
      linkedList0.add(omsOrderItem0);
      Integer integer1 = new Integer(0);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon0).getAmount();
      doReturn(integer1).when(smsCoupon0).getUseType();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) linkedList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_36()  throws Throwable  {
      //caseID:7b8e66e12976cacf51e3e90d68e1c799
      //CoveredLines: [33, 610, 611, 614, 620, 621, 623, 631, 632, 637, 647, 648, 661, 662, 665, 666, 669, 671, 673, 696, 697, 700]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: linkedList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getProductRelationList=linkedList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderItem0);
      Integer integer0 = new Integer(2);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer0).when(smsCoupon0).getUseType();
      LinkedList<SmsCouponProductRelation> linkedList1 = new LinkedList<SmsCouponProductRelation>();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      doReturn(linkedList1).when(smsCouponHistoryDetail0).getProductRelationList();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) linkedList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertTrue(linkedList0.contains(omsOrderItem0));
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_37()  throws Throwable  {
      //caseID:988726de93c71349576e1b6eee956fcb
      //CoveredLines: [33, 610, 611, 614, 616, 617, 618, 623, 631, 632, 637, 647, 648, 649, 650, 653, 654, 657, 659, 660, 673, 696, 697, 700]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: linkedList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getCategoryRelationList=vector0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderItem0);
      Integer integer0 = new Integer(1);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(smsCoupon0).getUseType();
      Vector<SmsCouponProductCategoryRelation> vector0 = new Vector<SmsCouponProductCategoryRelation>();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsCouponHistoryDetail0).getCategoryRelationList();
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) linkedList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_38()  throws Throwable  {
      //caseID:d2878f37831c601020cc7883c50d2b2c
      //CoveredLines: [33, 610, 611, 614, 616, 617, 631, 632, 634, 647, 648, 649, 650, 651, 652, 653, 654, 655, 659, 660, 673, 696, 697, 698, 699, 700]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: arrayList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getCategoryRelationList=arrayList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      Integer integer0 = new Integer((-1));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Long long0 = new Long((-1L));
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderItem0).getProductCategoryId();
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getProductPrice();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      doReturn("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01").when(omsOrderItem0).toString();
      
      arrayList0.add(omsOrderItem0);
      Integer integer1 = new Integer(1);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1, integer1).when(smsCoupon0).getUseType();
      ArrayList<SmsCouponProductCategoryRelation> arrayList1 = new ArrayList<SmsCouponProductCategoryRelation>();
      //mock smsCouponProductCategoryRelation0
      SmsCouponProductCategoryRelation smsCouponProductCategoryRelation0 = mock(SmsCouponProductCategoryRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductCategoryRelation0).getProductCategoryId();
      
      arrayList1.add(smsCouponProductCategoryRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(smsCouponHistoryDetail0).getCategoryRelationList();
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      //Call method: handleCouponAmount
      try { 
        PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) arrayList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      } catch(Throwable e) {
         verifyException("java.math.BigDecimal", e);
         assertEquals("java.lang.ArithmeticException", e.getClass().getName());
         assertEquals("/ by zero", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_39()  throws Throwable  {
      //caseID:7ea43fac1c83c275eb854f563b3960cf
      //CoveredLines: [33, 610, 611, 614, 620, 621, 623, 631, 632, 634, 635, 636, 637, 647, 648, 661, 662, 663, 664, 665, 666, 667, 671, 673, 696, 697, 698, 699, 700]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: linkedList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getProductRelationList=linkedList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      Long long0 = new Long(401L);
      Integer integer0 = new Integer(2);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderItem0).getProductId();
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getProductPrice();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      doReturn("").when(omsOrderItem0).toString();
      
      linkedList0.add(omsOrderItem0);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon0).getAmount();
      doReturn(integer0, integer0, integer0).when(smsCoupon0).getUseType();
      LinkedList<SmsCouponProductRelation> linkedList1 = new LinkedList<SmsCouponProductRelation>();
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductRelation0).getProductId();
      
      linkedList1.add(smsCouponProductRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      doReturn(linkedList1).when(smsCouponHistoryDetail0).getProductRelationList();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) linkedList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test_list_40()  throws Throwable  {
      //caseID:e716b4dc09e906f0cd9be4b22e8e5edc
      //CoveredLines: [33, 347, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369]
      //Input_0_Integer: 97
      //Input_1_Integer: 97
      //Input_2_Integer: 97
      //Assert: assertEquals(0L, (long)method_result.getTotal());
      //Assert: assertEquals(0, (int)method_result.getPageSize());
      //Assert: assertEquals(1, (int)method_result.getPageNum());
      //Assert: assertEquals(0, (int)method_result.getTotalPage());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrder> arrayList0 = new ArrayList<OmsOrder>();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      Long long0 = new Long(3L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Integer integer0 = new Integer(97);
      
      //Call method: list
      CommonPage<OmsOrderDetail> commonPage0 = omsPortalOrderServiceImpl0.list(integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0L, (long)commonPage0.getTotal());
      
      //Test Result Assert
      assertEquals(0, (int)commonPage0.getPageSize());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageNum());
      
      //Test Result Assert
      assertEquals(0, (int)commonPage0.getTotalPage());
  }

  @Test(timeout = 4000)
  public void test_list_41()  throws Throwable  {
      //caseID:aa65986b3a53a6a272875da389fff595
      //CoveredLines: [33, 347, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 380, 381, 382, 383, 384, 385]
      //Input_0_Integer: 2
      //Input_1_Integer: 2
      //Input_2_Integer: 2
      //Assert: assertEquals(1, (int)method_result.getPageNum());
      //Assert: assertEquals(1L, (long)method_result.getTotal());
      //Assert: assertEquals(1, (int)method_result.getTotalPage());
      //Assert: assertEquals(1, (int)method_result.getPageSize());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      LinkedList<OmsOrder> linkedList0 = new LinkedList<OmsOrder>();
      Integer integer0 = new Integer(2);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrder0);
      Long long0 = new Long(1828L);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: list
      CommonPage<OmsOrderDetail> commonPage0 = omsPortalOrderServiceImpl0.list(integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageNum());
      
      //Test Result Assert
      assertEquals(1L, (long)commonPage0.getTotal());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getTotalPage());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test_paySuccess_42()  throws Throwable  {
      //caseID:ecf0cb1dae7482445de3de331e6e2c07
      //CoveredLines: [33, 248, 249, 250, 251, 252, 253, 255, 256, 257]
      //Input_0_Long: 4920L
      //Input_1_Integer: (-1990)
      //Assert: assertEquals(0, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(39).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderDetail0).when(portalOrderDao0).getDetail(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(4920L);
      Integer integer0 = new Integer((-1990));
      
      //Call method: paySuccess
      Integer integer1 = omsPortalOrderServiceImpl0.paySuccess(long0, integer0);
      
      //Test Result Assert
      assertEquals(0, (int)integer1);
  }
}
