/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.service.RedisService;
import com.macro.mall.mapper.OmsOrderItemMapper;
import com.macro.mall.mapper.OmsOrderMapper;
import com.macro.mall.mapper.OmsOrderSettingMapper;
import com.macro.mall.mapper.PmsSkuStockMapper;
import com.macro.mall.mapper.SmsCouponHistoryMapper;
import com.macro.mall.mapper.UmsIntegrationConsumeSettingMapper;
import com.macro.mall.model.OmsOrder;
import com.macro.mall.model.OmsOrderItem;
import com.macro.mall.model.OmsOrderSetting;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.model.SmsCouponHistory;
import com.macro.mall.model.SmsCouponProductCategoryRelation;
import com.macro.mall.model.SmsCouponProductRelation;
import com.macro.mall.model.UmsIntegrationConsumeSetting;
import com.macro.mall.model.UmsMember;
import com.macro.mall.model.UmsMemberReceiveAddress;
import com.macro.mall.portal.component.CancelOrderSender;
import com.macro.mall.portal.dao.PortalOrderDao;
import com.macro.mall.portal.dao.PortalOrderItemDao;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.domain.ConfirmOrderResult;
import com.macro.mall.portal.domain.OmsOrderDetail;
import com.macro.mall.portal.domain.OrderParam;
import com.macro.mall.portal.domain.SmsCouponHistoryDetail;
import com.macro.mall.portal.service.OmsCartItemService;
import com.macro.mall.portal.service.UmsMemberCouponService;
import com.macro.mall.portal.service.UmsMemberReceiveAddressService;
import com.macro.mall.portal.service.UmsMemberService;
import com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsPortalOrderServiceImpl_SSTest extends OmsPortalOrderServiceImpl_SSTest_scaffolding {
// allCoveredLines:[33, 71, 73, 74, 75, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 126, 127, 128, 131, 132, 133, 136, 139, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 260, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 310, 311, 314, 316, 317, 318, 321, 326, 327, 329, 330, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 350, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 405, 406, 407, 408, 410, 411, 412, 414, 416, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 496, 497, 498, 499, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 517, 525, 526, 527, 528, 529, 530, 537, 538, 539, 540, 542, 543, 550, 551, 552, 553, 555, 556, 563, 564, 565, 566, 568, 569, 581, 583, 584, 588, 589, 591, 594, 595, 598, 599, 600, 601, 603, 613, 614, 616, 617, 619, 620, 621, 623, 624, 626, 634, 635, 637, 638, 639, 640, 650, 651, 652, 653, 656, 657, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 676, 686, 687, 688, 689, 691, 692, 699, 700, 701, 702, 703, 710, 711, 712, 713, 714, 715, 721, 722, 723, 725, 726, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744]

  @Test(timeout = 4000)
  public void test_calcCouponAmount_00()  throws Throwable  {
      //caseID:b005dc5470d6e6a6e64c3d54320f5067
      //CoveredLines: [33, 550, 551, 552, 555, 556]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: linkedList0
      //Assert: assertEquals((byte)0, method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderItem0);
      
      //Call method: calcCouponAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcCouponAmount", (Object) linkedList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test_calcIntegrationAmount_01()  throws Throwable  {
      //caseID:34feacab95bfee9ce92cb1a6a108fc46
      //CoveredLines: [33, 537, 538, 539, 542, 543]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: vector0
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((BigDecimal) null).when(omsOrderItem0).getIntegrationAmount();
      
      vector0.add(omsOrderItem0);
      
      //Call method: calcIntegrationAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcIntegrationAmount", (Object) vector0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test_calcPromotionAmount_02()  throws Throwable  {
      //caseID:8908ca6e7b2f4c32c5f0215a532d32cb
      //CoveredLines: [33, 563, 564, 565, 568, 569]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: vector0
      //Assert: assertEquals((byte)0, method_result.byteValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(omsOrderItem0);
      
      //Call method: calcPromotionAmount
      BigDecimal bigDecimal0 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "calcPromotionAmount", (Object) vector0, (Class<?>) List.class);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_03()  throws Throwable  {
      //caseID:31d07e7b9efaadb39f4127da643d1c5d
      //CoveredLines: [33, 295, 296, 297, 298, 299]
      //Input_0_Long: 1220L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(1220L);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_04()  throws Throwable  {
      //caseID:50d4341fb1c802892fa8fed5d674d2ce
      //CoveredLines: [33, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 310, 311, 314, 316, 321, 479, 481, 482, 483, 484, 485, 491]
      //Input_0_Long: 3780L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(omsOrderItem0);
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      ArrayList<OmsOrder> arrayList0 = new ArrayList<OmsOrder>();
      Long long0 = new Long(3780L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn((Integer) null).when(omsOrder0).getUseIntegration();
      
      arrayList0.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn(3598).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_05()  throws Throwable  {
      //caseID:8312d17e74b51ced756c266fdde5dee8
      //CoveredLines: [33, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 310, 314, 316, 317, 318, 321, 479, 481, 482, 483, 484, 485, 491]
      //Input_0_Long: 566
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Vector<OmsOrderItem> vector0 = new Vector<OmsOrderItem>();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      ArrayList<OmsOrder> arrayList0 = new ArrayList<OmsOrder>();
      Integer integer0 = new Integer(566);
      Long long0 = new Long(566);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(long0, long0, long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getUseIntegration();
      
      arrayList0.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn(566).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      Stack<SmsCouponHistory> stack0 = new Stack<SmsCouponHistory>();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getById(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelOrder_06()  throws Throwable  {
      //caseID:1f639ad1d53a7796c07ef1decc775c5f
      //CoveredLines: [33, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 310, 311, 314, 316, 317, 318, 321, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491]
      //Input_0_Long: 951L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderItem0);
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      Stack<OmsOrder> stack0 = new Stack<OmsOrder>();
      Integer integer0 = new Integer(3);
      Long long0 = new Long(951L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(long0, long0, long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getUseIntegration();
      
      stack0.add(omsOrder0);
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      doReturn(24).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      Vector<SmsCouponHistory> vector0 = new Vector<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(19).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(5514).when(portalOrderDao0).releaseSkuStockLock(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getById(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: cancelOrder
      omsPortalOrderServiceImpl0.cancelOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_07()  throws Throwable  {
      //caseID:783ebea831dd8676f86e2941272652a7
      //CoveredLines: [33, 265, 266, 268, 269, 270]
      //Assert: assertEquals(0, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer0 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_08()  throws Throwable  {
      //caseID:e582b832c8838090358f7cdfc6215829
      //CoveredLines: [33, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 280, 282, 284, 288, 289, 479]
      //Assert: assertEquals(1, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer((-1));
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      LinkedList<OmsOrderDetail> linkedList0 = new LinkedList<OmsOrderDetail>();
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(omsOrderDetail0);
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(portalOrderDao0).getTimeOutOrders(nullable(java.lang.Integer.class));
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer1 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test_cancelTimeOutOrder_09()  throws Throwable  {
      //caseID:243f41cb4270045eccb94311b7cea81f
      //CoveredLines: [33, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491]
      //Assert: assertEquals(1, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(1);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      Stack<SmsCouponHistory> stack0 = new Stack<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(2147483645).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      Stack<OmsOrderDetail> stack1 = new Stack<OmsOrderDetail>();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      Long long0 = new Long(837L);
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderDetail0).getCouponId();
      doReturn(long0).when(omsOrderDetail0).getId();
      doReturn(long0, long0, long0).when(omsOrderDetail0).getMemberId();
      doReturn(integer0, integer0).when(omsOrderDetail0).getUseIntegration();
      doReturn(linkedList0).when(omsOrderDetail0).getOrderItemList();
      
      stack1.add(omsOrderDetail0);
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack1).when(portalOrderDao0).getTimeOutOrders(anyInt());
      doReturn(3).when(portalOrderDao0).releaseSkuStockLock(nullable(java.util.List.class));
      doReturn(123).when(portalOrderDao0).updateOrderStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getById(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      //Call method: cancelTimeOutOrder
      Integer integer1 = omsPortalOrderServiceImpl0.cancelTimeOutOrder();
      
      //Test Result Assert
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_10()  throws Throwable  {
      //caseID:8287f627fb931226d238dc9e1b1d6439
      //CoveredLines: [33, 334, 335, 336, 337]
      //Input_0_Long: 2640L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      Long long1 = new Long(2640L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.confirmReceiveOrder(long1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_11()  throws Throwable  {
      //caseID:7df97f0e62d926cc4bfd9cdcc1c2a245
      //CoveredLines: [33, 334, 335, 336, 339, 340]
      //Input_0_Long: 0L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_confirmReceiveOrder_12()  throws Throwable  {
      //caseID:4feb8b1dbbbdda257447688d0bbe5698
      //CoveredLines: [33, 334, 335, 336, 339, 342, 343, 344, 345, 346]
      //Input_0_Long: 1527L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1527L);
      Integer integer0 = new Integer(2);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      doReturn(2).when(omsOrderMapper0).updateByPrimaryKey(any(com.macro.mall.model.OmsOrder.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: confirmReceiveOrder
      omsPortalOrderServiceImpl0.confirmReceiveOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_13()  throws Throwable  {
      //caseID:3d5a7e6cc358b90808bf97e62c79e96e
      //CoveredLines: [33, 405, 406, 407, 408]
      //Input_0_Long: 1073L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1073L);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      Long long1 = new Long(1202L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.deleteOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_14()  throws Throwable  {
      //caseID:6865470953e204216a507b2655589534
      //CoveredLines: [33, 405, 406, 407, 410, 414]
      //Input_0_Long: 917L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(917L);
      Integer integer0 = new Integer(35);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.deleteOrder(long0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_15()  throws Throwable  {
      //caseID:b30e6c85eb324cd3301831e3169473d0
      //CoveredLines: [33, 405, 406, 407, 410, 411, 412, 416]
      //Input_0_Long: 1763L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1763L);
      Integer integer0 = new Integer(3);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      doReturn(2707).when(omsOrderMapper0).updateByPrimaryKey(any(com.macro.mall.model.OmsOrder.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      omsPortalOrderServiceImpl0.deleteOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_deleteOrder_16()  throws Throwable  {
      //caseID:02edf1f2dc207d9d852c45e66452e4c4
      //CoveredLines: [33, 405, 406, 407, 410, 411, 412, 416]
      //Input_0_Long: 1L
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1L);
      Integer integer0 = new Integer(4);
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn(integer0, integer0).when(omsOrder0).getStatus();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrder0).when(omsOrderMapper0).selectByPrimaryKey(anyLong());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      //Call method: deleteOrder
      omsPortalOrderServiceImpl0.deleteOrder(long0);
  }

  @Test(timeout = 4000)
  public void test_detail_17()  throws Throwable  {
      //caseID:c08d407711303c5c72e6867e237ece4a
      //CoveredLines: [33, 393, 394, 395, 396, 397, 398, 399, 400]
      //Input_0_Long: 600L
      //Assert: assertNull(method_result.getMemberId());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      Long long0 = new Long(600L);
      
      //Call method: detail
      OmsOrderDetail omsOrderDetail0 = omsPortalOrderServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNull(omsOrderDetail0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test_generateConfirmOrder_18()  throws Throwable  {
      //caseID:d5b6ed43087ebb5ef788ff5dece5d736
      //CoveredLines: [33, 71, 73, 74, 75, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744]
      //Input_0_List<Long>: arrayList2
      //Assert: assertEquals((-2146885461), (int)method_result.getMemberIntegration());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      LinkedList<CartPromotionItem> linkedList0 = new LinkedList<CartPromotionItem>();
      Integer integer0 = new Integer((-2146885461));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn(integer0, integer0).when(cartPromotionItem0).getQuantity();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      linkedList0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      ArrayList<SmsCouponHistoryDetail> arrayList0 = new ArrayList<SmsCouponHistoryDetail>();
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsMemberCouponService0).listCart(nullable(java.util.List.class) , nullable(java.lang.Integer.class));
      ArrayList<UmsMemberReceiveAddress> arrayList1 = new ArrayList<UmsMemberReceiveAddress>();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(umsMemberReceiveAddressService0).list();
      Long long0 = new Long(1966L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      ArrayList<Long> arrayList2 = new ArrayList<Long>();
      
      //Call method: generateConfirmOrder
      ConfirmOrderResult confirmOrderResult0 = omsPortalOrderServiceImpl0.generateConfirmOrder(arrayList2);
      
      //Test Result Assert
      assertEquals((-2146885461), (int)confirmOrderResult0.getMemberIntegration());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_19()  throws Throwable  {
      //caseID:ca925be0d71f5fc96f3e74caa1e1a182
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 131, 132, 136, 139, 613, 614, 617, 626, 686, 687, 688, 689, 691, 721, 726]
      //Input_0_OrderParam: {getCouponId=1191 1191, getCartIds=stack0, getUseIntegration=1191 (Integer) null}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<CartPromotionItem> linkedList0 = new LinkedList<CartPromotionItem>();
      Integer integer0 = new Integer(1191);
      Long long0 = new Long(1191);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      LinkedList<SmsCouponHistoryDetail> linkedList1 = new LinkedList<SmsCouponHistoryDetail>();
      Long long1 = new Long(234L);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(smsCoupon0).getId();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      linkedList1.add(smsCouponHistoryDetail0);
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(umsMemberCouponService0).listCart(ArgumentMatchers.<com.macro.mall.portal.domain.CartPromotionItem>anyList() , anyInt());
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      //mock smsCoupon1
      SmsCoupon smsCoupon1 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCoupon1).getId();
      //mock smsCoupon2
      SmsCoupon smsCoupon2 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer0).when(smsCoupon2).getUseType();
      //mock smsCouponHistoryDetail1
      SmsCouponHistoryDetail smsCouponHistoryDetail1 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("rj:2%G#3<x7B/X;").when(smsCouponHistoryDetail1).toString();
      doReturn(smsCoupon1, smsCoupon2).when(smsCouponHistoryDetail1).getCoupon();
      
      linkedList1.add(smsCouponHistoryDetail1);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      Stack<Long> stack0 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      doReturn(long0, long0).when(orderParam0).getCouponId();
      doReturn(integer0, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_20()  throws Throwable  {
      //caseID:34788dd8a80bc4706b2c76b32fa7f992
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 228, 231, 232, 233, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435, 453, 454, 457, 464, 465, 468, 479, 494, 502, 508, 509, 513, 514, 517, 525, 526, 527, 528, 529, 530, 563, 564, 569, 699, 700, 703, 710, 715, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null (Long) null 9223372036854775807L (Long) null, getPayType=(-1), getCartIds=linkedList0, getMemberReceiveAddressId=9223372036854775807L, getUseIntegration=(Integer) null (Integer) null (-1) (-1) (Integer) null}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(9223372036854775807L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1900).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Stack<OmsOrderSetting> stack0 = new Stack<OmsOrderSetting>();
      Integer integer0 = new Integer((-1));
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getConfirmOvertime();
      
      stack0.add(omsOrderSetting0);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(6).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("%06d").when(umsMemberReceiveAddress0).getCity();
      doReturn("%06d").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E").when(umsMemberReceiveAddress0).getName();
      doReturn("context").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("UsV,yNfPSK)$n").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01").when(umsMemberReceiveAddress0).getProvince();
      doReturn(";").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      doReturn("whenSourceFactory").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(orderParam0).getCartIds();
      doReturn((Long) null, (Long) null, long0, (Long) null).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn((Integer) null, (Integer) null, integer0, integer0, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_21()  throws Throwable  {
      //caseID:d3378781ee10e3260c7ad818b620939e
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 139, 141, 142, 143, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 496, 497, 498, 499, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 517, 525, 526, 527, 528, 529, 530, 537, 538, 539, 540, 542, 543, 550, 551, 552, 553, 555, 556, 563, 564, 565, 566, 568, 569, 699, 700, 701, 702, 703, 710, 711, 712, 713, 714, 715, 721, 722, 725, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 1L 1L 1L 1L, getPayType=100, getCartIds=vector0, getMemberReceiveAddressId=1L, getUseIntegration=100 0 100 (Integer) null 100 100 (Integer) null}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      LinkedList<OmsOrderSetting> linkedList0 = new LinkedList<OmsOrderSetting>();
      Integer integer0 = new Integer(100);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getConfirmOvertime();
      
      linkedList0.add(omsOrderSetting0);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsSkuStock0).when(pmsSkuStockMapper0).selectByPrimaryKey(anyLong());
      doReturn(1254).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      ArrayList<SmsCouponHistory> arrayList0 = new ArrayList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(2143).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(6).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList1 = new ArrayList<CartPromotionItem>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Integer integer1 = new Integer(0);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn("E").when(cartPromotionItem0).getProductAttr();
      doReturn(";;").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("\u5C0D").when(cartPromotionItem0).getProductName();
      doReturn("2").when(cartPromotionItem0).getProductPic();
      doReturn("GlPSo>M-|nM0m&yzyI").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0, long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("100").when(cartPromotionItem0).getProductSn();
      doReturn(integer0, integer0).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer1).when(cartPromotionItem0).getIntegration();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer0).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList1.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("P").when(umsMemberReceiveAddress0).getCity();
      doReturn("").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getName();
      doReturn("1000").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("\u8BE5\u4F18\u60E0\u5238\u4E0D\u53EF\u7528").when(umsMemberReceiveAddress0).getProvince();
      doReturn("order").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      doReturn("Mx<|wv*.,").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      Vector<Long> vector0 = new Vector<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, long0, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn(integer0, integer1, integer0, (Integer) null, integer0, integer0, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_22()  throws Throwable  {
      //caseID:c96ae8fec2d6c2eaea3b786977544b1e
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 131, 132, 133, 686, 687, 688, 691, 692, 721, 726]
      //Input_0_OrderParam: {getCouponId=1138L 1138L, getCartIds=stack1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<CartPromotionItem> stack0 = new Stack<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Vector<SmsCouponHistoryDetail> vector0 = new Vector<SmsCouponHistoryDetail>();
      Long long0 = new Long(811L);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCoupon0).getId();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      vector0.add(smsCouponHistoryDetail0);
      //mock umsMemberCouponService0
      UmsMemberCouponService umsMemberCouponService0 = mock(UmsMemberCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsMemberCouponService0).listCart(ArgumentMatchers.<com.macro.mall.portal.domain.CartPromotionItem>anyList() , anyInt());
      Long long1 = new Long(1138L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberCouponService", (Object) umsMemberCouponService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      Stack<Long> stack1 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack1).when(orderParam0).getCartIds();
      doReturn(long1, long1).when(orderParam0).getCouponId();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u8BE5\u4F18\u60E0\u5238\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_23()  throws Throwable  {
      //caseID:16e9e338a4fdeab9e0fac839963b17ea
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 146, 147, 148, 149, 581, 583, 588, 589, 594, 598, 599, 600, 601, 699, 700, 703, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null (Long) null, getCartIds=stack0, getUseIntegration=2 2 2}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(2);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getMaxPercentPerOrder();
      doReturn(integer0, integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      LinkedList<CartPromotionItem> linkedList0 = new LinkedList<CartPromotionItem>();
      Long long0 = new Long(1495L);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(orderParam0).getCartIds();
      doReturn((Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(integer0, integer0, integer0).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u79EF\u5206\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_24()  throws Throwable  {
      //caseID:49b1c71d74f75749d0ebac061869401a
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 721, 722, 723]
      //Input_0_OrderParam: {getCartIds=linkedList0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<CartPromotionItem> stack0 = new Stack<CartPromotionItem>();
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      Long long0 = new Long(309L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(orderParam0).getCartIds();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E93\u5B58\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u4E0B\u5355", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_25()  throws Throwable  {
      //caseID:8fa4b55fc91093de2571d8bee28180ca
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 139, 146, 147, 148, 149, 581, 583, 584, 699, 700, 701, 702, 703, 721, 722, 725, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null (Long) null, getCartIds=linkedList0, getUseIntegration=4440 4440 4440}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<CartPromotionItem> stack0 = new Stack<CartPromotionItem>();
      BigDecimal bigDecimal0 = new BigDecimal(3678);
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(4440);
      Long long0 = new Long(1489L);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(cartPromotionItem0).getPrice();
      doReturn("\u79EF\u5206\u4E0D\u53EF\u7528").when(cartPromotionItem0).getProductAttr();
      doReturn("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("2").when(cartPromotionItem0).getProductName();
      doReturn("`[UPVozL'fw'Y~{!").when(cartPromotionItem0).getProductPic();
      doReturn("m>+[=qr t].eg<QBvGl").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("04").when(cartPromotionItem0).getProductSn();
      doReturn(integer1).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer1).when(cartPromotionItem0).getIntegration();
      doReturn("3").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer1).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      stack0.add(cartPromotionItem0);
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsCartItemService0).listPromotion(nullable(java.lang.Long.class) , nullable(java.util.List.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      doReturn(integer0).when(umsMember0).getIntegration();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(orderParam0).getCartIds();
      doReturn((Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(integer1, integer1, integer1).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      // Undeclared exception!
      try { 
        omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u79EF\u5206\u4E0D\u53EF\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_generateOrder_26()  throws Throwable  {
      //caseID:b1c404c3916a11dc81171757be5a5ab9
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 231, 236, 238, 239, 240, 241, 242, 326, 327, 329, 330, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 446, 447, 453, 454, 457, 464, 465, 468, 494, 502, 508, 509, 513, 514, 517, 525, 526, 527, 528, 529, 530, 537, 538, 543, 550, 551, 556, 563, 564, 569, 699, 700, 703, 710, 715, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 1123L (Long) null (Long) null, getPayType=1, getCartIds=linkedList1, getMemberReceiveAddressId=1123L, getUseIntegration=(Integer) null 1 (Integer) null (Integer) null}
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(1123L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1726).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(1);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      LinkedList<OmsOrderSetting> linkedList0 = new LinkedList<OmsOrderSetting>();
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      linkedList0.add(omsOrderSetting1);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(6).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("%02d").when(umsMemberReceiveAddress0).getCity();
      doReturn("l\"*;H[`C`Y6/QptLdSY").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("create_time desc").when(umsMemberReceiveAddress0).getName();
      doReturn("X6l9P[M6DE}@\"Pq,JRR").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("size").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("-3").when(umsMemberReceiveAddress0).getProvince();
      doReturn("").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(umsMember0).getId();
      doReturn(";").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, (Long) null, (Long) null).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn((Integer) null, integer0, (Integer) null, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_27()  throws Throwable  {
      //caseID:c1fc08087716f804b34f7d9bfe175d63
      //CoveredLines: [33, 95, 97, 98, 99, 120, 124, 126, 139, 141, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 179, 180, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 225, 227, 228, 231, 236, 238, 239, 240, 241, 242, 326, 327, 329, 330, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 446, 447, 453, 454, 457, 464, 465, 468, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 502, 508, 509, 513, 514, 517, 525, 526, 527, 528, 529, 530, 537, 538, 543, 550, 551, 556, 563, 564, 569, 699, 700, 703, 710, 715, 721, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 0L 0L 0L 0L, getPayType=125, getCartIds=linkedList2, getMemberReceiveAddressId=0L, getUseIntegration=(Integer) null 125 (Integer) null (Integer) null}
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(0L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(125);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      LinkedList<OmsOrderSetting> linkedList0 = new LinkedList<OmsOrderSetting>();
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      linkedList0.add(omsOrderSetting1);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      LinkedList<SmsCouponHistory> linkedList1 = new LinkedList<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList1.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(2).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(42).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2062).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(umsMemberReceiveAddress0).getCity();
      doReturn(" Mopfa'CCY.-W").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("reactor.core.publisher.FluxCallable").when(umsMemberReceiveAddress0).getName();
      doReturn("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("Qb&5j\"L_6b").when(umsMemberReceiveAddress0).getPostCode();
      doReturn("FluxSwitchOnFirst allows only one Subscriber").when(umsMemberReceiveAddress0).getProvince();
      doReturn("integration_amount >=").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(";").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList2).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, long0, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer0).when(orderParam0).getPayType();
      doReturn((Integer) null, integer0, (Integer) null, (Integer) null).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_28()  throws Throwable  {
      //caseID:44e24454b25345ee8b431ef97d1bf18e
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 139, 146, 147, 148, 152, 153, 154, 155, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 326, 327, 329, 330, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 479, 481, 482, 483, 484, 485, 491, 494, 496, 497, 498, 499, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 517, 525, 526, 527, 528, 529, 530, 563, 564, 565, 566, 568, 569, 581, 583, 588, 589, 594, 598, 599, 600, 603, 699, 700, 701, 702, 703, 710, 711, 712, 713, 714, 715, 721, 722, 725, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 93L (Long) null 93L 93L, getPayType=402, getCartIds=linkedList0, getMemberReceiveAddressId=93L, getUseIntegration=4 4 4 (Integer) null 402 4 4}
      //Assert: assertEquals(2, method_result.size());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(93L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1753).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(4);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      Vector<OmsOrderSetting> vector0 = new Vector<OmsOrderSetting>();
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      vector0.add(omsOrderSetting1);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsSkuStock0).when(pmsSkuStockMapper0).selectByPrimaryKey(anyLong());
      doReturn(60).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      Vector<SmsCouponHistory> vector1 = new Vector<SmsCouponHistory>();
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      Integer integer1 = new Integer(402);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1).when(umsIntegrationConsumeSetting0).getCouponStatus();
      doReturn(integer1).when(umsIntegrationConsumeSetting0).getMaxPercentPerOrder();
      doReturn(integer0, integer1).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(431).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("100").when(umsMemberReceiveAddress0).getCity();
      doReturn("No valid credentials provided").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getName();
      doReturn("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("100").when(umsMemberReceiveAddress0).getPostCode();
      doReturn(":!dalUxP#,2jQ46n#x").when(umsMemberReceiveAddress0).getProvince();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(cartPromotionItem0).getId();
      doReturn(bigDecimal1).when(cartPromotionItem0).getPrice();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(cartPromotionItem0).getProductAttr();
      doReturn("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("2").when(cartPromotionItem0).getProductName();
      doReturn("No valid credentials provided").when(cartPromotionItem0).getProductPic();
      doReturn("6").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0, long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("1000").when(cartPromotionItem0).getProductSn();
      doReturn(integer1, integer0).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer1).when(cartPromotionItem0).getIntegration();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer0).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList0.add(cartPromotionItem0);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer0, integer0).when(umsMember0).getIntegration();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer2 = new Integer(4);
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, (Long) null, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer1).when(orderParam0).getPayType();
      doReturn(integer0, integer0, integer2, (Integer) null, integer1, integer0, integer0).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test_generateOrder_29()  throws Throwable  {
      //caseID:c6a0e466582e2c7336c9efdd79a53a49
      //CoveredLines: [33, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 139, 146, 147, 148, 152, 153, 154, 155, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 182, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 236, 238, 239, 240, 241, 242, 326, 327, 329, 330, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 496, 497, 498, 499, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 517, 525, 526, 527, 528, 529, 530, 563, 564, 565, 566, 568, 569, 581, 583, 588, 589, 594, 598, 599, 600, 603, 699, 700, 701, 702, 703, 710, 711, 712, 713, 714, 715, 721, 722, 725, 726]
      //Input_0_OrderParam: {getCouponId=(Long) null 93L (Long) null 93L 93L, getPayType=402, getCartIds=linkedList0, getMemberReceiveAddressId=93L, getUseIntegration=2 2 4 (Integer) null 4 402 2}
      //Assert: assertEquals(2, method_result.size());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(93L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).incr(anyString() , anyLong());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1753).when(omsOrderMapper0).insert(any(com.macro.mall.model.OmsOrder.class));
      Integer integer0 = new Integer(4);
      //mock omsOrderSetting0
      OmsOrderSetting omsOrderSetting0 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting0).getNormalOrderOvertime();
      Vector<OmsOrderSetting> vector0 = new Vector<OmsOrderSetting>();
      //mock omsOrderSetting1
      OmsOrderSetting omsOrderSetting1 = mock(OmsOrderSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderSetting1).getConfirmOvertime();
      
      vector0.add(omsOrderSetting1);
      //mock omsOrderSettingMapper0
      OmsOrderSettingMapper omsOrderSettingMapper0 = mock(OmsOrderSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderSettingMapper0).selectByExample(any(com.macro.mall.model.OmsOrderSettingExample.class));
      doReturn(omsOrderSetting0).when(omsOrderSettingMapper0).selectByPrimaryKey(anyLong());
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      //mock pmsSkuStock1
      PmsSkuStock pmsSkuStock1 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsSkuStock1).getLockStock();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsSkuStock0, pmsSkuStock1).when(pmsSkuStockMapper0).selectByPrimaryKey(anyLong());
      doReturn(1, (-2146724817)).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      Vector<SmsCouponHistory> vector1 = new Vector<SmsCouponHistory>();
      //mock smsCouponHistory0
      SmsCouponHistory smsCouponHistory0 = mock(SmsCouponHistory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector1.add(smsCouponHistory0);
      //mock smsCouponHistoryMapper0
      SmsCouponHistoryMapper smsCouponHistoryMapper0 = mock(SmsCouponHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(smsCouponHistoryMapper0).selectByExample(any(com.macro.mall.model.SmsCouponHistoryExample.class));
      doReturn(60).when(smsCouponHistoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsCouponHistory.class));
      Integer integer1 = new Integer(402);
      Integer integer2 = new Integer(2);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1).when(umsIntegrationConsumeSetting0).getCouponStatus();
      doReturn(integer1).when(umsIntegrationConsumeSetting0).getMaxPercentPerOrder();
      doReturn(integer2, integer1).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      //mock cancelOrderSender0
      CancelOrderSender cancelOrderSender0 = mock(CancelOrderSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderItemDao0
      PortalOrderItemDao portalOrderItemDao0 = mock(PortalOrderItemDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(portalOrderItemDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderItem>anyList());
      ArrayList<CartPromotionItem> arrayList0 = new ArrayList<CartPromotionItem>();
      //mock omsCartItemService0
      OmsCartItemService omsCartItemService0 = mock(OmsCartItemService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(431).when(omsCartItemService0).delete(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      doReturn(arrayList0).when(omsCartItemService0).listPromotion(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      //mock umsMemberReceiveAddress0
      UmsMemberReceiveAddress umsMemberReceiveAddress0 = mock(UmsMemberReceiveAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("100").when(umsMemberReceiveAddress0).getCity();
      doReturn("No valid credentials provided").when(umsMemberReceiveAddress0).getDetailAddress();
      doReturn("\u4E0D\u80FD\u5220\u9664\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getName();
      doReturn("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E").when(umsMemberReceiveAddress0).getPhoneNumber();
      doReturn("100").when(umsMemberReceiveAddress0).getPostCode();
      doReturn(":!dalUxP#,2jQ46n#x").when(umsMemberReceiveAddress0).getProvince();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMemberReceiveAddress0).getRegion();
      //mock umsMemberReceiveAddressService0
      UmsMemberReceiveAddressService umsMemberReceiveAddressService0 = mock(UmsMemberReceiveAddressService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMemberReceiveAddress0).when(umsMemberReceiveAddressService0).getItem(nullable(java.lang.Long.class));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(cartPromotionItem0).getId();
      doReturn(bigDecimal1).when(cartPromotionItem0).getPrice();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(cartPromotionItem0).getProductAttr();
      doReturn("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01").when(cartPromotionItem0).getProductBrand();
      doReturn(long0).when(cartPromotionItem0).getProductCategoryId();
      doReturn(long0).when(cartPromotionItem0).getProductId();
      doReturn("2").when(cartPromotionItem0).getProductName();
      doReturn("-1952257860").when(cartPromotionItem0).getProductPic();
      doReturn("Handler map must not be empty").when(cartPromotionItem0).getProductSkuCode();
      doReturn(long0, long0).when(cartPromotionItem0).getProductSkuId();
      doReturn("1000").when(cartPromotionItem0).getProductSn();
      doReturn(integer2, integer0).when(cartPromotionItem0).getQuantity();
      doReturn(integer0).when(cartPromotionItem0).getGrowth();
      doReturn(integer0).when(cartPromotionItem0).getIntegration();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(cartPromotionItem0).getPromotionMessage();
      doReturn(integer0, integer0).when(cartPromotionItem0).getRealStock();
      doReturn(bigDecimal0).when(cartPromotionItem0).getReduceAmount();
      
      arrayList0.add(cartPromotionItem0);
      Integer integer3 = new Integer(14);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0, long0).when(umsMember0).getId();
      doReturn(integer3, integer0).when(umsMember0).getIntegration();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(umsMember0).getUsername();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberReceiveAddressService", (Object) umsMemberReceiveAddressService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cartItemService", (Object) omsCartItemService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemDao", (Object) portalOrderItemDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "cancelOrderSender", (Object) cancelOrderSender0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "couponHistoryMapper", (Object) smsCouponHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderSettingMapper", (Object) omsOrderSettingMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer4 = new Integer(4);
      //mock orderParam0
      OrderParam orderParam0 = mock(OrderParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(orderParam0).getCartIds();
      doReturn((Long) null, long0, (Long) null, long0, long0).when(orderParam0).getCouponId();
      doReturn(long0).when(orderParam0).getMemberReceiveAddressId();
      doReturn(integer1).when(orderParam0).getPayType();
      doReturn(integer2, integer2, integer4, (Integer) null, integer4, integer1, integer2).when(orderParam0).getUseIntegration();
      
      //Call method: generateOrder
      Map<String, Object> map0 = omsPortalOrderServiceImpl0.generateOrder(orderParam0);
      
      //Test Result Assert
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test_getCouponOrderItemByRelation_30()  throws Throwable  {
      //caseID:d836cc5ca6dbf51e68d00d72fed6a765
      //CoveredLines: [33, 650, 651, 676]
      //Input_0_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {}
      //Input_1_List<com.macro.mall.model.OmsOrderItem>: stack0
      //Input_2_int: 2
      //Assert: assertTrue(method_result.isEmpty());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();
      
      //Call method: getCouponOrderItemByRelation
      List<OmsOrderItem> list0 = (List<OmsOrderItem>)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getCouponOrderItemByRelation", (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class, (Object) stack0, (Class<?>) List.class, (Object) 2, (Class<?>) int.class);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getUseIntegrationAmount_31()  throws Throwable  {
      //caseID:03977d68b473c6fa2008d8d3d64f76e5
      //CoveredLines: [33, 581, 583, 588, 589, 591]
      //Input_0_Integer: 0
      //Input_1_BigDecimal: BigDecimal.ZERO
      //Input_2_com.macro.mall.model.UmsMember: {getIntegration=0}
      //Input_3_boolean: true
      //Assert: assertEquals((short)0, method_result.shortValue());
      //Assert: assertNotSame(method_result, bigDecimal0);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(0);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getCouponStatus();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMember0).getIntegration();
      
      //Call method: getUseIntegrationAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getUseIntegrationAmount", (Object) integer0, (Class<?>) Integer.class, (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) umsMember0, (Class<?>) UmsMember.class, (Object) true, (Class<?>) boolean.class);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal1.shortValue());
      
      //Test Result Assert
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test_getUseIntegrationAmount_32()  throws Throwable  {
      //caseID:451481784e60a65220e578d99cd87f4a
      //CoveredLines: [33, 581, 583, 588, 589, 594, 595]
      //Input_0_Integer: 0
      //Input_1_BigDecimal: BigDecimal.ZERO
      //Input_2_com.macro.mall.model.UmsMember: {getIntegration=0}
      //Input_3_boolean: false
      //Assert: assertNotSame(method_result, bigDecimal0);
      //Assert: assertEquals((short)0, method_result.shortValue());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Integer integer0 = new Integer(476);
      //mock umsIntegrationConsumeSetting0
      UmsIntegrationConsumeSetting umsIntegrationConsumeSetting0 = mock(UmsIntegrationConsumeSetting.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsIntegrationConsumeSetting0).getUseUnit();
      //mock umsIntegrationConsumeSettingMapper0
      UmsIntegrationConsumeSettingMapper umsIntegrationConsumeSettingMapper0 = mock(UmsIntegrationConsumeSettingMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsIntegrationConsumeSetting0).when(umsIntegrationConsumeSettingMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "integrationConsumeSettingMapper", (Object) umsIntegrationConsumeSettingMapper0);
      Integer integer1 = new Integer(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1).when(umsMember0).getIntegration();
      
      //Call method: getUseIntegrationAmount
      BigDecimal bigDecimal1 = (BigDecimal)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "getUseIntegrationAmount", (Object) integer1, (Class<?>) Integer.class, (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) umsMember0, (Class<?>) UmsMember.class, (Object) false, (Class<?>) boolean.class);
      
      //Test Result Assert
      assertNotSame(bigDecimal1, bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_33()  throws Throwable  {
      //caseID:17b03ba2f6c24131be7a6b27ff2bbf56
      //CoveredLines: [33, 613, 614, 616, 626, 634, 635, 637, 638, 639, 640, 699, 700, 701, 702, 703]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: arrayList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      Integer integer0 = new Integer(1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getProductPrice();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      
      arrayList0.add(omsOrderItem0);
      Integer integer1 = new Integer(0);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(smsCoupon0).getAmount();
      doReturn(integer1).when(smsCoupon0).getUseType();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) arrayList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_34()  throws Throwable  {
      //caseID:ad0631c6e849903c8bf4e35ae8ece4dc
      //CoveredLines: [33, 613, 614, 617, 619, 620, 621, 626, 634, 635, 640, 650, 651, 652, 653, 656, 657, 660, 662, 663, 676, 699, 700, 703]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: arrayList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getCategoryRelationList=arrayList1}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(omsOrderItem0);
      Integer integer0 = new Integer(1);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(smsCoupon0).getUseType();
      ArrayList<SmsCouponProductCategoryRelation> arrayList1 = new ArrayList<SmsCouponProductCategoryRelation>();
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(smsCouponHistoryDetail0).getCategoryRelationList();
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      
      //Call method: handleCouponAmount
      PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) arrayList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      
      //Test Result Assert
      assertTrue(arrayList0.contains(omsOrderItem0));
  }

  @Test(timeout = 4000)
  public void test_handleCouponAmount_35()  throws Throwable  {
      //caseID:ab471e8b9216189635025708d288c9e7
      //CoveredLines: [33, 613, 614, 617, 623, 624, 634, 635, 637, 650, 651, 664, 665, 666, 667, 668, 669, 670, 674, 676, 699, 700, 701, 702, 703]
      //Input_0_List<com.macro.mall.model.OmsOrderItem>: arrayList0
      //Input_1_com.macro.mall.portal.domain.SmsCouponHistoryDetail: {getCoupon=smsCoupon0, getProductRelationList=vector0}
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      ArrayList<OmsOrderItem> arrayList0 = new ArrayList<OmsOrderItem>();
      Integer integer0 = new Integer(6);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Long long0 = new Long(2217L);
      //mock omsOrderItem0
      OmsOrderItem omsOrderItem0 = mock(OmsOrderItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderItem0).getProductId();
      doReturn(bigDecimal0, bigDecimal0).when(omsOrderItem0).getProductPrice();
      doReturn(integer0).when(omsOrderItem0).getProductQuantity();
      doReturn("1").when(omsOrderItem0).toString();
      
      arrayList0.add(omsOrderItem0);
      Integer integer1 = new Integer(2);
      //mock smsCoupon0
      SmsCoupon smsCoupon0 = mock(SmsCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1, integer1, integer1).when(smsCoupon0).getUseType();
      Vector<SmsCouponProductRelation> vector0 = new Vector<SmsCouponProductRelation>();
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(smsCouponProductRelation0).getProductId();
      
      vector0.add(smsCouponProductRelation0);
      //mock smsCouponHistoryDetail0
      SmsCouponHistoryDetail smsCouponHistoryDetail0 = mock(SmsCouponHistoryDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCoupon0).when(smsCouponHistoryDetail0).getCoupon();
      doReturn(vector0).when(smsCouponHistoryDetail0).getProductRelationList();
      
      //Call method: handleCouponAmount
      try { 
        PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "handleCouponAmount", (Object) arrayList0, (Class<?>) List.class, (Object) smsCouponHistoryDetail0, (Class<?>) SmsCouponHistoryDetail.class);
      } catch(Throwable e) {
         verifyException("java.math.BigDecimal", e);
         assertEquals("java.lang.ArithmeticException", e.getClass().getName());
         assertEquals("/ by zero", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_hasStock_36()  throws Throwable  {
      //caseID:5ab2f77977afbc885548073875e8e029
      //CoveredLines: [33, 721, 722, 723]
      //Input_0_List<com.macro.mall.portal.domain.CartPromotionItem>: linkedList0
      //Assert: assertFalse(method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<CartPromotionItem> linkedList0 = new LinkedList<CartPromotionItem>();
      Integer integer0 = new Integer(0);
      //mock cartPromotionItem0
      CartPromotionItem cartPromotionItem0 = mock(CartPromotionItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(cartPromotionItem0).getRealStock();
      
      linkedList0.add(cartPromotionItem0);
      
      //Call method: hasStock
      boolean boolean0 = (boolean)PrivateAccess.callMethod((Class<OmsPortalOrderServiceImpl>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "hasStock", (Object) linkedList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_list_37()  throws Throwable  {
      //caseID:e68cd052b80496ba8d4b68400f911479
      //CoveredLines: [33, 350, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372]
      //Input_0_Integer: 1730
      //Input_1_Integer: 1730
      //Input_2_Integer: 1730
      //Assert: assertEquals(0L, (long)method_result.getTotal());
      //Assert: assertEquals(1, (int)method_result.getPageNum());
      //Assert: assertEquals(0, (int)method_result.getTotalPage());
      //Assert: assertEquals(0, (int)method_result.getPageSize());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Stack<OmsOrder> stack0 = new Stack<OmsOrder>();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      Long long0 = new Long(1260L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Integer integer0 = new Integer(1730);
      
      //Call method: list
      CommonPage<OmsOrderDetail> commonPage0 = omsPortalOrderServiceImpl0.list(integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0L, (long)commonPage0.getTotal());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageNum());
      
      //Test Result Assert
      assertEquals(0, (int)commonPage0.getTotalPage());
      
      //Test Result Assert
      assertEquals(0, (int)commonPage0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test_list_38()  throws Throwable  {
      //caseID:5aa9d97af253b7bf14ca5a5d6143c223
      //CoveredLines: [33, 350, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 383, 384, 385, 386, 387, 388]
      //Input_0_Integer: 20
      //Input_1_Integer: 20
      //Input_2_Integer: 20
      //Assert: assertEquals(1, (int)method_result.getPageNum());
      //Assert: assertEquals(1, (int)method_result.getTotalPage());
      //Assert: assertEquals(1L, (long)method_result.getTotal());
      //Assert: assertEquals(1, (int)method_result.getPageSize());
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      LinkedList<OmsOrderItem> linkedList0 = new LinkedList<OmsOrderItem>();
      //mock omsOrderItemMapper0
      OmsOrderItemMapper omsOrderItemMapper0 = mock(OmsOrderItemMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderItemMapper0).selectByExample(any(com.macro.mall.model.OmsOrderItemExample.class));
      Vector<OmsOrder> vector0 = new Vector<OmsOrder>();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(omsOrderMapper0).selectByExample(any(com.macro.mall.model.OmsOrderExample.class));
      Long long0 = new Long(1260L);
      //mock umsMember0
      UmsMember umsMember0 = mock(UmsMember.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMember0).getId();
      //mock umsMemberService0
      UmsMemberService umsMemberService0 = mock(UmsMemberService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMember0).when(umsMemberService0).getCurrentMember();
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "memberService", (Object) umsMemberService0);
      Integer integer0 = new Integer(20);
      BigDecimal bigDecimal0 = new BigDecimal((long) 20);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date2
      Date date2 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date3
      Date date3 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date4
      Date date4 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date5
      Date date5 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrder0
      OmsOrder omsOrder0 = mock(OmsOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrder0).getAutoConfirmDay();
      doReturn("2").when(omsOrder0).getBillContent();
      doReturn(", confirmOvertime=").when(omsOrder0).getBillHeader();
      doReturn("READ").when(omsOrder0).getBillReceiverEmail();
      doReturn("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01").when(omsOrder0).getBillReceiverPhone();
      doReturn((Integer) null).when(omsOrder0).getBillType();
      doReturn(date5).when(omsOrder0).getCommentTime();
      doReturn((Integer) null).when(omsOrder0).getConfirmStatus();
      doReturn(bigDecimal0).when(omsOrder0).getCouponAmount();
      doReturn(long0).when(omsOrder0).getCouponId();
      doReturn(date4).when(omsOrder0).getCreateTime();
      doReturn(integer0).when(omsOrder0).getDeleteStatus();
      doReturn("1").when(omsOrder0).getDeliveryCompany();
      doReturn("66").when(omsOrder0).getDeliverySn();
      doReturn(date3).when(omsOrder0).getDeliveryTime();
      doReturn(bigDecimal0).when(omsOrder0).getDiscountAmount();
      doReturn(bigDecimal0).when(omsOrder0).getFreightAmount();
      doReturn((Integer) null).when(omsOrder0).getGrowth();
      doReturn(long0, long0).when(omsOrder0).getId();
      doReturn((Integer) null).when(omsOrder0).getIntegration();
      doReturn(bigDecimal0).when(omsOrder0).getIntegrationAmount();
      doReturn(long0).when(omsOrder0).getMemberId();
      doReturn("create_time desc").when(omsOrder0).getMemberUsername();
      doReturn(date2).when(omsOrder0).getModifyTime();
      doReturn("4").when(omsOrder0).getNote();
      doReturn("null;1.0;;").when(omsOrder0).getOrderSn();
      doReturn((Integer) null).when(omsOrder0).getOrderType();
      doReturn(bigDecimal0).when(omsOrder0).getPayAmount();
      doReturn(integer0).when(omsOrder0).getPayType();
      doReturn(date1).when(omsOrder0).getPaymentTime();
      doReturn(bigDecimal0).when(omsOrder0).getPromotionAmount();
      doReturn("orderItemList").when(omsOrder0).getPromotionInfo();
      doReturn(date0).when(omsOrder0).getReceiveTime();
      doReturn("\u53EA\u80FD\u5220\u9664\u5DF2\u5B8C\u6210\u6216\u5DF2\u5173\u95ED\u7684\u8BA2\u5355\uFF01").when(omsOrder0).getReceiverCity();
      doReturn("\u8BE5\u8BA2\u5355\u8FD8\u672A\u53D1\u8D27\uFF01").when(omsOrder0).getReceiverDetailAddress();
      doReturn("Token had invalid integrity check;;").when(omsOrder0).getReceiverName();
      doReturn("E0nuZ#=").when(omsOrder0).getReceiverPhone();
      doReturn("\u4E0D\u80FD\u786E\u8BA4\u4ED6\u4EBA\u8BA2\u5355\uFF01").when(omsOrder0).getReceiverPostCode();
      doReturn("yyyyMMdd").when(omsOrder0).getReceiverProvince();
      doReturn("").when(omsOrder0).getReceiverRegion();
      doReturn((Integer) null).when(omsOrder0).getSourceType();
      doReturn(integer0).when(omsOrder0).getStatus();
      doReturn(bigDecimal0).when(omsOrder0).getTotalAmount();
      doReturn(integer0).when(omsOrder0).getUseIntegration();
      
      vector0.add(omsOrder0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderItemMapper", (Object) omsOrderItemMapper0);
      
      //Call method: list
      CommonPage<OmsOrderDetail> commonPage0 = omsPortalOrderServiceImpl0.list(integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageNum());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getTotalPage());
      
      //Test Result Assert
      assertEquals(1L, (long)commonPage0.getTotal());
      
      //Test Result Assert
      assertEquals(1, (int)commonPage0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test_paySuccess_39()  throws Throwable  {
      //caseID:ea385d6de0b9fa98f66d1e4f163db537
      //CoveredLines: [33, 247, 248]
      //Input_0_Long: (-70L)
      //Input_1_Integer: (-1)
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long((-70L));
      Integer integer0 = new Integer((-1));
      
      //Call method: paySuccess
      try { 
        omsPortalOrderServiceImpl0.paySuccess(long0, integer0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockException", e.getClass().getName());
         assertEquals("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_paySuccess_40()  throws Throwable  {
      //caseID:aa75572a19b2834cf6015bfc1325109d
      //CoveredLines: [33, 247, 248]
      //Input_0_Long: 935L
      //Input_1_Integer: 205
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      Long long0 = new Long(935L);
      Integer integer0 = new Integer(205);
      
      //Call method: paySuccess
      try { 
        omsPortalOrderServiceImpl0.paySuccess(long0, integer0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPortalOrderServiceImpl", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockException", e.getClass().getName());
         assertEquals("\u652F\u4ED8\u72B6\u6001\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_paySuccess_41()  throws Throwable  {
      //caseID:bc0c220398a5fed72396708a14533943
      //CoveredLines: [33, 247, 251, 252, 253, 254, 255, 256, 258, 259, 260]
      //Input_0_Long: 366L
      //Input_1_Integer: 1
      //Assert: assertEquals(0, (int)method_result);
      
      OmsPortalOrderServiceImpl omsPortalOrderServiceImpl0 = new OmsPortalOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(425).when(omsOrderMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.OmsOrder.class));
      //mock omsOrderDetail0
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock portalOrderDao0
      PortalOrderDao portalOrderDao0 = mock(PortalOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderDetail0).when(portalOrderDao0).getDetail(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "portalOrderDao", (Object) portalOrderDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsPortalOrderServiceImpl.class, omsPortalOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(366L);
      Integer integer0 = new Integer(1);
      
      //Call method: paySuccess
      Integer integer1 = omsPortalOrderServiceImpl0.paySuccess(long0, integer0);
      
      //Test Result Assert
      assertEquals(0, (int)integer1);
  }
}
