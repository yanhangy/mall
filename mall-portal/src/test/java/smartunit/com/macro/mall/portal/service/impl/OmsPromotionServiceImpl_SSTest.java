/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.model.OmsCartItem;
import com.macro.mall.model.PmsProductFullReduction;
import com.macro.mall.model.PmsProductLadder;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.portal.dao.PortalProductDao;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.domain.PromotionProduct;
import com.macro.mall.portal.service.impl.OmsPromotionServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsPromotionServiceImpl_SSTest extends OmsPromotionServiceImpl_SSTest_scaffolding {
// allCoveredLines:[25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 181, 184, 185, 186, 188, 189, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 215, 218, 219, 220, 222, 223, 230, 231, 232, 233, 234, 241, 242, 244, 245, 246, 247, 248, 255, 256, 257, 259, 260, 267, 268, 269, 271, 272]

  @Test(timeout = 4000)
  public void test_calcCartPromotion_0()  throws Throwable  {
      //caseID:9ffbaca6410d2616e3ac619f7886da47
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 267, 268, 271, 272]
      //Input_0_List<OmsCartItem>: stack1
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long(0L);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(promotionProduct0).getId();
      doReturn("\u5143\uFF0C").when(promotionProduct0).toString();
      
      stack0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("U9mUOL}'[~&^ty").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      Long long1 = new Long(3227L);
      Long long2 = new Long((-1L));
      //mock omsCartItem1
      OmsCartItem omsCartItem1 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1, long2, long1).when(omsCartItem1).getProductId();
      doReturn("Context5{").when(omsCartItem1).toString();
      
      stack1.add(omsCartItem1);
      //mock omsCartItem2
      OmsCartItem omsCartItem2 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(omsCartItem2).getProductId();
      doReturn("\u6253\u6298\u4F18\u60E0\uFF1A").when(omsCartItem2).toString();
      
      stack1.add(omsCartItem2);
      
      //Call method: calcCartPromotion
      // Undeclared exception!
      try { 
        omsPromotionServiceImpl0.calcCartPromotion(stack1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_1()  throws Throwable  {
      //caseID:f7fe617b9d740db4290a564ed14cfa21
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 255, 256, 257, 267, 268, 269, 271]
      //Input_0_List<OmsCartItem>: stack2
      //Assert: assertEquals(1, method_result.size());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Long long0 = new Long((-1L));
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(promotionProduct0).getId();
      doReturn("%s ").when(promotionProduct0).toString();
      
      stack0.add(promotionProduct0);
      Long long1 = new Long(1326L);
      Integer integer0 = new Integer(1);
      BigDecimal bigDecimal0 = new BigDecimal((long) 1);
      Stack<PmsSkuStock> stack1 = new Stack<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPromotionPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("\u6253").when(pmsSkuStock0).toString();
      
      stack1.add(pmsSkuStock0);
      //mock promotionProduct1
      PromotionProduct promotionProduct1 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct1).getGiftGrowth();
      doReturn(integer0).when(promotionProduct1).getGiftPoint();
      doReturn(long1).when(promotionProduct1).getId();
      doReturn(integer0).when(promotionProduct1).getPromotionType();
      doReturn("\u6253", "\u6253").when(promotionProduct1).toString();
      doReturn(stack1).when(promotionProduct1).getSkuStockList();
      
      stack0.add(promotionProduct1);
      Stack<OmsCartItem> stack2 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u6253").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u6253").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long1).when(omsCartItem0).getId();
      doReturn(long1).when(omsCartItem0).getMemberId();
      doReturn("\u6253").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("\u6253").when(omsCartItem0).getProductAttr();
      doReturn("\u6253").when(omsCartItem0).getProductBrand();
      doReturn(long1).when(omsCartItem0).getProductCategoryId();
      doReturn(long1, long1, long1, long1).when(omsCartItem0).getProductId();
      doReturn("\u6253").when(omsCartItem0).getProductName();
      doReturn("\u6253").when(omsCartItem0).getProductPic();
      doReturn("\u6253").when(omsCartItem0).getProductSkuCode();
      doReturn(long1, long1).when(omsCartItem0).getProductSkuId();
      doReturn("\u6253").when(omsCartItem0).getProductSn();
      doReturn("\u6253").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("\u6253").when(omsCartItem0).toString();
      
      stack2.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack2);
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_2()  throws Throwable  {
      //caseID:c041ffe299f72c98ed56695b7dcc4cd4
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 107, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: vector0
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      LinkedList<PromotionProduct> linkedList0 = new LinkedList<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(2763);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("-12").when(pmsSkuStock0).toString();
      
      stack0.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava3SingleToPublisherAdapter", "reactor.core.publisher.FluxBufferWhen").when(promotionProduct0).toString();
      doReturn(stack0).when(promotionProduct0).getSkuStockList();
      
      linkedList0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Vector<OmsCartItem> vector0 = new Vector<OmsCartItem>();
      BigDecimal bigDecimal0 = new BigDecimal(4611.827415066979);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("p>D").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("%2!V;k").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("1.0").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("0").when(omsCartItem0).getProductAttr();
      doReturn("fyHfpzBjg[:3Pm").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("\u51CF").when(omsCartItem0).getProductName();
      doReturn("93").when(omsCartItem0).getProductPic();
      doReturn("org.springframework.data.mapping.PropertyPath").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("236").when(omsCartItem0).getProductSn();
      doReturn("556").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("index").when(omsCartItem0).toString();
      
      vector0.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(vector0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_3()  throws Throwable  {
      //caseID:43ac04c82dee8812a520c0bde9dcf4da
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 61, 62, 63, 80, 82, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 212, 218, 223, 230, 231, 232, 233, 234, 255, 256, 259, 260, 267, 268, 269]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertEquals(2, method_result.size());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      ArrayList<PmsProductLadder> arrayList0 = new ArrayList<PmsProductLadder>();
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      Long long1 = new Long((-1L));
      Long long2 = new Long(0L);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long2, long1).when(pmsSkuStock0).getId();
      
      vector0.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0, integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("\u6253", "JfrQeP~'|M&6A").when(promotionProduct0).toString();
      doReturn(arrayList0).when(promotionProduct0).getProductLadderList();
      doReturn(vector0, vector0).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      Long long3 = new Long((-1L));
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$2").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u4EF6\uFF0C").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long2).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("[%?'P%1wloOYYTjsN").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("\u4EF6\uFF0C").when(omsCartItem0).getProductAttr();
      doReturn("\u5143").when(omsCartItem0).getProductBrand();
      doReturn(long2).when(omsCartItem0).getProductCategoryId();
      doReturn(long2, long2, long2, long2).when(omsCartItem0).getProductId();
      doReturn("-37").when(omsCartItem0).getProductName();
      doReturn("\u6298").when(omsCartItem0).getProductPic();
      doReturn("1").when(omsCartItem0).getProductSkuCode();
      doReturn(long2, long3).when(omsCartItem0).getProductSkuId();
      doReturn("{Vi%T3B&EnIII").when(omsCartItem0).getProductSn();
      doReturn("1.0").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("\u4EF6\uFF0C").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      //mock date2
      Date date2 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("IP&2<zmB=nX{[Mr:0*").when(date2).toString();
      //mock date3
      Date date3 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u65E0\u4F18\u60E0").when(date3).toString();
      //mock omsCartItem1
      OmsCartItem omsCartItem1 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date3).when(omsCartItem1).getCreateDate();
      doReturn(integer0).when(omsCartItem1).getDeleteStatus();
      doReturn(long2).when(omsCartItem1).getId();
      doReturn(long2).when(omsCartItem1).getMemberId();
      doReturn("\u65E0\u4F18\u60E0").when(omsCartItem1).getMemberNickname();
      doReturn(date2).when(omsCartItem1).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem1).getPrice();
      doReturn("reactor.core.publisher.MonoSourceFlux").when(omsCartItem1).getProductAttr();
      doReturn("684").when(omsCartItem1).getProductBrand();
      doReturn(long2).when(omsCartItem1).getProductCategoryId();
      doReturn(long2, long2, long1).when(omsCartItem1).getProductId();
      doReturn("18").when(omsCartItem1).getProductName();
      doReturn("10").when(omsCartItem1).getProductPic();
      doReturn("1.0").when(omsCartItem1).getProductSkuCode();
      doReturn(long2, long2).when(omsCartItem1).getProductSkuId();
      doReturn("1").when(omsCartItem1).getProductSn();
      doReturn("").when(omsCartItem1).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem1).getQuantity();
      doReturn("45").when(omsCartItem1).toString();
      
      stack1.add(omsCartItem1);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_4()  throws Throwable  {
      //caseID:e9b444247a1a10f28066a6aca838c033
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 84, 85, 86, 103, 105, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 184, 185, 188, 189, 241, 242, 244, 245, 246, 247, 248, 255, 256, 257, 259, 267, 268, 269]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertEquals(1, method_result.size());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Long long0 = new Long(20L);
      Integer integer0 = new Integer(4);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      Long long1 = new Long(0L);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1, long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("reactor.core.publisher.FluxSwitchIfEmpty").when(pmsSkuStock0).toString();
      
      vector0.add(pmsSkuStock0);
      //mock pmsSkuStock1
      PmsSkuStock pmsSkuStock1 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock1).getId();
      doReturn(bigDecimal0).when(pmsSkuStock1).getPrice();
      doReturn(", commandType=").when(pmsSkuStock1).toString();
      
      vector0.add(pmsSkuStock1);
      LinkedList<PmsProductFullReduction> linkedList0 = new LinkedList<PmsProductFullReduction>();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal1).when(pmsProductFullReduction0).getFullPrice();
      
      linkedList0.add(pmsProductFullReduction0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0, long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("\u5143", "\u5143", "\u5143").when(promotionProduct0).toString();
      doReturn(linkedList0).when(promotionProduct0).getProductFullReductionList();
      doReturn(vector0, vector0).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.data.domain.AbstractPageRequest").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-5").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long1).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("kP").when(omsCartItem0).getMemberNickname();
      doReturn(date1).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("/lGDLr9,,MLW").when(omsCartItem0).getProductAttr();
      doReturn("").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0, long1).when(omsCartItem0).getProductId();
      doReturn("1.0").when(omsCartItem0).getProductName();
      doReturn("Expected parsing to yield a PropertyPath from %s but got null!").when(omsCartItem0).getProductPic();
      doReturn("\u5143").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("2453").when(omsCartItem0).getProductSn();
      doReturn("3").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("\u5143").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_5()  throws Throwable  {
      //caseID:9651c02f1ab99387657b84b98047f26d
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 218, 219, 220, 230, 231, 232, 233, 234, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertEquals(1, method_result.size());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      LinkedList<PmsProductLadder> linkedList0 = new LinkedList<PmsProductLadder>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(pmsProductLadder0).getCount();
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductLadder0).getDiscount();
      doReturn("\u4EF6\uFF0C").when(pmsProductLadder0).toString();
      LinkedList<PmsSkuStock> linkedList1 = new LinkedList<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("\u4EF6\uFF0C").when(pmsSkuStock0).toString();
      
      linkedList1.add(pmsSkuStock0);
      
      linkedList0.add(pmsProductLadder0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("\u4EF6\uFF0C", "\u4EF6\uFF0C").when(promotionProduct0).toString();
      doReturn(linkedList0).when(promotionProduct0).getProductLadderList();
      doReturn(linkedList1).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u65E0\u4F18\u60E0").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u65E0\u4F18\u60E0").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("\u65E0\u4F18\u60E0").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("\u65E0\u4F18\u60E0").when(omsCartItem0).getProductAttr();
      doReturn("\u65E0\u4F18\u60E0").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("\u65E0\u4F18\u60E0").when(omsCartItem0).getProductName();
      doReturn("\u65E0\u4F18\u60E0").when(omsCartItem0).getProductPic();
      doReturn("\u65E0\u4F18\u60E0").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("\u4EF6\uFF0C").when(omsCartItem0).getProductSn();
      doReturn("\u4EF6\uFF0C").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("\u4EF6\uFF0C").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_6()  throws Throwable  {
      //caseID:e57e1335d15210ea5bffd24c05019927
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 178, 184, 185, 186, 241, 242, 244, 245, 246, 247, 248, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(4);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LinkedList<PmsSkuStock> linkedList0 = new LinkedList<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0, bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("1.0", "1.0").when(pmsSkuStock0).toString();
      
      linkedList0.add(pmsSkuStock0);
      ArrayList<PmsProductFullReduction> arrayList0 = new ArrayList<PmsProductFullReduction>();
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductFullReduction0).getFullPrice();
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductFullReduction0).getReducePrice();
      doReturn("1.0").when(pmsProductFullReduction0).toString();
      
      arrayList0.add(pmsProductFullReduction0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0, long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("1.0", "1.0", "1.0").when(promotionProduct0).toString();
      doReturn(arrayList0).when(promotionProduct0).getProductFullReductionList();
      doReturn(linkedList0, linkedList0).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("1.0").when(omsCartItem0).getMemberNickname();
      doReturn(date1).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("1.0").when(omsCartItem0).getProductAttr();
      doReturn("1.0").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("1.0").when(omsCartItem0).getProductName();
      doReturn("1.0").when(omsCartItem0).getProductPic();
      doReturn("1.0").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("1.0").when(omsCartItem0).getProductSn();
      doReturn("1.0").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("1.0").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getProductFullReduction_7()  throws Throwable  {
      //caseID:c31ddc92a224085b9a05468d854c7db2
      //CoveredLines: [25, 178, 181, 184, 185, 186]
      //Input_0_BigDecimal: BigDecimal.ONE
      //Input_1_List<com.macro.mall.model.PmsProductFullReduction>: stack0
      //Assert: assertNotNull(method_result);
      //Assert: assertNotSame(method_result, pmsProductFullReduction0);
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Stack<PmsProductFullReduction> stack0 = new Stack<PmsProductFullReduction>();
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(pmsProductFullReduction0).getFullPrice();
      //mock pmsProductFullReduction1
      PmsProductFullReduction pmsProductFullReduction1 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(pmsProductFullReduction1).getFullPrice();
      
      stack0.add(pmsProductFullReduction1);
      
      stack0.add(pmsProductFullReduction0);
      
      //Call method: getProductFullReduction
      Object object0 = PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductFullReduction", (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) stack0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNotNull(object0);
      
      //Test Result Assert
      assertNotSame(object0, pmsProductFullReduction0);
  }

  @Test(timeout = 4000)
  public void test_getProductLadder_8()  throws Throwable  {
      //caseID:d759b01dc4b4facad5ba9bc17d159798
      //CoveredLines: [25, 212, 215, 218, 219, 220]
      //Input_0_int: 1567
      //Input_1_List<com.macro.mall.model.PmsProductLadder>: stack0
      //Assert: assertNotNull(method_result);
      //Assert: assertSame(method_result, pmsProductLadder0);
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PmsProductLadder> stack0 = new Stack<PmsProductLadder>();
      Integer integer0 = new Integer(14);
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(pmsProductLadder0).getCount();
      doReturn("\u6253").when(pmsProductLadder0).toString();
      
      stack0.add(pmsProductLadder0);
      //mock pmsProductLadder1
      PmsProductLadder pmsProductLadder1 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsProductLadder1).getCount();
      
      stack0.add(pmsProductLadder1);
      
      //Call method: getProductLadder
      Object object0 = PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductLadder", (Object) 1567, (Class<?>) int.class, (Object) stack0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNotNull(object0);
      
      //Test Result Assert
      assertSame(object0, pmsProductLadder0);
  }

  @Test(timeout = 4000)
  public void test_getProductLadder_9()  throws Throwable  {
      //caseID:f986e05af1b23b24ec2b7ee3297336bd
      //CoveredLines: [25, 212, 218, 219, 222, 223]
      //Input_0_int: 487
      //Input_1_List<com.macro.mall.model.PmsProductLadder>: arrayList0
      //Assert: assertNull(method_result);
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      ArrayList<PmsProductLadder> arrayList0 = new ArrayList<PmsProductLadder>();
      Integer integer0 = new Integer(2244);
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsProductLadder0).getCount();
      
      arrayList0.add(pmsProductLadder0);
      
      //Call method: getProductLadder
      Object object0 = PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductLadder", (Object) 487, (Class<?>) int.class, (Object) arrayList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
