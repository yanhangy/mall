/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.model.OmsCartItem;
import com.macro.mall.model.PmsProductFullReduction;
import com.macro.mall.model.PmsProductLadder;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.portal.dao.PortalProductDao;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.domain.PromotionProduct;
import com.macro.mall.portal.service.impl.OmsPromotionServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsPromotionServiceImpl_SSTest extends OmsPromotionServiceImpl_SSTest_scaffolding {
// allCoveredLines:[25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 181, 184, 185, 186, 188, 189, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 215, 218, 219, 220, 222, 223, 230, 231, 232, 233, 234, 241, 242, 244, 245, 246, 247, 248, 255, 256, 257, 259, 260, 267, 268, 269, 271, 272]

  @Test(timeout = 4000)
  public void test_calcCartPromotion_00()  throws Throwable  {
      //caseID:3854ae20f962b581aaf7089094289548
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 267, 272]
      //Input_0_List<OmsCartItem>: arrayList1
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      ArrayList<PromotionProduct> arrayList0 = new ArrayList<PromotionProduct>();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      ArrayList<OmsCartItem> arrayList1 = new ArrayList<OmsCartItem>();
      Long long0 = new Long(1491L);
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(omsCartItem0).getProductId();
      doReturn("reactor.util.function.Tuple7").when(omsCartItem0).toString();
      //mock omsCartItem1
      OmsCartItem omsCartItem1 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(omsCartItem1).getProductId();
      doReturn("0").when(omsCartItem1).toString();
      
      arrayList1.add(omsCartItem1);
      
      arrayList1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      // Undeclared exception!
      try { 
        omsPromotionServiceImpl0.calcCartPromotion(arrayList1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_01()  throws Throwable  {
      //caseID:e2a122f545989f50ade462821a2d01f5
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 267, 268, 271, 272]
      //Input_0_List<OmsCartItem>: arrayList0
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long(2334L);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(promotionProduct0).getId();
      doReturn("0").when(promotionProduct0).toString();
      
      stack0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      ArrayList<OmsCartItem> arrayList0 = new ArrayList<OmsCartItem>();
      Long long1 = new Long(3191L);
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1, long1, long1).when(omsCartItem0).getProductId();
      doReturn("679").when(omsCartItem0).toString();
      
      arrayList0.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      // Undeclared exception!
      try { 
        omsPromotionServiceImpl0.calcCartPromotion(arrayList0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_02()  throws Throwable  {
      //caseID:1f154f9e75f4624768e69165a78f48a8
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 215, 218, 219, 220, 230, 231, 232, 233, 234, 255, 260, 267, 268, 269]
      //Input_0_List<OmsCartItem>: linkedList1
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long(1L);
      Integer integer0 = new Integer(3);
      Stack<PmsSkuStock> stack1 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LinkedList<PmsProductLadder> linkedList0 = new LinkedList<PmsProductLadder>();
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer0).when(pmsProductLadder0).getCount();
      doReturn(bigDecimal0).when(pmsProductLadder0).getDiscount();
      doReturn("g_").when(pmsProductLadder0).toString();
      
      linkedList0.add(pmsProductLadder0);
      //mock pmsProductLadder1
      PmsProductLadder pmsProductLadder1 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(pmsProductLadder1).getCount();
      
      linkedList0.add(pmsProductLadder1);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("5", "5").when(promotionProduct0).toString();
      doReturn(linkedList0).when(promotionProduct0).getProductLadderList();
      doReturn(stack1).when(promotionProduct0).getSkuStockList();
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      
      stack0.add(promotionProduct0);
      LinkedList<OmsCartItem> linkedList1 = new LinkedList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("}3[s6").when(omsCartItem0).getMemberNickname();
      doReturn(date1).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("127").when(omsCartItem0).getProductAttr();
      doReturn("").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductName();
      doReturn("Method Not Allowed").when(omsCartItem0).getProductPic();
      doReturn("\u6298").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("3203").when(omsCartItem0).getProductSn();
      doReturn("\u4EF6\uFF0C").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("5").when(omsCartItem0).toString();
      
      linkedList1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      // Undeclared exception!
      try { 
        omsPromotionServiceImpl0.calcCartPromotion(linkedList1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_03()  throws Throwable  {
      //caseID:10ca2fb785d63b0d2a037cdd010a11f4
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: linkedList0
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1);
      Stack<PmsSkuStock> stack1 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPromotionPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("10").when(pmsSkuStock0).toString();
      
      stack1.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("10", "10").when(promotionProduct0).toString();
      doReturn(stack1).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      LinkedList<OmsCartItem> linkedList0 = new LinkedList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("10").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("10").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("10").when(omsCartItem0).getMemberNickname();
      doReturn(date1).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("10").when(omsCartItem0).getProductAttr();
      doReturn("10").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("10").when(omsCartItem0).getProductName();
      doReturn("10").when(omsCartItem0).getProductPic();
      doReturn("10").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("10").when(omsCartItem0).getProductSn();
      doReturn("10").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("10").when(omsCartItem0).toString();
      
      linkedList0.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(linkedList0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_04()  throws Throwable  {
      //caseID:a58d7a753843e368307af6ee06a35ae5
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 107, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 255, 256, 259, 260, 267, 268, 269]
      //Input_0_List<OmsCartItem>: linkedList0
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Vector<PromotionProduct> vector0 = new Vector<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long1 = new Long(1L);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(pmsSkuStock0).getId();
      
      stack0.add(pmsSkuStock0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Integer integer1 = new Integer(0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer1).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer1).when(promotionProduct0).getPromotionType();
      doReturn("\u5355\u54C1\u4FC3\u9500", "eYg6Vc%").when(promotionProduct0).toString();
      doReturn(stack0).when(promotionProduct0).getSkuStockList();
      
      vector0.add(promotionProduct0);
      LinkedList<OmsCartItem> linkedList0 = new LinkedList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("s)").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1672").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long1).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn(".G*LDyx'Ax=Wy8[|").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("\u5143").when(omsCartItem0).getProductAttr();
      doReturn("-11").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long1).when(omsCartItem0).getProductId();
      doReturn("Q)[q>8j(").when(omsCartItem0).getProductName();
      doReturn("Executable must not be null").when(omsCartItem0).getProductPic();
      doReturn("'rm@<X~2i6[;/*C+%").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("s[[F/\"Y1}o5&").when(omsCartItem0).getProductSn();
      doReturn("\u6253\u6298\u4F18\u60E0\uFF1A").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).toString();
      
      linkedList0.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(linkedList0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_05()  throws Throwable  {
      //caseID:e13053c34ba17f55a4ef4562027a2824
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 107, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: linkedList0
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-28));
      Stack<PmsSkuStock> stack1 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPromotionPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("10").when(pmsSkuStock0).toString();
      
      stack1.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("10", "10").when(promotionProduct0).toString();
      doReturn(stack1).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      LinkedList<OmsCartItem> linkedList0 = new LinkedList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("10").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("10").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("10").when(omsCartItem0).getMemberNickname();
      doReturn(date1).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("10").when(omsCartItem0).getProductAttr();
      doReturn("10").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("10").when(omsCartItem0).getProductName();
      doReturn("10").when(omsCartItem0).getProductPic();
      doReturn("10").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("10").when(omsCartItem0).getProductSn();
      doReturn("10").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("10").when(omsCartItem0).toString();
      
      linkedList0.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(linkedList0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_06()  throws Throwable  {
      //caseID:5a971576896252cc891f3748a64bd17e
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 61, 62, 63, 80, 82, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 212, 218, 219, 222, 223, 230, 231, 232, 233, 234, 255, 260, 267, 268, 269]
      //Input_0_List<OmsCartItem>: arrayList1
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      LinkedList<PromotionProduct> linkedList0 = new LinkedList<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Integer integer1 = new Integer(54);
      ArrayList<PmsProductLadder> arrayList0 = new ArrayList<PmsProductLadder>();
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1).when(pmsProductLadder0).getCount();
      
      arrayList0.add(pmsProductLadder0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("z?\"$S@c5h1M6# 7", "z?\"$S@c5h1M6# 7").when(promotionProduct0).toString();
      doReturn(arrayList0).when(promotionProduct0).getProductLadderList();
      doReturn(stack0).when(promotionProduct0).getSkuStockList();
      
      linkedList0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      ArrayList<OmsCartItem> arrayList1 = new ArrayList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u6EE1").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$2").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("FOO,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("Supplier must not be null!").when(omsCartItem0).getProductAttr();
      doReturn("-1").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("8.RcZ*").when(omsCartItem0).getProductName();
      doReturn("-12").when(omsCartItem0).getProductPic();
      doReturn("protectionDomain").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(omsCartItem0).getProductSn();
      doReturn("-12").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer1).when(omsCartItem0).getQuantity();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).toString();
      
      arrayList1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(arrayList1);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_07()  throws Throwable  {
      //caseID:cb28ca4329ef1f1d7465417ce51fb254
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 84, 85, 86, 103, 105, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 184, 189, 241, 242, 244, 245, 246, 247, 248, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: arrayList0
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      LinkedList<PromotionProduct> linkedList0 = new LinkedList<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(4);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("z?\"$S@c5h1M6# 7", "z?\"$S@c5h1M6# 7").when(pmsSkuStock0).toString();
      
      stack0.add(pmsSkuStock0);
      Stack<PmsProductFullReduction> stack1 = new Stack<PmsProductFullReduction>();
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("z?\"$S@c5h1M6# 7", "z?\"$S@c5h1M6# 7", "z?\"$S@c5h1M6# 7").when(promotionProduct0).toString();
      doReturn(stack1).when(promotionProduct0).getProductFullReductionList();
      doReturn(stack0, stack0).when(promotionProduct0).getSkuStockList();
      
      linkedList0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      ArrayList<OmsCartItem> arrayList0 = new ArrayList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getProductAttr();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getProductName();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getProductPic();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getProductSn();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("z?\"$S@c5h1M6# 7").when(omsCartItem0).toString();
      
      arrayList0.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(arrayList0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_08()  throws Throwable  {
      //caseID:9cb663dbee9cb2603ec05061e1e334ae
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 218, 219, 220, 230, 231, 232, 233, 234, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: linkedList1
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Vector<PromotionProduct> vector0 = new Vector<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(3);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(pmsSkuStock0).toString();
      LinkedList<PmsProductLadder> linkedList0 = new LinkedList<PmsProductLadder>();
      
      stack0.add(pmsSkuStock0);
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(pmsProductLadder0).getCount();
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductLadder0).getDiscount();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(pmsProductLadder0).toString();
      
      linkedList0.add(pmsProductLadder0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("\u5355\u54C1\u4FC3\u9500", "\u5355\u54C1\u4FC3\u9500").when(promotionProduct0).toString();
      doReturn(linkedList0).when(promotionProduct0).getProductLadderList();
      doReturn(stack0).when(promotionProduct0).getSkuStockList();
      
      vector0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      LinkedList<OmsCartItem> linkedList1 = new LinkedList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u5355\u54C1\u4FC3\u9500").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u5355\u54C1\u4FC3\u9500").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getMemberNickname();
      doReturn(date1).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductAttr();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductName();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductPic();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductSn();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(omsCartItem0).toString();
      
      linkedList1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(linkedList1);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_09()  throws Throwable  {
      //caseID:4c5e6a157b22cb57f9018c752f95e426
      //CoveredLines: [25, 32, 34, 36, 37, 38, 39, 40, 41, 42, 59, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 109, 110, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 178, 184, 185, 186, 241, 242, 244, 245, 246, 247, 248, 255, 256, 257, 267, 268, 269]
      //Input_0_List<OmsCartItem>: arrayList1
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      LinkedList<PromotionProduct> linkedList0 = new LinkedList<PromotionProduct>();
      Long long0 = new Long(23L);
      Integer integer0 = new Integer(4);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0, bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("f:<=$8ijf|']", "f:<=$8ijf|']").when(pmsSkuStock0).toString();
      
      stack0.add(pmsSkuStock0);
      ArrayList<PmsProductFullReduction> arrayList0 = new ArrayList<PmsProductFullReduction>();
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductFullReduction0).getFullPrice();
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductFullReduction0).getReducePrice();
      doReturn("f:<=$8ijf|']").when(pmsProductFullReduction0).toString();
      
      arrayList0.add(pmsProductFullReduction0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0, long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("f:<=$8ijf|']", "f:<=$8ijf|']", "f:<=$8ijf|']").when(promotionProduct0).toString();
      doReturn(arrayList0).when(promotionProduct0).getProductFullReductionList();
      doReturn(stack0, stack0).when(promotionProduct0).getSkuStockList();
      
      linkedList0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      ArrayList<OmsCartItem> arrayList1 = new ArrayList<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("{`%MPKH\"LO%Ktgoe").when(omsCartItem0).getProductAttr();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(omsCartItem0).getProductName();
      doReturn("{`%MPKH\"LO%Ktgoe").when(omsCartItem0).getProductPic();
      doReturn("\u6253\u6298\u4F18\u60E0\uFF1A").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(omsCartItem0).getProductSn();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("f:<=$8ijf|']").when(omsCartItem0).toString();
      
      arrayList1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(arrayList1);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getProductFullReduction_10()  throws Throwable  {
      //caseID:c777f26e084abf232f92fb6c2e98f737
      //CoveredLines: [25, 178, 181, 184, 185, 186]
      //Input_0_BigDecimal: BigDecimal.ONE
      //Input_1_List<com.macro.mall.model.PmsProductFullReduction>: vector0
      //Assert: assertNotNull(method_result);
      //Assert: assertSame(method_result, pmsProductFullReduction1);
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Vector<PmsProductFullReduction> vector0 = new Vector<PmsProductFullReduction>();
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(pmsProductFullReduction0).getFullPrice();
      //mock pmsProductFullReduction1
      PmsProductFullReduction pmsProductFullReduction1 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductFullReduction1).getFullPrice();
      doReturn("1K").when(pmsProductFullReduction1).toString();
      
      vector0.add(pmsProductFullReduction1);
      
      vector0.add(pmsProductFullReduction0);
      
      //Call method: getProductFullReduction
      Object object0 = PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductFullReduction", (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) vector0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNotNull(object0);
      
      //Test Result Assert
      assertSame(object0, pmsProductFullReduction1);
  }

  @Test(timeout = 4000)
  public void test_getProductFullReduction_11()  throws Throwable  {
      //caseID:fefaa6ad2d263cb036c1dbe6578a537c
      //CoveredLines: [25, 178, 184, 185, 188, 189]
      //Input_0_BigDecimal: BigDecimal.TEN
      //Input_1_List<com.macro.mall.model.PmsProductFullReduction>: linkedList0
      //Assert: assertNull(method_result);
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LinkedList<PmsProductFullReduction> linkedList0 = new LinkedList<PmsProductFullReduction>();
      BigDecimal bigDecimal1 = new BigDecimal(896L);
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal1).when(pmsProductFullReduction0).getFullPrice();
      
      linkedList0.add(pmsProductFullReduction0);
      
      //Call method: getProductFullReduction
      Object object0 = PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductFullReduction", (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) linkedList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
