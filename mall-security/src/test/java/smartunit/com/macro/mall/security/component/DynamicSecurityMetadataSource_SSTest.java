/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.component;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.component.DynamicSecurityMetadataSource;
import com.macro.mall.security.component.DynamicSecurityService;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Map;
import java.util.TreeSet;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.web.FilterInvocation;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DynamicSecurityMetadataSource_SSTest extends DynamicSecurityMetadataSource_SSTest_scaffolding {
// allCoveredLines:[18, 26, 27, 30, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 51, 56, 61]

  @Test(timeout = 4000)
  public void test_clearDataSource_0()  throws Throwable  {
      //caseID:92de8ad79c7d9b7d43f6b5d85e95e5b2
      //CoveredLines: [18, 30]
      
      DynamicSecurityMetadataSource dynamicSecurityMetadataSource0 = new DynamicSecurityMetadataSource();
      
      //Call method: clearDataSource
      // Undeclared exception!
      try { 
        dynamicSecurityMetadataSource0.clearDataSource();
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.component.DynamicSecurityMetadataSource", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_getAllConfigAttributes_1()  throws Throwable  {
      //caseID:f1c5603429c1a8e79caaab5fbb0b48ca
      //CoveredLines: [18, 56]
      //Assert: assertNull(method_result);
      
      DynamicSecurityMetadataSource dynamicSecurityMetadataSource0 = new DynamicSecurityMetadataSource();
      
      //Call method: getAllConfigAttributes
      Collection<ConfigAttribute> collection0 = dynamicSecurityMetadataSource0.getAllConfigAttributes();
      
      //Test Result Assert
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test_getAttributes_2()  throws Throwable  {
      //caseID:fa5a31afe35f2e6a9fd3ba1d43dc1a59
      //CoveredLines: [18, 26, 27, 36, 37, 39, 40, 41, 42, 44, 45, 46, 49, 51]
      //Input_0_Object: \"k0yWiC2*\", \"reactor.onNextError.localStrategy\", \"W^:|=s!UqJk:@-U\"
      //Assert: assertNotNull(method_result);
      
      DynamicSecurityMetadataSource dynamicSecurityMetadataSource0 = new DynamicSecurityMetadataSource();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      
      treeSet0.add("1");
      //mock map0
      Map<String, ConfigAttribute> map0 = (Map<String, ConfigAttribute>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(treeSet0).when(map0).keySet();
      //mock dynamicSecurityService0
      DynamicSecurityService dynamicSecurityService0 = mock(DynamicSecurityService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(dynamicSecurityService0).loadDataSource();
      
      PrivateAccess.setVariable((Class<?>) DynamicSecurityMetadataSource.class, dynamicSecurityMetadataSource0, "dynamicSecurityService", (Object) dynamicSecurityService0);
      FilterInvocation filterInvocation0 = new FilterInvocation("k0yWiC2*", "reactor.onNextError.localStrategy", "W^:|=s!UqJk:@-U");
      
      //Call method: getAttributes
      Collection<ConfigAttribute> collection0 = dynamicSecurityMetadataSource0.getAttributes(filterInvocation0);
      
      //Test Result Assert
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test_getAttributes_3()  throws Throwable  {
      //caseID:e92d2df0d25a43d892a98b813954be6e
      //CoveredLines: [18, 26, 27, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 51]
      //Input_0_Object: {getRequestUrl=\"com.macro.mall.security.component.DynamicSecurityMetadataSource\"}
      //Assert: assertTrue(method_result.contains(configAttribute0));
      
      DynamicSecurityMetadataSource dynamicSecurityMetadataSource0 = new DynamicSecurityMetadataSource();
      Hashtable<String, ConfigAttribute> hashtable0 = new Hashtable<String, ConfigAttribute>();
      //mock dynamicSecurityService0
      DynamicSecurityService dynamicSecurityService0 = mock(DynamicSecurityService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashtable0).when(dynamicSecurityService0).loadDataSource();
      
      PrivateAccess.setVariable((Class<?>) DynamicSecurityMetadataSource.class, dynamicSecurityMetadataSource0, "dynamicSecurityService", (Object) dynamicSecurityService0);
      //mock configAttribute0
      ConfigAttribute configAttribute0 = mock(ConfigAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.security.component.DynamicSecurityMetadataSource").when(configAttribute0).toString();
      
      hashtable0.put("com.macro.mall.security.component.DynamicSecurityMetadataSource", configAttribute0);
      //mock filterInvocation0
      FilterInvocation filterInvocation0 = mock(FilterInvocation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.security.component.DynamicSecurityMetadataSource").when(filterInvocation0).getRequestUrl();
      
      //Call method: getAttributes
      Collection<ConfigAttribute> collection0 = dynamicSecurityMetadataSource0.getAttributes(filterInvocation0);
      
      //Test Result Assert
      assertTrue(collection0.contains(configAttribute0));
  }

  @Test(timeout = 4000)
  public void test_supports_4()  throws Throwable  {
      //caseID:894ba5202683d0bc45e145aa20d85d48
      //CoveredLines: [18, 61]
      //Input_0_Class<?>: ConfigAttribute.class
      //Assert: assertTrue(method_result);
      
      DynamicSecurityMetadataSource dynamicSecurityMetadataSource0 = new DynamicSecurityMetadataSource();
      Class<ConfigAttribute> class0 = ConfigAttribute.class;
      
      //Call method: supports
      boolean boolean0 = dynamicSecurityMetadataSource0.supports(class0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }
}
