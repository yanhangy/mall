/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.component;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.component.JwtAuthenticationTokenFilter;
import com.macro.mall.security.util.JwtTokenUtil;
import javax.servlet.FilterChain;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JwtAuthenticationTokenFilter_SSTest extends JwtAuthenticationTokenFilter_SSTest_scaffolding {
// allCoveredLines:[25, 40, 41, 42, 43, 44, 45, 55, 56]

  @Test(timeout = 4000)
  public void test_doFilterInternal_0()  throws Throwable  {
      //caseID:bf3e4a39212c9dc2d92fa212d2ac965f
      //CoveredLines: [25, 40, 41, 55, 56]
      //Input_0_HttpServletRequest: {getHeader=\"checking username:{}\"}
      //Input_1_HttpServletResponse: {}
      //Input_2_FilterChain: {}
      
      JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter0 = new JwtAuthenticationTokenFilter();
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "tokenHeader", (Object) "0");
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "tokenHead", (Object) "1");
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("checking username:{}").when(httpServletRequest0).getHeader(anyString());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock filterChain0
      FilterChain filterChain0 = mock(FilterChain.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doFilterInternal
      PrivateAccess.callMethod((Class<JwtAuthenticationTokenFilter>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "doFilterInternal", (Object) httpServletRequest0, (Class<?>) HttpServletRequest.class, (Object) httpServletResponse0, (Class<?>) HttpServletResponse.class, (Object) filterChain0, (Class<?>) FilterChain.class);
  }

  @Test(timeout = 4000)
  public void test_doFilterInternal_1()  throws Throwable  {
      //caseID:15ce3838ce7fe86352e6f44a18803e1f
      //CoveredLines: [25, 40, 41, 55, 56]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_FilterChain: {}
      
      JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter0 = new JwtAuthenticationTokenFilter();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock filterChain0
      FilterChain filterChain0 = mock(FilterChain.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doFilterInternal
      PrivateAccess.callMethod((Class<JwtAuthenticationTokenFilter>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "doFilterInternal", (Object) httpServletRequest0, (Class<?>) HttpServletRequest.class, (Object) httpServletResponse0, (Class<?>) HttpServletResponse.class, (Object) filterChain0, (Class<?>) FilterChain.class);
  }

  @Test(timeout = 4000)
  public void test_doFilterInternal_2()  throws Throwable  {
      //caseID:ae5d42a1a9471feea40f47918ae263d3
      //CoveredLines: [25, 40, 41, 42, 43, 44, 45, 55, 56]
      //Input_0_HttpServletRequest: {getHeader=\"1\"}
      //Input_1_HttpServletResponse: {}
      //Input_2_FilterChain: {}
      
      JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter0 = new JwtAuthenticationTokenFilter();
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "tokenHeader", (Object) "0");
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "tokenHead", (Object) "");
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(httpServletRequest0).getHeader(anyString());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock filterChain0
      FilterChain filterChain0 = mock(FilterChain.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doFilterInternal
      PrivateAccess.callMethod((Class<JwtAuthenticationTokenFilter>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "doFilterInternal", (Object) httpServletRequest0, (Class<?>) HttpServletRequest.class, (Object) httpServletResponse0, (Class<?>) HttpServletResponse.class, (Object) filterChain0, (Class<?>) FilterChain.class);
  }

  @Test(timeout = 4000)
  public void test_doFilterInternal_3()  throws Throwable  {
      //caseID:9300506a8ea60ab1759a3ce991b598d9
      //CoveredLines: [25, 40, 41, 42, 43, 44, 45, 55, 56]
      //Input_0_HttpServletRequest: {getHeader=\"checking username:{}\"}
      //Input_1_HttpServletResponse: {}
      //Input_2_FilterChain: {}
      
      JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter0 = new JwtAuthenticationTokenFilter();
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(".FILTERED").when(jwtTokenUtil0).getUserNameFromToken(anyString());
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "tokenHeader", (Object) "0");
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "tokenHead", (Object) "");
      
      PrivateAccess.setVariable((Class<?>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("checking username:{}").when(httpServletRequest0).getHeader(anyString());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock filterChain0
      FilterChain filterChain0 = mock(FilterChain.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doFilterInternal
      try { 
        PrivateAccess.callMethod((Class<JwtAuthenticationTokenFilter>) JwtAuthenticationTokenFilter.class, jwtAuthenticationTokenFilter0, "doFilterInternal", (Object) httpServletRequest0, (Class<?>) HttpServletRequest.class, (Object) httpServletResponse0, (Class<?>) HttpServletResponse.class, (Object) filterChain0, (Class<?>) FilterChain.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.component.JwtAuthenticationTokenFilter", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }
}
