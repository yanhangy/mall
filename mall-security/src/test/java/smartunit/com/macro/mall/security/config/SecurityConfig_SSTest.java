/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.component.DynamicAccessDecisionManager;
import com.macro.mall.security.component.DynamicSecurityFilter;
import com.macro.mall.security.component.DynamicSecurityMetadataSource;
import com.macro.mall.security.component.JwtAuthenticationTokenFilter;
import com.macro.mall.security.component.RestAuthenticationEntryPoint;
import com.macro.mall.security.component.RestfulAccessDeniedHandler;
import com.macro.mall.security.config.IgnoreUrlsConfig;
import com.macro.mall.security.config.SecurityConfig;
import com.macro.mall.security.util.JwtTokenUtil;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SecurityConfig_SSTest extends SecurityConfig_SSTest_scaffolding {
// allCoveredLines:[25, 74, 79, 85, 90, 95, 100, 105, 111, 118, 124]

  @Test(timeout = 4000)
  public void test_authenticationManagerBean_0()  throws Throwable  {
      //caseID:e2107784b74ea6eeff93570132b5a4d2
      //CoveredLines: [25, 85]
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: authenticationManagerBean
      try { 
        securityConfig0.authenticationManagerBean();
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("delegateBuilder cannot be null", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_dynamicAccessDecisionManager_1()  throws Throwable  {
      //caseID:dd458e26b4bf008420196eddf0ade0ac
      //CoveredLines: [111]
      //Assert: assertNotNull(method_result);
      
      //mock securityConfig0
      SecurityConfig securityConfig0 = mock(SecurityConfig.class, CALLS_REAL_METHODS);
      
      //Call method: dynamicAccessDecisionManager
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = securityConfig0.dynamicAccessDecisionManager();
      
      //Test Result Assert
      assertNotNull(dynamicAccessDecisionManager0);
  }

  @Test(timeout = 4000)
  public void test_dynamicSecurityFilter_2()  throws Throwable  {
      //caseID:1c7406870d54382144512ac256696fe5
      //CoveredLines: [25, 118]
      //Assert: assertFalse(method_result.isRejectPublicInvocations());
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: dynamicSecurityFilter
      DynamicSecurityFilter dynamicSecurityFilter0 = securityConfig0.dynamicSecurityFilter();
      
      //Test Result Assert
      assertFalse(dynamicSecurityFilter0.isRejectPublicInvocations());
  }

  @Test(timeout = 4000)
  public void test_dynamicSecurityMetadataSource_3()  throws Throwable  {
      //caseID:034e14115b3b9bb5441aa5e41b9829d0
      //CoveredLines: [124]
      //Assert: assertNotNull(method_result);
      
      //mock securityConfig0
      SecurityConfig securityConfig0 = mock(SecurityConfig.class, CALLS_REAL_METHODS);
      
      //Call method: dynamicSecurityMetadataSource
      DynamicSecurityMetadataSource dynamicSecurityMetadataSource0 = securityConfig0.dynamicSecurityMetadataSource();
      
      //Test Result Assert
      assertNotNull(dynamicSecurityMetadataSource0);
  }

  @Test(timeout = 4000)
  public void test_ignoreUrlsConfig_4()  throws Throwable  {
      //caseID:87819ff201353f249b540a0766ac4887
      //CoveredLines: [100]
      //Assert: assertNotNull(method_result);
      
      //mock securityConfig0
      SecurityConfig securityConfig0 = mock(SecurityConfig.class, CALLS_REAL_METHODS);
      
      //Call method: ignoreUrlsConfig
      IgnoreUrlsConfig ignoreUrlsConfig0 = securityConfig0.ignoreUrlsConfig();
      
      //Test Result Assert
      assertNotNull(ignoreUrlsConfig0);
  }

  @Test(timeout = 4000)
  public void test_jwtAuthenticationTokenFilter_5()  throws Throwable  {
      //caseID:66b3157102e652610527a5c80c740d06
      //CoveredLines: [79]
      //Assert: assertNotNull(method_result);
      
      //mock securityConfig0
      SecurityConfig securityConfig0 = mock(SecurityConfig.class, CALLS_REAL_METHODS);
      
      //Call method: jwtAuthenticationTokenFilter
      JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter0 = securityConfig0.jwtAuthenticationTokenFilter();
      
      //Test Result Assert
      assertNotNull(jwtAuthenticationTokenFilter0);
  }

  @Test(timeout = 4000)
  public void test_jwtTokenUtil_6()  throws Throwable  {
      //caseID:ffd55e22f45a27d6d8e50c27aaad77a6
      //CoveredLines: [25, 105]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: jwtTokenUtil
      JwtTokenUtil jwtTokenUtil0 = securityConfig0.jwtTokenUtil();
      
      //Test Result Assert
      assertNotNull(jwtTokenUtil0);
  }

  @Test(timeout = 4000)
  public void test_passwordEncoder_7()  throws Throwable  {
      //caseID:0491037f893ffd0d2a5bfa7cb1412b72
      //CoveredLines: [25, 74]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: passwordEncoder
      PasswordEncoder passwordEncoder0 = securityConfig0.passwordEncoder();
      
      //Test Result Assert
      assertNotNull(passwordEncoder0);
  }

  @Test(timeout = 4000)
  public void test_restAuthenticationEntryPoint_8()  throws Throwable  {
      //caseID:8003eb46b0b35e97089b6c3ec102ea87
      //CoveredLines: [95]
      //Assert: assertNotNull(method_result);
      
      //mock securityConfig0
      SecurityConfig securityConfig0 = mock(SecurityConfig.class, CALLS_REAL_METHODS);
      
      //Call method: restAuthenticationEntryPoint
      RestAuthenticationEntryPoint restAuthenticationEntryPoint0 = securityConfig0.restAuthenticationEntryPoint();
      
      //Test Result Assert
      assertNotNull(restAuthenticationEntryPoint0);
  }

  @Test(timeout = 4000)
  public void test_restfulAccessDeniedHandler_9()  throws Throwable  {
      //caseID:fc45d6584c03c6135765fadebdf84813
      //CoveredLines: [90]
      //Assert: assertNotNull(method_result);
      
      //mock securityConfig0
      SecurityConfig securityConfig0 = mock(SecurityConfig.class, CALLS_REAL_METHODS);
      
      //Call method: restfulAccessDeniedHandler
      RestfulAccessDeniedHandler restfulAccessDeniedHandler0 = securityConfig0.restfulAccessDeniedHandler();
      
      //Test Result Assert
      assertNotNull(restfulAccessDeniedHandler0);
  }
}
