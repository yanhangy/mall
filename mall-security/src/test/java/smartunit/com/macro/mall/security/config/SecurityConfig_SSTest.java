/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.component.DynamicAccessDecisionManager;
import com.macro.mall.security.component.DynamicSecurityFilter;
import com.macro.mall.security.component.DynamicSecurityMetadataSource;
import com.macro.mall.security.component.JwtAuthenticationTokenFilter;
import com.macro.mall.security.component.RestAuthenticationEntryPoint;
import com.macro.mall.security.component.RestfulAccessDeniedHandler;
import com.macro.mall.security.config.IgnoreUrlsConfig;
import com.macro.mall.security.config.SecurityConfig;
import com.macro.mall.security.util.JwtTokenUtil;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SecurityConfig_SSTest extends SecurityConfig_SSTest_scaffolding {
// allCoveredLines:[25, 74, 79, 85, 90, 95, 100, 105, 111, 118, 124]

  @Test(timeout = 4000)
  public void test_authenticationManagerBean_0()  throws Throwable  {
      //caseID:fde744f4742958e6c6375dd0e2575fd5
      //CoveredLines: [25, 85]
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: authenticationManagerBean
      try { 
        securityConfig0.authenticationManagerBean();
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("delegateBuilder cannot be null", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_dynamicAccessDecisionManager_1()  throws Throwable  {
      //caseID:0ebb4382f87ba1bc73a6cca1ea37cb4a
      //CoveredLines: [25, 111]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: dynamicAccessDecisionManager
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = securityConfig0.dynamicAccessDecisionManager();
      
      //Test Result Assert
      assertNotNull(dynamicAccessDecisionManager0);
  }

  @Test(timeout = 4000)
  public void test_dynamicSecurityFilter_2()  throws Throwable  {
      //caseID:c2165ed79e18bc2a5203d91da46c5cb5
      //CoveredLines: [25, 118]
      //Assert: assertTrue(method_result.isValidateConfigAttributes());
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: dynamicSecurityFilter
      DynamicSecurityFilter dynamicSecurityFilter0 = securityConfig0.dynamicSecurityFilter();
      
      //Test Result Assert
      assertTrue(dynamicSecurityFilter0.isValidateConfigAttributes());
  }

  @Test(timeout = 4000)
  public void test_dynamicSecurityMetadataSource_3()  throws Throwable  {
      //caseID:b81a7086c2de9916bf1f339d8bf87d9b
      //CoveredLines: [25, 124]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: dynamicSecurityMetadataSource
      DynamicSecurityMetadataSource dynamicSecurityMetadataSource0 = securityConfig0.dynamicSecurityMetadataSource();
      
      //Test Result Assert
      assertNotNull(dynamicSecurityMetadataSource0);
  }

  @Test(timeout = 4000)
  public void test_ignoreUrlsConfig_4()  throws Throwable  {
      //caseID:3195dd53a428a1c09a8ace05fff8c09e
      //CoveredLines: [25, 100]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: ignoreUrlsConfig
      IgnoreUrlsConfig ignoreUrlsConfig0 = securityConfig0.ignoreUrlsConfig();
      
      //Test Result Assert
      assertNotNull(ignoreUrlsConfig0);
  }

  @Test(timeout = 4000)
  public void test_jwtAuthenticationTokenFilter_5()  throws Throwable  {
      //caseID:3a8d0554052e3cf619964776f9dc0364
      //CoveredLines: [25, 79]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: jwtAuthenticationTokenFilter
      JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter0 = securityConfig0.jwtAuthenticationTokenFilter();
      
      //Test Result Assert
      assertNotNull(jwtAuthenticationTokenFilter0);
  }

  @Test(timeout = 4000)
  public void test_jwtTokenUtil_6()  throws Throwable  {
      //caseID:acf593acabd74be14794008c8c33da6b
      //CoveredLines: [25, 105]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: jwtTokenUtil
      JwtTokenUtil jwtTokenUtil0 = securityConfig0.jwtTokenUtil();
      
      //Test Result Assert
      assertNotNull(jwtTokenUtil0);
  }

  @Test(timeout = 4000)
  public void test_passwordEncoder_7()  throws Throwable  {
      //caseID:2dad194f9c819beb32f4412bb1c37bb5
      //CoveredLines: [25, 74]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: passwordEncoder
      PasswordEncoder passwordEncoder0 = securityConfig0.passwordEncoder();
      
      //Test Result Assert
      assertNotNull(passwordEncoder0);
  }

  @Test(timeout = 4000)
  public void test_restAuthenticationEntryPoint_8()  throws Throwable  {
      //caseID:43c86b1fe547aed81ba65861413637e0
      //CoveredLines: [25, 95]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: restAuthenticationEntryPoint
      RestAuthenticationEntryPoint restAuthenticationEntryPoint0 = securityConfig0.restAuthenticationEntryPoint();
      
      //Test Result Assert
      assertNotNull(restAuthenticationEntryPoint0);
  }

  @Test(timeout = 4000)
  public void test_restfulAccessDeniedHandler_9()  throws Throwable  {
      //caseID:8f4b63b02259c997bcdadcb412fbc3fe
      //CoveredLines: [25, 90]
      //Assert: assertNotNull(method_result);
      
      SecurityConfig securityConfig0 = new SecurityConfig();
      
      //Call method: restfulAccessDeniedHandler
      RestfulAccessDeniedHandler restfulAccessDeniedHandler0 = securityConfig0.restfulAccessDeniedHandler();
      
      //Test Result Assert
      assertNotNull(restfulAccessDeniedHandler0);
  }
}
