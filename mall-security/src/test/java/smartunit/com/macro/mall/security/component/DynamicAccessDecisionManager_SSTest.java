/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.component;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.component.DynamicAccessDecisionManager;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DynamicAccessDecisionManager_SSTest extends DynamicAccessDecisionManager_SSTest_scaffolding {
// allCoveredLines:[18, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 43, 48]

  @Test(timeout = 4000)
  public void test_decide_0()  throws Throwable  {
      //caseID:009b6d1589d7f8492c631a70b90cb658
      //CoveredLines: [18, 24, 25]
      //Input_0_Authentication: {}
      //Input_1_Object: {}
      //Input_2_Collection<ConfigAttribute>: hashSet0
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HashSet<ConfigAttribute> hashSet0 = new HashSet<ConfigAttribute>();
      
      //Call method: decide
      dynamicAccessDecisionManager0.decide(authentication0, authentication0, hashSet0);
      
      //Test Result Assert
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_decide_1()  throws Throwable  {
      //caseID:5fcb70c2e235a8a02661f685f5dad7e9
      //CoveredLines: [18, 24, 27, 28, 29, 31, 32, 33, 34]
      //Input_0_Authentication: {getAuthorities=priorityQueue0}
      //Input_1_Object: {getAuthorities=priorityQueue0}
      //Input_2_Collection<ConfigAttribute>: arrayList0
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      PriorityQueue<GrantedAuthority> priorityQueue0 = new PriorityQueue<GrantedAuthority>();
      //mock grantedAuthority0
      GrantedAuthority grantedAuthority0 = mock(GrantedAuthority.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(grantedAuthority0).getAuthority();
      
      priorityQueue0.add(grantedAuthority0);
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(priorityQueue0).when(authentication0).getAuthorities();
      ArrayList<ConfigAttribute> arrayList0 = new ArrayList<ConfigAttribute>();
      //mock configAttribute0
      ConfigAttribute configAttribute0 = mock(ConfigAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(configAttribute0).getAttribute();
      
      arrayList0.add(configAttribute0);
      
      //Call method: decide
      dynamicAccessDecisionManager0.decide(authentication0, authentication0, arrayList0);
      
      //Test Result Assert
      assertTrue(arrayList0.contains(configAttribute0));
  }

  @Test(timeout = 4000)
  public void test_decide_2()  throws Throwable  {
      //caseID:1d37e8e148af88a8dead839ef31cbdf0
      //CoveredLines: [18, 24, 27, 28, 29, 31, 32, 33, 36, 37, 38]
      //Input_0_Authentication: {getAuthorities=hashSet0}
      //Input_1_Object: {getAuthorities=hashSet0}
      //Input_2_Collection<ConfigAttribute>: vector0
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      HashSet<SimpleGrantedAuthority> hashSet0 = new HashSet<SimpleGrantedAuthority>();
      //mock simpleGrantedAuthority0
      SimpleGrantedAuthority simpleGrantedAuthority0 = mock(SimpleGrantedAuthority.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      hashSet0.add(simpleGrantedAuthority0);
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashSet0).when(authentication0).getAuthorities();
      Vector<ConfigAttribute> vector0 = new Vector<ConfigAttribute>();
      //mock configAttribute0
      ConfigAttribute configAttribute0 = mock(ConfigAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(configAttribute0).getAttribute();
      
      vector0.add(configAttribute0);
      
      //Call method: decide
      try { 
        dynamicAccessDecisionManager0.decide(authentication0, authentication0, vector0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.component.DynamicAccessDecisionManager", e);
         assertEquals("org.springframework.security.access.AccessDeniedException", e.getClass().getName());
         assertEquals("\u62B1\u6B49\uFF0C\u60A8\u6CA1\u6709\u8BBF\u95EE\u6743\u9650", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_supports_3()  throws Throwable  {
      //caseID:cb08fdeaf55327a3da33846765e92db3
      //CoveredLines: [18, 43]
      //Input_0_ConfigAttribute: {}
      //Assert: assertTrue(method_result);
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      //mock configAttribute0
      ConfigAttribute configAttribute0 = mock(ConfigAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: supports
      boolean boolean0 = dynamicAccessDecisionManager0.supports(configAttribute0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_supports_4()  throws Throwable  {
      //caseID:84b307f93899b6511e9d257ec2ab2914
      //CoveredLines: [18, 48]
      //Input_0_Class<?>: Integer.class
      //Assert: assertTrue(method_result);
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      Class<Integer> class0 = Integer.class;
      
      //Call method: supports
      boolean boolean0 = dynamicAccessDecisionManager0.supports(class0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }
}
