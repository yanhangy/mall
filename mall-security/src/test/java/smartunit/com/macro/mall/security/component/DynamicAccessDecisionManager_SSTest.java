/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.component;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.component.DynamicAccessDecisionManager;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DynamicAccessDecisionManager_SSTest extends DynamicAccessDecisionManager_SSTest_scaffolding {
// allCoveredLines:[18, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 43, 48]

  @Test(timeout = 4000)
  public void test_decide_0()  throws Throwable  {
      //caseID:ef1eb14a1ebd915b388a4ec427a3a2e6
      //CoveredLines: [18, 24, 25]
      //Input_0_Authentication: {}
      //Input_1_Object: {}
      //Input_2_Collection<ConfigAttribute>: hashSet0
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HashSet<ConfigAttribute> hashSet0 = new HashSet<ConfigAttribute>();
      
      //Call method: decide
      dynamicAccessDecisionManager0.decide(authentication0, authentication0, hashSet0);
      
      //Test Result Assert
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_decide_1()  throws Throwable  {
      //caseID:148de4ab31d74f10e08f83b22be10325
      //CoveredLines: [18, 24, 27, 28, 29, 31, 32, 33, 34]
      //Input_0_Authentication: {getAuthorities=priorityQueue0}
      //Input_1_Object: {getAuthorities=priorityQueue0}
      //Input_2_Collection<ConfigAttribute>: arrayList0
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      PriorityQueue<SimpleGrantedAuthority> priorityQueue0 = new PriorityQueue<SimpleGrantedAuthority>();
      //mock simpleGrantedAuthority0
      SimpleGrantedAuthority simpleGrantedAuthority0 = mock(SimpleGrantedAuthority.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.security.component.DynamicAccessDecisionManager").when(simpleGrantedAuthority0).getAuthority();
      
      priorityQueue0.add(simpleGrantedAuthority0);
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(priorityQueue0).when(authentication0).getAuthorities();
      ArrayList<ConfigAttribute> arrayList0 = new ArrayList<ConfigAttribute>();
      //mock configAttribute0
      ConfigAttribute configAttribute0 = mock(ConfigAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.security.component.DynamicAccessDecisionManager").when(configAttribute0).getAttribute();
      
      arrayList0.add(configAttribute0);
      
      //Call method: decide
      dynamicAccessDecisionManager0.decide(authentication0, authentication0, arrayList0);
      
      //Test Result Assert
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test_decide_2()  throws Throwable  {
      //caseID:56b620ce7245e34df38fcc37fa4499e8
      //CoveredLines: [18, 24, 27, 28, 29, 31, 32, 33, 36, 37, 38]
      //Input_0_Authentication: {getAuthorities=vector0}
      //Input_1_Object: {getAuthorities=vector0}
      //Input_2_Collection<ConfigAttribute>: stack0
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      Vector<SimpleGrantedAuthority> vector0 = new Vector<SimpleGrantedAuthority>();
      //mock simpleGrantedAuthority0
      SimpleGrantedAuthority simpleGrantedAuthority0 = mock(SimpleGrantedAuthority.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(simpleGrantedAuthority0);
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(authentication0).getAuthorities();
      Stack<ConfigAttribute> stack0 = new Stack<ConfigAttribute>();
      //mock configAttribute0
      ConfigAttribute configAttribute0 = mock(ConfigAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-2147483645").when(configAttribute0).getAttribute();
      
      stack0.add(configAttribute0);
      
      //Call method: decide
      try { 
        dynamicAccessDecisionManager0.decide(authentication0, authentication0, stack0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.component.DynamicAccessDecisionManager", e);
         assertEquals("org.springframework.security.access.AccessDeniedException", e.getClass().getName());
         assertEquals("\u62B1\u6B49\uFF0C\u60A8\u6CA1\u6709\u8BBF\u95EE\u6743\u9650", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_supports_3()  throws Throwable  {
      //caseID:cc323ff0543492e83d0eb5dc28135fb8
      //CoveredLines: [18, 48]
      //Input_0_Class<?>: SimpleGrantedAuthority.class
      //Assert: assertTrue(method_result);
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      Class<SimpleGrantedAuthority> class0 = SimpleGrantedAuthority.class;
      
      //Call method: supports
      boolean boolean0 = dynamicAccessDecisionManager0.supports(class0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_supports_4()  throws Throwable  {
      //caseID:3d37e1d15bec25a5d0d0dce13a9c7fb3
      //CoveredLines: [18, 43]
      //Input_0_ConfigAttribute: {}
      //Assert: assertTrue(method_result);
      
      DynamicAccessDecisionManager dynamicAccessDecisionManager0 = new DynamicAccessDecisionManager();
      //mock configAttribute0
      ConfigAttribute configAttribute0 = mock(ConfigAttribute.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: supports
      boolean boolean0 = dynamicAccessDecisionManager0.supports(configAttribute0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }
}
