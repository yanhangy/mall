/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.util.JwtTokenUtil;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.userdetails.UserDetails;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JwtTokenUtil_SSTest extends JwtTokenUtil_SSTest_scaffolding {
// allCoveredLines:[28, 43, 44, 45, 54, 56, 57, 58, 60, 61, 63, 70, 79, 80, 81, 82, 84, 94, 95, 102, 110, 111, 118, 119, 120, 121, 130, 131, 133, 134, 135, 138, 139, 140, 161, 162]

  @Test(timeout = 4000)
  public void test_generateToken_0()  throws Throwable  {
      //caseID:eda0b8a3320dfb36df6001e3abf50f43
      //CoveredLines: [28, 43, 44, 45, 70, 118, 119, 120, 121]
      //Input_0_UserDetails: {}
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      Long long0 = new Long(4450L);
      
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "expiration", (Object) long0);
      //mock userDetails0
      UserDetails userDetails0 = mock(UserDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: generateToken
      // Undeclared exception!
      try { 
        jwtTokenUtil0.generateToken(userDetails0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test_isTokenExpired_1()  throws Throwable  {
      //caseID:8c5a9466659e02204064987eb91b3690
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 102, 110, 111]
      //Input_0_String: reactor.core.publisher.FluxFlattenIterable
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "com.macro.mall.security.util.JwtTokenUtil");
      
      //Call method: isTokenExpired
      try { 
        PrivateAccess.callMethod((Class<JwtTokenUtil>) JwtTokenUtil.class, jwtTokenUtil0, "isTokenExpired", (Object) "reactor.core.publisher.FluxFlattenIterable", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.util.JwtTokenUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_refreshHeadToken_2()  throws Throwable  {
      //caseID:dc23901fa9995fa02b272977e5cb8060
      //CoveredLines: [28, 130, 131]
      //Input_0_String: 
      //Assert: assertNull(method_result);
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      //Call method: refreshHeadToken
      String string0 = jwtTokenUtil0.refreshHeadToken("");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_refreshHeadToken_3()  throws Throwable  {
      //caseID:83f05e13cf83ff30802d894e625d78e2
      //CoveredLines: [28, 130, 133, 134, 135]
      //Input_0_String: 0
      //Assert: assertNull(method_result);
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "tokenHead", (Object) "1");
      
      //Call method: refreshHeadToken
      String string0 = jwtTokenUtil0.refreshHeadToken("0");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_refreshHeadToken_4()  throws Throwable  {
      //caseID:c914185e74fbd52e5129ffc99bb2d322
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 130, 133, 134, 138, 139, 140]
      //Input_0_String: 0
      //Assert: assertNull(method_result);
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "tokenHead", (Object) "");
      
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "0");
      
      //Call method: refreshHeadToken
      String string0 = jwtTokenUtil0.refreshHeadToken("0");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_tokenRefreshJustBefore_5()  throws Throwable  {
      //caseID:c03bfb41b3f0ba60412dd82468b18dbd
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 161, 162]
      //Input_0_String: 1
      //Input_1_int: 240
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "1");
      
      //Call method: tokenRefreshJustBefore
      try { 
        PrivateAccess.callMethod((Class<JwtTokenUtil>) JwtTokenUtil.class, jwtTokenUtil0, "tokenRefreshJustBefore", (Object) "1", (Class<?>) String.class, (Object) 240, (Class<?>) int.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.util.JwtTokenUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_validateToken_6()  throws Throwable  {
      //caseID:83f9c01c7a1d4393a2d938df62324714
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 79, 80, 81, 82, 84, 94, 95]
      //Input_0_String: 
      //Input_1_UserDetails: {getUsername=\"\"}
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "1");
      //mock userDetails0
      UserDetails userDetails0 = mock(UserDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(userDetails0).getUsername();
      
      //Call method: validateToken
      // Undeclared exception!
      try { 
        jwtTokenUtil0.validateToken("", userDetails0);
      } catch(Throwable e) {
      }
  }
}
