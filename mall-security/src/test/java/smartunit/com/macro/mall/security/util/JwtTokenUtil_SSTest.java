/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.security.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.security.util.JwtTokenUtil;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.userdetails.UserDetails;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JwtTokenUtil_SSTest extends JwtTokenUtil_SSTest_scaffolding {
// allCoveredLines:[28, 43, 44, 45, 54, 56, 57, 58, 60, 61, 63, 70, 79, 80, 81, 82, 84, 94, 95, 102, 110, 111, 118, 119, 120, 121, 130, 131, 133, 134, 135, 138, 139, 140, 161, 162]

  @Test(timeout = 4000)
  public void test_generateToken_0()  throws Throwable  {
      //caseID:9716963935174101b311a988cbef5348
      //CoveredLines: [28, 43, 44, 45, 70, 118, 119, 120, 121]
      //Input_0_UserDetails: {}
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      Long long0 = new Long(0L);
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "expiration", (Object) long0);
      //mock userDetails0
      UserDetails userDetails0 = mock(UserDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: generateToken
      // Undeclared exception!
      try { 
        jwtTokenUtil0.generateToken(userDetails0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test_getExpiredDateFromToken_1()  throws Throwable  {
      //caseID:e3abd3c02783583c54a5f241426bd815
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 110, 111]
      //Input_0_String: Icp0"
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "com.macro.mall.security.util.JwtTokenUtil");
      
      //Call method: getExpiredDateFromToken
      try { 
        PrivateAccess.callMethod((Class<JwtTokenUtil>) JwtTokenUtil.class, jwtTokenUtil0, "getExpiredDateFromToken", (Object) ")Icp0", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.util.JwtTokenUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_isTokenExpired_2()  throws Throwable  {
      //caseID:499741e80fbc8c43595e475c3fa64d13
      //CoveredLines: [28, 54, 56, 57, 60, 61, 63, 102, 110, 111]
      //Input_0_String: "Invalid configuration: values of type %s cannot be merged"
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      //Call method: isTokenExpired
      try { 
        PrivateAccess.callMethod((Class<JwtTokenUtil>) JwtTokenUtil.class, jwtTokenUtil0, "isTokenExpired", (Object) "Invalid configuration: values of type %s cannot be merged", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.util.JwtTokenUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_refreshHeadToken_3()  throws Throwable  {
      //caseID:9c953000f9d97816067d8ceaa2068021
      //CoveredLines: [28, 130, 131]
      //Input_0_String: ""
      //Assert: assertNull(method_result);
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      
      //Call method: refreshHeadToken
      String string0 = jwtTokenUtil0.refreshHeadToken("");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_refreshHeadToken_4()  throws Throwable  {
      //caseID:f254fbc6c39b4e9f9f86b403bce05033
      //CoveredLines: [28, 130, 133, 134, 135]
      //Input_0_String: "SxM/f;Hb0JMbzbEy<a"
      //Assert: assertNull(method_result);
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "tokenHead", (Object) "SxM/f;Hb0JMbzbEy<a");
      
      //Call method: refreshHeadToken
      String string0 = jwtTokenUtil0.refreshHeadToken("SxM/f;Hb0JMbzbEy<a");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_refreshHeadToken_5()  throws Throwable  {
      //caseID:7bd6a1b8d80167e5f991605eca93e1eb
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 130, 133, 134, 138, 139, 140]
      //Input_0_String: "HMAC using SHA-512"
      //Assert: assertNull(method_result);
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "tokenHead", (Object) "0");
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "HMAC using SHA-512");
      
      //Call method: refreshHeadToken
      String string0 = jwtTokenUtil0.refreshHeadToken("HMAC using SHA-512");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_tokenRefreshJustBefore_6()  throws Throwable  {
      //caseID:5368633352aa770830a0edcbd74a37bd
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 161, 162]
      //Input_0_String: "JWT\u683C\u5F0F\u9A8C\u8BC1\u5931\u8D25:{}"
      //Input_1_int: 1800
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "1");
      
      //Call method: tokenRefreshJustBefore
      try { 
        PrivateAccess.callMethod((Class<JwtTokenUtil>) JwtTokenUtil.class, jwtTokenUtil0, "tokenRefreshJustBefore", (Object) "JWT\u683C\u5F0F\u9A8C\u8BC1\u5931\u8D25:{}", (Class<?>) String.class, (Object) 1800, (Class<?>) int.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.security.util.JwtTokenUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_validateToken_7()  throws Throwable  {
      //caseID:3446e7180fbff2d193e2ac29bc619e5b
      //CoveredLines: [28, 54, 56, 57, 58, 60, 61, 63, 79, 80, 81, 82, 84, 94, 95]
      //Input_0_String: ""
      //Input_1_UserDetails: {getUsername=""}
      
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      PrivateAccess.setVariable((Class<?>) JwtTokenUtil.class, jwtTokenUtil0, "secret", (Object) "1.0");
      //mock userDetails0
      UserDetails userDetails0 = mock(UserDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(userDetails0).getUsername();
      
      //Call method: validateToken
      // Undeclared exception!
      try { 
        jwtTokenUtil0.validateToken("", userDetails0);
      } catch(Throwable e) {
      }
  }
}
