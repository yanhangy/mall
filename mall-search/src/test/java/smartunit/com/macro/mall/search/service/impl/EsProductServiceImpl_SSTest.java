/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.search.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.search.dao.EsProductDao;
import com.macro.mall.search.domain.EsProduct;
import com.macro.mall.search.repository.EsProductRepository;
import com.macro.mall.search.service.impl.EsProductServiceImpl;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.search.aggregations.Aggregation;
import org.elasticsearch.search.aggregations.Aggregations;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;
import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;
import org.springframework.data.elasticsearch.core.SearchHits;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EsProductServiceImpl_SSTest extends EsProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[52, 62, 63, 64, 65, 66, 67, 68, 70, 75, 76, 80, 81, 82, 83, 84, 86, 91, 92, 93, 94, 95, 96, 97, 98, 100, 104, 105, 110, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 214, 219, 221, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 249, 250, 252, 253, 254]

  @Test(timeout = 4000)
  public void test_convertProductRelatedInfo_00()  throws Throwable  {
      //caseID:506303438d585c73c8af606b6da70d37
      //CoveredLines: [52, 249, 250, 252, 253, 254]
      //Input_0_org.springframework.data.elasticsearch.core.SearchHits<com.macro.mall.search.domain.EsProduct>: {getAggregations=aggregations0}
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock aggregation0
      Aggregation aggregation0 = mock(Aggregation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map0
      Map<String, Aggregation> map0 = (Map<String, Aggregation>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(aggregation0).when(map0).get(any());
      //mock aggregations0
      Aggregations aggregations0 = mock(Aggregations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(aggregations0).getAsMap();
      //mock searchHits0
      SearchHits<EsProduct> searchHits0 = (SearchHits<EsProduct>) mock(SearchHits.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(aggregations0).when(searchHits0).getAggregations();
      
      //Call method: convertProductRelatedInfo
      try { 
        PrivateAccess.callMethod((Class<EsProductServiceImpl>) EsProductServiceImpl.class, esProductServiceImpl0, "convertProductRelatedInfo", (Object) searchHits0, (Class<?>) SearchHits.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.search.service.impl.EsProductServiceImpl", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_create_01()  throws Throwable  {
      //caseID:42fa461da2d4de6abb59764bad910496
      //CoveredLines: [52, 80, 81, 82, 86]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Vector<EsProduct> vector0 = new Vector<EsProduct>();
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(esProductDao0).getAllEsProductList(anyLong());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Long long0 = new Long(0L);
      
      //Call method: create
      EsProduct esProduct0 = esProductServiceImpl0.create(long0);
      
      //Test Result Assert
      assertNull(esProduct0);
  }

  @Test(timeout = 4000)
  public void test_create_02()  throws Throwable  {
      //caseID:2d23734f9664bd3c49756b6366ed0351
      //CoveredLines: [52, 80, 81, 82, 83, 84, 86]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Stack<EsProduct> stack0 = new Stack<EsProduct>();
      //mock esProduct0
      EsProduct esProduct0 = mock(EsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(esProduct0);
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(esProductDao0).getAllEsProductList(anyLong());
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Long long0 = new Long(0L);
      
      //Call method: create
      EsProduct esProduct1 = esProductServiceImpl0.create(long0);
      
      //Test Result Assert
      assertNull(esProduct1);
  }

  @Test(timeout = 4000)
  public void test_delete_03()  throws Throwable  {
      //caseID:69c3f627bd46e66fc147c61733491e99
      //CoveredLines: [52, 75, 76]
      //Input_0_Long: 0L
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Long long0 = new Long(0L);
      
      //Call method: delete
      esProductServiceImpl0.delete(long0);
  }

  @Test(timeout = 4000)
  public void test_delete_04()  throws Throwable  {
      //caseID:314d634849bea38e672138b764f37610
      //CoveredLines: [52, 91, 92, 93, 94, 95, 96, 97, 98, 100]
      //Input_0_List<Long>: stack0
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Stack<Long> stack0 = new Stack<Long>();
      Long long0 = new Long(0L);
      
      stack0.add(long0);
      
      //Call method: delete
      esProductServiceImpl0.delete((List<Long>) stack0);
      
      //Test Result Assert
      assertEquals("[0]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test_importAll_05()  throws Throwable  {
      //caseID:0ce688493c522a74fcdfcfc9b721bab4
      //CoveredLines: [52, 62, 63, 64, 65, 66, 67, 68, 70]
      //Assert: assertEquals(1, method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Stack<EsProduct> stack0 = new Stack<EsProduct>();
      //mock esProduct0
      EsProduct esProduct0 = mock(EsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(esProduct0);
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(esProductDao0).getAllEsProductList(nullable(java.lang.Long.class));
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(esProductRepository0).saveAll(nullable(java.lang.Iterable.class));
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      
      //Call method: importAll
      int int0 = esProductServiceImpl0.importAll();
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_recommend_06()  throws Throwable  {
      //caseID:551f334f074cbb8c2f64df2e27d34a34
      //CoveredLines: [52, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207]
      //Input_0_Long: 0L
      //Input_1_Integer: JLayeredPane.PALETTE_LAYER
      //Input_2_Integer: JLayeredPane.PALETTE_LAYER
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      LinkedList<EsProduct> linkedList0 = new LinkedList<EsProduct>();
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(esProductDao0).getAllEsProductList(anyLong());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Long long0 = new Long(0L);
      //mock esProduct0
      EsProduct esProduct0 = mock(EsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(esProduct0).getBrandId();
      doReturn("PERMANENT").when(esProduct0).getName();
      doReturn(long0).when(esProduct0).getProductCategoryId();
      
      linkedList0.add(esProduct0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      
      //Call method: recommend
      // Undeclared exception!
      try { 
        esProductServiceImpl0.recommend(long0, integer0, integer0);
      } catch(Throwable e) {
         verifyException("com.macro.mall.search.service.impl.EsProductServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_recommend_07()  throws Throwable  {
      //caseID:cb57610fac694d1e581de46f116f7e3a
      //CoveredLines: [52, 173, 174, 175, 214]
      //Input_0_Long: 1L
      //Input_1_Integer: JLayeredPane.PALETTE_LAYER
      //Input_2_Integer: JLayeredPane.PALETTE_LAYER
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      LinkedList<EsProduct> linkedList0 = new LinkedList<EsProduct>();
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(esProductDao0).getAllEsProductList(anyLong());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Long long0 = new Long(1L);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      
      //Call method: recommend
      // Undeclared exception!
      try { 
        esProductServiceImpl0.recommend(long0, integer0, integer0);
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("Content must not be null!", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_search_08()  throws Throwable  {
      //caseID:a209ad8ce4969caeac9e9d6bb69fbd06
      //CoveredLines: [52, 110]
      //Input_0_String: attrValueList.productAttributeId
      //Input_1_Long: 1070L
      //Input_2_Long: 1070L
      //Input_3_Integer: JLayeredPane.FRAME_CONTENT_LAYER
      //Input_4_Integer: null
      //Input_5_Integer: null
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Long long0 = new Long(1070L);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      
      //Call method: search
      // Undeclared exception!
      try { 
        esProductServiceImpl0.search("attrValueList.productAttributeId", long0, long0, integer0, (Integer) null, (Integer) null);
      } catch(Throwable e) {
         verifyException("com.macro.mall.search.service.impl.EsProductServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_search_09()  throws Throwable  {
      //caseID:6d22211406a0fbb3d4d35e1d2291d696
      //CoveredLines: [52, 104, 105]
      //Input_0_String: >LpM|2</~-JCid\u0001`yA
      //Input_1_Integer: JLayeredPane.MODAL_LAYER
      //Input_2_Integer: JLayeredPane.MODAL_LAYER
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      
      //Call method: search
      Page<EsProduct> page0 = esProductServiceImpl0.search(">LpM|2</~-JCid\u0001`yA", integer0, integer0);
      
      //Test Result Assert
      assertNull(page0);
  }

  @Test(timeout = 4000)
  public void test_searchRelatedInfo_10()  throws Throwable  {
      //caseID:b02369b8e838e75e96faba4896d30c3c
      //CoveredLines: [52, 219, 221, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241]
      //Input_0_String: I3*FGz1
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock restHighLevelClient0
      RestHighLevelClient restHighLevelClient0 = mock(RestHighLevelClient.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ElasticsearchRestTemplate elasticsearchRestTemplate0 = new ElasticsearchRestTemplate(restHighLevelClient0);
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "elasticsearchRestTemplate", (Object) elasticsearchRestTemplate0);
      
      //Call method: searchRelatedInfo
      // Undeclared exception!
      try { 
        esProductServiceImpl0.searchRelatedInfo("I3*FGz1");
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("searchResponse must not be null", e.getMessage());
      }
  }
}
