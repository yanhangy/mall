/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.search.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.search.dao.EsProductDao;
import com.macro.mall.search.domain.EsProduct;
import com.macro.mall.search.repository.EsProductRepository;
import com.macro.mall.search.service.impl.EsProductServiceImpl;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import javax.swing.JLayeredPane;
import org.elasticsearch.search.aggregations.Aggregation;
import org.elasticsearch.search.aggregations.Aggregations;
import org.elasticsearch.search.aggregations.metrics.InternalMax;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;
import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;
import org.springframework.data.elasticsearch.core.SearchHits;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EsProductServiceImpl_SSTest extends EsProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[52, 62, 63, 64, 65, 66, 67, 68, 70, 75, 76, 80, 81, 82, 83, 84, 86, 91, 92, 93, 94, 95, 96, 97, 98, 100, 104, 105, 110, 111, 113, 115, 116, 117, 118, 120, 121, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 150, 152, 153, 158, 160, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 219, 221, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 249, 250, 252, 253, 254]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:393383a2bc532ff0b6c7fd769fae17e8
      //CoveredLines: [52, 80, 81, 82, 86]
      //Input_0_Long: 1744L
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      LinkedList<EsProduct> linkedList0 = new LinkedList<EsProduct>();
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(esProductDao0).getAllEsProductList(anyLong());
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Long long0 = new Long(1744L);
      
      //Call method: create
      EsProduct esProduct0 = esProductServiceImpl0.create(long0);
      
      //Test Result Assert
      assertNull(esProduct0);
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:a5a8abbfd03eca541473b976b48cf034
      //CoveredLines: [52, 80, 81, 82, 83, 84, 86]
      //Input_0_Long: 3945L
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Stack<EsProduct> stack0 = new Stack<EsProduct>();
      //mock esProduct0
      EsProduct esProduct0 = mock(EsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      stack0.add(esProduct0);
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(esProductDao0).getAllEsProductList(anyLong());
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Long long0 = new Long(3945L);
      
      //Call method: create
      EsProduct esProduct1 = esProductServiceImpl0.create(long0);
      
      //Test Result Assert
      assertNull(esProduct1);
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:26ac6965b53332e98cce53d7e92a245a
      //CoveredLines: [52, 75, 76]
      //Input_0_Long: 1L
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Long long0 = new Long(1L);
      
      //Call method: delete
      esProductServiceImpl0.delete(long0);
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:618b310e74c144898d90f1c986c74efe
      //CoveredLines: [52, 91, 92, 93, 94, 95, 96, 97, 98, 100]
      //Input_0_Long>: stack0
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Stack<Long> stack0 = new Stack<Long>();
      Long long0 = new Long(0L);
      stack0.add(long0);
      
      //Call method: delete
      esProductServiceImpl0.delete((List<Long>) stack0);
      
      //Test Result Assert
      assertEquals("[0]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test_importAll_4()  throws Throwable  {
      //caseID:d884bef67fe60c077ee42b44df4158a3
      //CoveredLines: [52, 62, 63, 64, 65, 66, 67, 68, 70]
      //Assert: assertEquals(2, method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      ArrayList<EsProduct> arrayList0 = new ArrayList<EsProduct>();
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(esProductDao0).getAllEsProductList(nullable(java.lang.Long.class));
      //mock internalMax0
      InternalMax internalMax0 = mock(InternalMax.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock internalMax1
      InternalMax internalMax1 = mock(InternalMax.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iterator0
      Iterator<InternalMax> iterator0 = (Iterator<InternalMax>) mock(Iterator.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn(internalMax1, internalMax0).when(iterator0).next();
      //mock iterable0
      Iterable<InternalMax> iterable0 = (Iterable<InternalMax>) mock(Iterable.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iterator0).when(iterable0).iterator();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iterable0).when(esProductRepository0).saveAll(nullable(java.lang.Iterable.class));
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      
      //Call method: importAll
      int int0 = esProductServiceImpl0.importAll();
      
      //Test Result Assert
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test_recommend_5()  throws Throwable  {
      //caseID:81a038a74e38be200562dc95eb8fe74f
      //CoveredLines: [52, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209]
      //Input_0_Long: 0L
      //Input_1_Integer: 1428
      //Input_2_Integer: 1428
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      LinkedList<EsProduct> linkedList0 = new LinkedList<EsProduct>();
      Long long0 = new Long(0L);
      //mock esProduct0
      EsProduct esProduct0 = mock(EsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(esProduct0).getBrandId();
      doReturn("SUM").when(esProduct0).getName();
      doReturn(long0).when(esProduct0).getProductCategoryId();
      linkedList0.add(esProduct0);
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(esProductDao0).getAllEsProductList(anyLong());
      //mock searchHits0
      SearchHits<EsProduct> searchHits0 = (SearchHits<EsProduct>) mock(SearchHits.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock elasticsearchRestTemplate0
      ElasticsearchRestTemplate elasticsearchRestTemplate0 = mock(ElasticsearchRestTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(searchHits0).when(elasticsearchRestTemplate0).search(any(org.springframework.data.elasticsearch.core.query.Query.class) , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "elasticsearchRestTemplate", (Object) elasticsearchRestTemplate0);
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Integer integer0 = new Integer(1428);
      
      //Call method: recommend
      // Undeclared exception!
      try { 
        esProductServiceImpl0.recommend(long0, integer0, integer0);
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("Content must not be null!", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_search_6()  throws Throwable  {
      //caseID:9ca2d23667597690ebcc3100f7339ea9
      //CoveredLines: [52, 104, 105]
      //Input_0_String: "1"
      //Input_1_Integer: JLayeredPane.POPUP_LAYER
      //Input_2_Integer: JLayeredPane.POPUP_LAYER
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      
      //Call method: search
      Page<EsProduct> page0 = esProductServiceImpl0.search("1", integer0, integer0);
      
      //Test Result Assert
      assertNull(page0);
  }

  @Test(timeout = 4000)
  public void test_search_7()  throws Throwable  {
      //caseID:3ea3cfa631cc83574573803bc7548f2b
      //CoveredLines: [52, 110, 111, 113, 115, 116, 117, 118, 120, 121, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 150, 152, 160, 161, 162, 163, 164, 165]
      //Input_0_String: "ASC"
      //Input_1_Long: 159L
      //Input_2_Long: 159L
      //Input_3_Integer: 3
      //Input_4_Integer: 3
      //Input_5_Integer: 3
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock searchHits0
      SearchHits<EsProduct> searchHits0 = (SearchHits<EsProduct>) mock(SearchHits.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock elasticsearchRestTemplate0
      ElasticsearchRestTemplate elasticsearchRestTemplate0 = mock(ElasticsearchRestTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(searchHits0).when(elasticsearchRestTemplate0).search(any(org.springframework.data.elasticsearch.core.query.Query.class) , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "elasticsearchRestTemplate", (Object) elasticsearchRestTemplate0);
      Long long0 = new Long(159L);
      Integer integer0 = new Integer(3);
      
      //Call method: search
      // Undeclared exception!
      try { 
        esProductServiceImpl0.search("ASC", long0, long0, integer0, integer0, integer0);
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("Content must not be null!", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_search_8()  throws Throwable  {
      //caseID:d4bda7104d6e3cc557c85c906773e6dc
      //CoveredLines: [52, 110, 111, 113, 115, 116, 117, 118, 120, 121, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 150, 153, 158, 160, 161, 162, 163, 164, 165]
      //Input_0_String: "ASC"
      //Input_1_Long: 159L
      //Input_2_Long: 159L
      //Input_3_Integer: JLayeredPane.MODAL_LAYER
      //Input_4_Integer: JLayeredPane.MODAL_LAYER
      //Input_5_Integer: JLayeredPane.MODAL_LAYER
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock searchHits0
      SearchHits<EsProduct> searchHits0 = (SearchHits<EsProduct>) mock(SearchHits.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(searchHits0).getTotalHits();
      //mock elasticsearchRestTemplate0
      ElasticsearchRestTemplate elasticsearchRestTemplate0 = mock(ElasticsearchRestTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(searchHits0).when(elasticsearchRestTemplate0).search(any(org.springframework.data.elasticsearch.core.query.Query.class) , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "elasticsearchRestTemplate", (Object) elasticsearchRestTemplate0);
      Long long0 = new Long(159L);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      
      //Call method: search
      // Undeclared exception!
      try { 
        esProductServiceImpl0.search("ASC", long0, long0, integer0, integer0, integer0);
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("Content must not be null!", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_searchRelatedInfo_9()  throws Throwable  {
      //caseID:5129e05facf1d7b43556aecce442b756
      //CoveredLines: [52, 219, 221, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 249, 250, 252, 253, 254]
      //Input_0_String: "attrNames"
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock aggregation0
      Aggregation aggregation0 = mock(Aggregation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map0
      Map<String, Aggregation> map0 = (Map<String, Aggregation>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(aggregation0).when(map0).get(any());
      //mock aggregations0
      Aggregations aggregations0 = mock(Aggregations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(aggregations0).getAsMap();
      //mock searchHits0
      SearchHits<EsProduct> searchHits0 = (SearchHits<EsProduct>) mock(SearchHits.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(aggregations0).when(searchHits0).getAggregations();
      //mock elasticsearchRestTemplate0
      ElasticsearchRestTemplate elasticsearchRestTemplate0 = mock(ElasticsearchRestTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(searchHits0).when(elasticsearchRestTemplate0).search(any(org.springframework.data.elasticsearch.core.query.Query.class) , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "elasticsearchRestTemplate", (Object) elasticsearchRestTemplate0);
      
      //Call method: searchRelatedInfo
      // Undeclared exception!
      try { 
        esProductServiceImpl0.searchRelatedInfo("attrNames");
      } catch(Throwable e) {
         verifyException("com.macro.mall.search.service.impl.EsProductServiceImpl", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
      }
  }
}
