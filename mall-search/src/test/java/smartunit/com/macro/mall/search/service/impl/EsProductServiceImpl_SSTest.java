/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.search.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.search.dao.EsProductDao;
import com.macro.mall.search.domain.EsProduct;
import com.macro.mall.search.repository.EsProductRepository;
import com.macro.mall.search.service.impl.EsProductServiceImpl;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.search.aggregations.Aggregation;
import org.elasticsearch.search.aggregations.Aggregations;
import org.elasticsearch.search.aggregations.bucket.terms.ParsedLongTerms;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;
import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;
import org.springframework.data.elasticsearch.core.SearchHits;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EsProductServiceImpl_SSTest extends EsProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[52, 62, 63, 64, 65, 66, 67, 68, 70, 75, 76, 80, 81, 82, 83, 84, 86, 91, 92, 93, 94, 95, 96, 97, 98, 100, 104, 105, 110, 111, 113, 115, 116, 117, 118, 120, 121, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 150, 153, 158, 160, 161, 162, 163, 173, 219, 221, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 249, 250, 252, 253, 254]

  @Test(timeout = 4000)
  public void test_convertProductRelatedInfo_0()  throws Throwable  {
      //caseID:8a5ec6eae62ee944942ea38f81be06ef
      //CoveredLines: [52, 249, 250, 252, 253, 254]
      //Input_0_org.springframework.data.elasticsearch.core.SearchHits<com.macro.mall.search.domain.EsProduct>: {getAggregations=aggregations0}
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock aggregation0
      Aggregation aggregation0 = mock(Aggregation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map0
      Map<String, Aggregation> map0 = (Map<String, Aggregation>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(aggregation0).when(map0).get(any());
      //mock aggregations0
      Aggregations aggregations0 = mock(Aggregations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(aggregations0).getAsMap();
      //mock searchHits0
      SearchHits<EsProduct> searchHits0 = (SearchHits<EsProduct>) mock(SearchHits.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(aggregations0).when(searchHits0).getAggregations();
      
      //Call method: convertProductRelatedInfo
      try { 
        PrivateAccess.callMethod((Class<EsProductServiceImpl>) EsProductServiceImpl.class, esProductServiceImpl0, "convertProductRelatedInfo", (Object) searchHits0, (Class<?>) SearchHits.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.search.service.impl.EsProductServiceImpl", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:67e60be819d2e51a4b68da4af6864515
      //CoveredLines: [52, 80, 81, 82, 83, 84, 86]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Vector<EsProduct> vector0 = new Vector<EsProduct>();
      //mock esProduct0
      EsProduct esProduct0 = mock(EsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(esProduct0);
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(esProductDao0).getAllEsProductList(anyLong());
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      Long long0 = new Long(0L);
      
      //Call method: create
      EsProduct esProduct1 = esProductServiceImpl0.create(long0);
      
      //Test Result Assert
      assertNull(esProduct1);
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:5a282a62d050120c6390db2dafcfda8f
      //CoveredLines: [52, 91, 100]
      //Input_0_List<Long>: arrayList0
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      //Call method: delete
      esProductServiceImpl0.delete((List<Long>) arrayList0);
      
      //Test Result Assert
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:20fa3a00e8dbd55eb042c4fc73356acb
      //CoveredLines: [52, 75, 76]
      //Input_0_Long: 90L
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Long long0 = new Long(90L);
      
      //Call method: delete
      esProductServiceImpl0.delete(long0);
  }

  @Test(timeout = 4000)
  public void test_delete_4()  throws Throwable  {
      //caseID:b249394c6808c72bc7ec5c7c179c13e4
      //CoveredLines: [52, 91, 92, 93, 94, 95, 96, 97, 98, 100]
      //Input_0_List<Long>: vector0
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Vector<Long> vector0 = new Vector<Long>();
      Long long0 = new Long(1889L);
      
      vector0.add(long0);
      
      //Call method: delete
      esProductServiceImpl0.delete((List<Long>) vector0);
      
      //Test Result Assert
      assertEquals("[1889]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test_importAll_5()  throws Throwable  {
      //caseID:3bb7486279c856df8d9129101b07f32b
      //CoveredLines: [52, 62, 63, 64, 65, 66, 67, 68, 70]
      //Assert: assertEquals(3, method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Vector<EsProduct> vector0 = new Vector<EsProduct>();
      //mock esProductDao0
      EsProductDao esProductDao0 = mock(EsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(esProductDao0).getAllEsProductList(nullable(java.lang.Long.class));
      //mock parsedLongTerms_ParsedBucket0
      ParsedLongTerms.ParsedBucket parsedLongTerms_ParsedBucket0 = mock(ParsedLongTerms.ParsedBucket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock parsedLongTerms_ParsedBucket1
      ParsedLongTerms.ParsedBucket parsedLongTerms_ParsedBucket1 = mock(ParsedLongTerms.ParsedBucket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock parsedLongTerms_ParsedBucket2
      ParsedLongTerms.ParsedBucket parsedLongTerms_ParsedBucket2 = mock(ParsedLongTerms.ParsedBucket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iterator0
      Iterator<ParsedLongTerms.ParsedBucket> iterator0 = (Iterator<ParsedLongTerms.ParsedBucket>) mock(Iterator.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true, true, true, false).when(iterator0).hasNext();
      doReturn(parsedLongTerms_ParsedBucket2, parsedLongTerms_ParsedBucket1, parsedLongTerms_ParsedBucket0).when(iterator0).next();
      //mock iterable0
      Iterable<ParsedLongTerms.ParsedBucket> iterable0 = (Iterable<ParsedLongTerms.ParsedBucket>) mock(Iterable.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iterator0).when(iterable0).iterator();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iterable0).when(esProductRepository0).saveAll(nullable(java.lang.Iterable.class));
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productDao", (Object) esProductDao0);
      
      //Call method: importAll
      int int0 = esProductServiceImpl0.importAll();
      
      //Test Result Assert
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test_recommend_6()  throws Throwable  {
      //caseID:2450131dc74e7fa34b67a872432b3983
      //CoveredLines: [52, 173]
      //Input_0_Long: 0L
      //Input_1_Integer: JLayeredPane.FRAME_CONTENT_LAYER
      //Input_2_Integer: JLayeredPane.FRAME_CONTENT_LAYER
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      
      //Call method: recommend
      // Undeclared exception!
      try { 
        esProductServiceImpl0.recommend(long0, integer0, integer0);
      } catch(Throwable e) {
         verifyException("org.springframework.data.domain.AbstractPageRequest", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("Page index must not be less than zero!", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_search_7()  throws Throwable  {
      //caseID:9032ff4743860cee747cba13d5c7fb72
      //CoveredLines: [52, 104, 105]
      //Input_0_String: mzcw)d#smsp.y
      //Input_1_Integer: JLayeredPane.POPUP_LAYER
      //Input_2_Integer: JLayeredPane.POPUP_LAYER
      //Assert: assertNull(method_result);
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock esProductRepository0
      EsProductRepository esProductRepository0 = mock(EsProductRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "productRepository", (Object) esProductRepository0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      
      //Call method: search
      Page<EsProduct> page0 = esProductServiceImpl0.search("mzcw)d#smsp.y", integer0, integer0);
      
      //Test Result Assert
      assertNull(page0);
  }

  @Test(timeout = 4000)
  public void test_search_8()  throws Throwable  {
      //caseID:95a10a504747c143b9f91556b7ff203e
      //CoveredLines: [52, 110, 111, 113, 115, 116, 117, 118, 120, 121, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 150, 153, 158, 160, 161, 162, 163]
      //Input_0_String: cV1+k19
      //Input_1_Long: 2494L
      //Input_2_Long: 2494L
      //Input_3_Integer: JLayeredPane.PALETTE_LAYER
      //Input_4_Integer: JLayeredPane.PALETTE_LAYER
      //Input_5_Integer: JLayeredPane.PALETTE_LAYER
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock restHighLevelClient0
      RestHighLevelClient restHighLevelClient0 = mock(RestHighLevelClient.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ElasticsearchRestTemplate elasticsearchRestTemplate0 = new ElasticsearchRestTemplate(restHighLevelClient0);
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "elasticsearchRestTemplate", (Object) elasticsearchRestTemplate0);
      Long long0 = new Long(2494L);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      
      //Call method: search
      // Undeclared exception!
      try { 
        esProductServiceImpl0.search("cV1+k19", long0, long0, integer0, integer0, integer0);
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("searchResponse must not be null", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_searchRelatedInfo_9()  throws Throwable  {
      //caseID:e490a9a9a9ebde5ad25877fbb6fcd5d1
      //CoveredLines: [52, 219, 221, 224, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241]
      //Input_0_String: brandNames
      
      EsProductServiceImpl esProductServiceImpl0 = new EsProductServiceImpl();
      //mock restHighLevelClient0
      RestHighLevelClient restHighLevelClient0 = mock(RestHighLevelClient.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ElasticsearchRestTemplate elasticsearchRestTemplate0 = new ElasticsearchRestTemplate(restHighLevelClient0);
      
      PrivateAccess.setVariable((Class<?>) EsProductServiceImpl.class, esProductServiceImpl0, "elasticsearchRestTemplate", (Object) elasticsearchRestTemplate0);
      
      //Call method: searchRelatedInfo
      // Undeclared exception!
      try { 
        esProductServiceImpl0.searchRelatedInfo("brandNames");
      } catch(Throwable e) {
         verifyException("org.springframework.util.Assert", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("searchResponse must not be null", e.getMessage());
      }
  }
}
