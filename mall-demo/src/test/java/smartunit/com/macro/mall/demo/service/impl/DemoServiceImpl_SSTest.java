/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.demo.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.demo.dto.PmsBrandDto;
import com.macro.mall.demo.service.impl.DemoServiceImpl;
import com.macro.mall.mapper.PmsBrandMapper;
import com.macro.mall.model.PmsBrand;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DemoServiceImpl_SSTest extends DemoServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 25, 30, 31, 32, 37, 38, 39, 40, 45, 50, 51, 56]

  @Test(timeout = 4000)
  public void test_createBrand_0()  throws Throwable  {
      //caseID:b79881b7612ffc52d986affcd25e7e74
      //CoveredLines: [19, 30, 31, 32]
      //Input_0_PmsBrandDto: {}
      //Assert: assertEquals(0, method_result);
      
      DemoServiceImpl demoServiceImpl0 = new DemoServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DemoServiceImpl.class, demoServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      //mock pmsBrandDto0
      PmsBrandDto pmsBrandDto0 = mock(PmsBrandDto.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createBrand
      int int0 = demoServiceImpl0.createBrand(pmsBrandDto0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_deleteBrand_1()  throws Throwable  {
      //caseID:4dc2efc75cf40bc6e0671df92c6a2051
      //CoveredLines: [19, 45]
      //Input_0_Long: 1L
      //Assert: assertEquals(0, method_result);
      
      DemoServiceImpl demoServiceImpl0 = new DemoServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DemoServiceImpl.class, demoServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long(1L);
      
      //Call method: deleteBrand
      int int0 = demoServiceImpl0.deleteBrand(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getBrand_2()  throws Throwable  {
      //caseID:dae933c979ad50fd0069d23850398b91
      //CoveredLines: [19, 56]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      DemoServiceImpl demoServiceImpl0 = new DemoServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DemoServiceImpl.class, demoServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getBrand
      PmsBrand pmsBrand0 = demoServiceImpl0.getBrand(long0);
      
      //Test Result Assert
      assertNull(pmsBrand0);
  }

  @Test(timeout = 4000)
  public void test_listAllBrand_3()  throws Throwable  {
      //caseID:5328bdecbb058919cdeecc8978187c72
      //CoveredLines: [19, 25]
      //Assert: assertNull(method_result);
      
      DemoServiceImpl demoServiceImpl0 = new DemoServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DemoServiceImpl.class, demoServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listAllBrand
      List<PmsBrand> list0 = demoServiceImpl0.listAllBrand();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listBrand_4()  throws Throwable  {
      //caseID:bef8d39a70ac05637ec4be445bd5a283
      //CoveredLines: [19, 50, 51]
      //Input_0_int: 0
      //Input_1_int: 1
      //Assert: assertNull(method_result);
      
      DemoServiceImpl demoServiceImpl0 = new DemoServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DemoServiceImpl.class, demoServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listBrand
      List<PmsBrand> list0 = demoServiceImpl0.listBrand(0, 1);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateBrand_5()  throws Throwable  {
      //caseID:0e1a88be75e136356489bb018f8e1061
      //CoveredLines: [19, 37, 38, 39, 40]
      //Input_0_Long: 3257L
      //Input_1_PmsBrandDto: {}
      //Assert: assertEquals(0, method_result);
      
      DemoServiceImpl demoServiceImpl0 = new DemoServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DemoServiceImpl.class, demoServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long(3257L);
      //mock pmsBrandDto0
      PmsBrandDto pmsBrandDto0 = mock(PmsBrandDto.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateBrand
      int int0 = demoServiceImpl0.updateBrand(long0, pmsBrandDto0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
