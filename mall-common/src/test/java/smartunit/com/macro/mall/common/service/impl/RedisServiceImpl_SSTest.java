/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.service.impl.RedisServiceImpl;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultListCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.SetOperations;
import org.springframework.data.redis.core.ValueOperations;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisServiceImpl_SSTest extends RedisServiceImpl_SSTest_scaffolding {
// allCoveredLines:[16, 22, 23, 27, 28, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 78, 83, 84, 88, 93, 94, 99, 100, 104, 105, 109, 114, 119, 124, 129, 134, 135, 136, 141, 146, 151, 156, 161, 166, 171, 176, 177, 178, 183, 188, 189, 190, 195]

  @Test(timeout = 4000)
  public void test_decr_00()  throws Throwable  {
      //caseID:49d60030f2ad83758fc3e8185558ed6d
      //CoveredLines: [16, 67]
      //Input_0_String: "1.0"
      //Input_1_long: 0L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock valueOperations0
      ValueOperations<String, Object> valueOperations0 = (ValueOperations<String, Object>) mock(ValueOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: decr
      Long long0 = redisServiceImpl0.decr("1.0", 0L);
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_del_01()  throws Throwable  {
      //caseID:817c22f328468ded615100e992edc9da
      //CoveredLines: [16, 42]
      //Input_0_String>: linkedList0
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      
      //Call method: del
      Long long0 = redisServiceImpl0.del((List<String>) linkedList0);
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_del_02()  throws Throwable  {
      //caseID:ca6e1428b38e97531015dcbe17e58b69
      //CoveredLines: [16, 37]
      //Input_0_String: "1"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: del
      Boolean boolean0 = redisServiceImpl0.del("1");
      
      //Test Result Assert
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test_get_03()  throws Throwable  {
      //caseID:e090e96333fd5429762ebe66e84057da
      //CoveredLines: [16, 32]
      //Input_0_String: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock valueOperations0
      ValueOperations<String, Object> valueOperations0 = (ValueOperations<String, Object>) mock(ValueOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: get
      Object object0 = redisServiceImpl0.get("com.macro.mall.common.service.impl.RedisServiceImpl");
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getExpire_04()  throws Throwable  {
      //caseID:2563c9d6c504153b65a420c939db989f
      //CoveredLines: [16, 52]
      //Input_0_String: "|<7~,?c BY3@)WD6;"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: getExpire
      Long long0 = redisServiceImpl0.getExpire("|<7~,?c BY3@)WD6;");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_hDecr_05()  throws Throwable  {
      //caseID:87b522b0daeba71104f3322f2de737bf
      //CoveredLines: [16, 119]
      //Input_0_String: ""
      //Input_1_String: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Input_2_Long: 360L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, Integer, DefaultListCellRenderer.UIResource> hashOperations0 = (HashOperations<String, Integer, DefaultListCellRenderer.UIResource>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Long long0 = new Long(360L);
      
      //Call method: hDecr
      Long long1 = redisServiceImpl0.hDecr("", "com.macro.mall.common.service.impl.RedisServiceImpl", long0);
      
      //Test Result Assert
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test_hDel_06()  throws Throwable  {
      //caseID:3cfa5eabe4948978cec8f12f7dac9744
      //CoveredLines: [16, 104, 105]
      //Input_0_String: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Input_1_Object[]: objectArray0
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, DefaultTableModel, Object> hashOperations0 = (HashOperations<String, DefaultTableModel, Object>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Object[] objectArray0 = new Object[9];
      
      //Call method: hDel
      redisServiceImpl0.hDel("com.macro.mall.common.service.impl.RedisServiceImpl", objectArray0);
      
      //Test Result Assert
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test_hGet_07()  throws Throwable  {
      //caseID:c7eed52f8cba871607af9dcc4477a410
      //CoveredLines: [16, 72]
      //Input_0_String: "Sk'V"
      //Input_1_String: "Cannot apply @Lookup to beans without corresponding bean definition"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, Integer, Object> hashOperations0 = (HashOperations<String, Integer, Object>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: hGet
      Object object0 = redisServiceImpl0.hGet("Sk'V", "Cannot apply @Lookup to beans without corresponding bean definition");
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_hGetAll_08()  throws Throwable  {
      //caseID:d37b2eab9f6a7bdebfb14b7d142e6b10
      //CoveredLines: [16, 88]
      //Input_0_String: "1"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, Object, DefaultListCellRenderer.UIResource> hashOperations0 = (HashOperations<String, Object, DefaultListCellRenderer.UIResource>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: hGetAll
      Map<Object, Object> map0 = redisServiceImpl0.hGetAll("1");
      
      //Test Result Assert
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test_hHasKey_09()  throws Throwable  {
      //caseID:74b8dce72f313b022f1a10c26060a6f1
      //CoveredLines: [16, 109]
      //Input_0_String: "A class must be provided"
      //Input_1_String: "1"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, DefaultListCellRenderer.UIResource, Integer> hashOperations0 = (HashOperations<String, DefaultListCellRenderer.UIResource, Integer>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: hHasKey
      Boolean boolean0 = redisServiceImpl0.hHasKey("A class must be provided", "1");
      
      //Test Result Assert
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hIncr_10()  throws Throwable  {
      //caseID:85785fabd54d003ac133e3175edb684f
      //CoveredLines: [16, 114]
      //Input_0_String: "1.0"
      //Input_1_String: "1"
      //Input_2_Long: 3778L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, String, String> hashOperations0 = (HashOperations<String, String, String>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Long long0 = new Long(3778L);
      
      //Call method: hIncr
      Long long1 = redisServiceImpl0.hIncr("1.0", "1", long0);
      
      //Test Result Assert
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test_hSet_11()  throws Throwable  {
      //caseID:18d14b6cbf4eef20e8dd8dbc8b5e34f6
      //CoveredLines: [16, 83, 84]
      //Input_0_String: ""
      //Input_1_String: "1.0"
      //Input_2_Object: ""
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, String, Object> hashOperations0 = (HashOperations<String, String, Object>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: hSet
      redisServiceImpl0.hSet("", "1.0", (Object) "");
  }

  @Test(timeout = 4000)
  public void test_hSet_12()  throws Throwable  {
      //caseID:235100f6d27aeabf031fa75263fbb22d
      //CoveredLines: [16, 47, 77, 78]
      //Input_0_String: "1.0"
      //Input_1_String: "javax.servlet.include.request_uri"
      //Input_2_Object: "1.0"
      //Input_3_long: 2552L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, String, DefaultTableModel> hashOperations0 = (HashOperations<String, String, DefaultTableModel>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: hSet
      Boolean boolean0 = redisServiceImpl0.hSet("1.0", "javax.servlet.include.request_uri", (Object) "1.0", 2552L);
      
      //Test Result Assert
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hSetAll_13()  throws Throwable  {
      //caseID:55d326479e0a3f6dfe8c65f2a045ebb0
      //CoveredLines: [16, 99, 100]
      //Input_0_String: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Input_1_String, ?>: {}
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, DefaultListCellRenderer.UIResource, Integer> hashOperations0 = (HashOperations<String, DefaultListCellRenderer.UIResource, Integer>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      //mock map0
      Map<String, DefaultListCellRenderer.UIResource> map0 = (Map<String, DefaultListCellRenderer.UIResource>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: hSetAll
      redisServiceImpl0.hSetAll("com.macro.mall.common.service.impl.RedisServiceImpl", map0);
  }

  @Test(timeout = 4000)
  public void test_hSetAll_14()  throws Throwable  {
      //caseID:a1dedc28bbb839a266f5af0cb8b45f59
      //CoveredLines: [16, 47, 93, 94]
      //Input_0_String: "1"
      //Input_1_Object>: {}
      //Input_2_long: 0L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock hashOperations0
      HashOperations<String, DefaultListCellRenderer.UIResource, Object> hashOperations0 = (HashOperations<String, DefaultListCellRenderer.UIResource, Object>) mock(HashOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashOperations0).when(redisTemplate0).opsForHash();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      //mock map0
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: hSetAll
      Boolean boolean0 = redisServiceImpl0.hSetAll("1", map0, 0L);
      
      //Test Result Assert
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hasKey_15()  throws Throwable  {
      //caseID:ae62934a4778fafc4ed1a205c1117052
      //CoveredLines: [16, 57]
      //Input_0_String: "INCONCLUSIVE"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: hasKey
      Boolean boolean0 = redisServiceImpl0.hasKey("INCONCLUSIVE");
      
      //Test Result Assert
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test_incr_16()  throws Throwable  {
      //caseID:383b2ba7caad657318b79fb2be3bac18
      //CoveredLines: [16, 62]
      //Input_0_String: "1.0"
      //Input_1_long: 1402L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock valueOperations0
      ValueOperations<String, Object> valueOperations0 = (ValueOperations<String, Object>) mock(ValueOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: incr
      Long long0 = redisServiceImpl0.incr("1.0", 1402L);
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_lIndex_17()  throws Throwable  {
      //caseID:5e51053ff7cb1f63f244e6dba634e0cb
      //CoveredLines: [16, 166]
      //Input_0_String: "EmNmh,}"
      //Input_1_long: 1566L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: lIndex
      Object object0 = redisServiceImpl0.lIndex("EmNmh,}", 1566L);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_lPush_18()  throws Throwable  {
      //caseID:d448097aaeb79112daaf31ab65cb1ad9
      //CoveredLines: [16, 171]
      //Input_0_String: "1.0"
      //Input_1_Object: "1.0"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: lPush
      Long long0 = redisServiceImpl0.lPush("1.0", (Object) "1.0");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_lPush_19()  throws Throwable  {
      //caseID:8eec146a45aadd0a852e0f7cb1733fcf
      //CoveredLines: [16, 47, 176, 177, 178]
      //Input_0_String: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Input_1_Object: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Input_2_long: 794L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: lPush
      Long long0 = redisServiceImpl0.lPush("com.macro.mall.common.service.impl.RedisServiceImpl", (Object) "com.macro.mall.common.service.impl.RedisServiceImpl", 794L);
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_lPushAll_20()  throws Throwable  {
      //caseID:f264e90c1c812f98c86161cd1eb80402
      //CoveredLines: [16, 183]
      //Input_0_String: "1.0"
      //Input_1_Object[]: objectArray0
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      Long long0 = new Long(0L);
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(listOperations0).rightPushAll(anyString() , any(java.lang.Object[].class));
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Object[] objectArray0 = new Object[0];
      
      //Call method: lPushAll
      Long long1 = redisServiceImpl0.lPushAll("1.0", objectArray0);
      //  // Unstable assertion: 
      //Test Result Assert
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test_lPushAll_21()  throws Throwable  {
      //caseID:3b7e694cacc581d70d1a932bc07903c4
      //CoveredLines: [16, 47, 188, 189, 190]
      //Input_0_String: "1"
      //Input_1_Long: 2111L
      //Input_2_Object[]: objectArray0
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Long long0 = new Long(2111L);
      Object[] objectArray0 = new Object[0];
      
      //Call method: lPushAll
      Long long1 = redisServiceImpl0.lPushAll("1", long0, objectArray0);
      
      //Test Result Assert
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test_lRange_22()  throws Throwable  {
      //caseID:c2359be95fdd00bb7870dcb0966edcde
      //CoveredLines: [16, 156]
      //Input_0_String: "D'<m35ZUh>nwXx`)Vd"
      //Input_1_long: 1211L
      //Input_2_long: 2796L
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: lRange
      List<Object> list0 = redisServiceImpl0.lRange("D'<m35ZUh>nwXx`)Vd", 1211L, 2796L);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_lRemove_23()  throws Throwable  {
      //caseID:846bc83701ab93ca95836e8dd7f12aee
      //CoveredLines: [16, 195]
      //Input_0_String: ""
      //Input_1_long: 1L
      //Input_2_Object: ""
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: lRemove
      Long long0 = redisServiceImpl0.lRemove("", 1L, "");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_lSize_24()  throws Throwable  {
      //caseID:8c46d02e106a9f64627568518df47133
      //CoveredLines: [16, 161]
      //Input_0_String: "org.springframework.core.convert.support.ArrayToObjectConverter"
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock listOperations0
      ListOperations<String, Object> listOperations0 = (ListOperations<String, Object>) mock(ListOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(listOperations0).when(redisTemplate0).opsForList();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: lSize
      Long long0 = redisServiceImpl0.lSize("org.springframework.core.convert.support.ArrayToObjectConverter");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_sAdd_25()  throws Throwable  {
      //caseID:607b4b29d7b0f021246847275485f856
    try {
      //CoveredLines: [16, 129]
      //Input_0_String: "write raw value"
      //Input_1_Object[]: objectArray0
      //Assert: assertEquals(0L, (long)method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      Long long0 = new Long(0L);
      //mock setOperations0
      SetOperations<String, Object> setOperations0 = (SetOperations<String, Object>) mock(SetOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(setOperations0).add(anyString() , any(java.lang.Object[].class));
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(setOperations0).when(redisTemplate0).opsForSet();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Object[] objectArray0 = new Object[1];
      
      //Call method: sAdd
      Long long1 = redisServiceImpl0.sAdd("write raw value", objectArray0);
      
      //Test Result Assert
      assertEquals(0L, (long)long1);
    } catch (java.lang.Exception checkException) {
            // Need to catch junit check exceptions
   assertEquals("java.lang.NullPointerException", checkException.getClass().getName());

    }
  }

  @Test(timeout = 4000)
  public void test_sAdd_26()  throws Throwable  {
      //caseID:082da352900a4cb9392164d2e3ce6ddd
      //CoveredLines: [16, 47, 134, 135, 136]
      //Input_0_String: "CleDs'"
      //Input_1_long: 4132L
      //Input_2_Object[]: objectArray0
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock setOperations0
      SetOperations<String, Object> setOperations0 = (SetOperations<String, Object>) mock(SetOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(setOperations0).when(redisTemplate0).opsForSet();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Object[] objectArray0 = new Object[3];
      
      //Call method: sAdd
      Long long0 = redisServiceImpl0.sAdd("CleDs'", 4132L, objectArray0);
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_sIsMember_27()  throws Throwable  {
      //caseID:d9189ee4f59bf29fac0c4373945a6e97
      //CoveredLines: [16, 141]
      //Input_0_String: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Input_1_Object: "com.macro.mall.common.service.impl.RedisServiceImpl"
      //Assert: assertTrue(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      Boolean boolean0 = Boolean.TRUE;
      //mock setOperations0
      SetOperations<String, Object> setOperations0 = (SetOperations<String, Object>) mock(SetOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(setOperations0).isMember(anyString() , any());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(setOperations0).when(redisTemplate0).opsForSet();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: sIsMember
      Boolean boolean1 = redisServiceImpl0.sIsMember("com.macro.mall.common.service.impl.RedisServiceImpl", "com.macro.mall.common.service.impl.RedisServiceImpl");
      
      //Test Result Assert
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test_sMembers_28()  throws Throwable  {
      //caseID:2d6315020256e20d202f00d8076de08d
      //CoveredLines: [16, 124]
      //Input_0_String: ""
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock setOperations0
      SetOperations<String, Object> setOperations0 = (SetOperations<String, Object>) mock(SetOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(setOperations0).when(redisTemplate0).opsForSet();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: sMembers
      Set<Object> set0 = redisServiceImpl0.sMembers("");
      
      //Test Result Assert
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test_sRemove_29()  throws Throwable  {
      //caseID:95c55ea1801fda7c4bc16965dc9b5123
      //CoveredLines: [16, 151]
      //Input_0_String: "T]*S2*K"
      //Input_1_Object[]: objectArray0
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock setOperations0
      SetOperations<String, Object> setOperations0 = (SetOperations<String, Object>) mock(SetOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(setOperations0).when(redisTemplate0).opsForSet();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      Object[] objectArray0 = new Object[1];
      
      //Call method: sRemove
      Long long0 = redisServiceImpl0.sRemove("T]*S2*K", objectArray0);
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_sSize_30()  throws Throwable  {
      //caseID:1fd093d37f198dd678b8e14b56c0cda4
      //CoveredLines: [16, 146]
      //Input_0_String: ""
      //Assert: assertNull(method_result);
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock setOperations0
      SetOperations<String, Object> setOperations0 = (SetOperations<String, Object>) mock(SetOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(setOperations0).when(redisTemplate0).opsForSet();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: sSize
      Long long0 = redisServiceImpl0.sSize("");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_set_31()  throws Throwable  {
      //caseID:ac9f99cabf2632a0191a7d765d114501
      //CoveredLines: [16, 27, 28]
      //Input_0_String: "com.fasterxml.jackson.databind.KeyDeserializer$None"
      //Input_1_Object: "com.fasterxml.jackson.databind.KeyDeserializer$None"
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock valueOperations0
      ValueOperations<String, Object> valueOperations0 = (ValueOperations<String, Object>) mock(ValueOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: set
      redisServiceImpl0.set("com.fasterxml.jackson.databind.KeyDeserializer$None", (Object) "com.fasterxml.jackson.databind.KeyDeserializer$None");
  }

  @Test(timeout = 4000)
  public void test_set_32()  throws Throwable  {
      //caseID:d7c96bd9444ac9e21e9f588973bd85e2
      //CoveredLines: [16, 22, 23]
      //Input_0_String: "WRITE_SORTED_MAP_ENTRIES"
      //Input_1_Object: "WRITE_SORTED_MAP_ENTRIES"
      //Input_2_long: 116L
      
      RedisServiceImpl redisServiceImpl0 = new RedisServiceImpl();
      //mock valueOperations0
      ValueOperations<String, Object> valueOperations0 = (ValueOperations<String, Object>) mock(ValueOperations.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisTemplate0
      RedisTemplate<String, Object> redisTemplate0 = (RedisTemplate<String, Object>) mock(RedisTemplate.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      PrivateAccess.setVariable((Class<?>) RedisServiceImpl.class, redisServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: set
      redisServiceImpl0.set("WRITE_SORTED_MAP_ENTRIES", (Object) "WRITE_SORTED_MAP_ENTRIES", 116L);
  }
}
