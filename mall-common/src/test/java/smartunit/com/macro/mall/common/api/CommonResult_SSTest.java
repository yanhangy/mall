/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.api;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.common.api.IErrorCode;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommonResult_SSTest extends CommonResult_SSTest_scaffolding {
// allCoveredLines:[24, 25, 26, 27, 28, 36, 46, 54, 63, 71, 78, 85, 93, 100, 107, 111, 115, 116, 119, 123, 124, 127, 131, 132]

  @Test(timeout = 4000)
  public void test_failed_00()  throws Throwable  {
      //caseID:af04bdbbab8090a2f90ad03335cf4d57
      //CoveredLines: [24, 25, 26, 27, 28, 54, 63, 78]
      //Input_0_IErrorCode: {getCode=2637L}
      //Input_1_String:  #G|j
      //Assert: assertEquals(2637L, method_result.getCode());
      
      
      //Call method: failed
      CommonResult.failed();
      //mock iErrorCode0
      IErrorCode iErrorCode0 = mock(IErrorCode.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2637L).when(iErrorCode0).getCode();
      
      //Call method: failed
      CommonResult<Object> commonResult1 = CommonResult.failed(iErrorCode0, " #G|j");
      
      //Test Result Assert
      assertEquals(2637L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_failed_01()  throws Throwable  {
      //caseID:debdf7f61a6e3b80a4ab6dfecc89061f
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 93]
      //Assert: assertEquals(500L, method_result.getCode());
      
      
      CommonResult.validateFailed("9{MlVJd*@sip,e");
      
      //Call method: failed
      CommonResult<Integer> commonResult0 = CommonResult.failed();
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_failed_02()  throws Throwable  {
      //caseID:fed0c98ae5dffa52a4e1e4d7be6e514e
      //CoveredLines: [24, 25, 26, 27, 28, 46, 54, 78]
      //Assert: assertEquals(500L, method_result.getCode());
      
      
      CommonResult.success("", "2");
      
      //Call method: failed
      CommonResult<Object> commonResult0 = CommonResult.failed();
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_failed_03()  throws Throwable  {
      //caseID:7997dd116856191898cd1828cb93735d
      //CoveredLines: [24, 25, 26, 27, 28, 54, 71, 78]
      //Input_0_String: 1.0
      //Assert: assertEquals(500L, method_result.getCode());
      
      
      //Call method: failed
      CommonResult.failed();
      
      //Call method: failed
      CommonResult<String> commonResult1 = CommonResult.failed("1.0");
      
      //Test Result Assert
      assertEquals(500L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_forbidden_04()  throws Throwable  {
      //caseID:5ecee866263f391dfc700d99b596f287
      //CoveredLines: [24, 25, 26, 27, 28, 54, 85, 107]
      //Input_0_Object: commonResult0
      //Assert: assertEquals(403L, method_result.getCode());
      
      
      CommonResult<String> commonResult0 = CommonResult.validateFailed();
      
      //Call method: forbidden
      CommonResult<Object> commonResult1 = CommonResult.forbidden((Object) commonResult0);
      
      //Test Result Assert
      assertEquals(403L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_getCode_05()  throws Throwable  {
      //caseID:e607b3189d481364de314db3b00c1b0b
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 111]
      //Assert: assertEquals(500L, method_result);
      
      
      CommonResult<String> commonResult0 = CommonResult.failed();
      
      //Call method: getCode
      long long0 = commonResult0.getCode();
      
      //Test Result Assert
      assertEquals(500L, long0);
  }

  @Test(timeout = 4000)
  public void test_getData_06()  throws Throwable  {
      //caseID:483e568c065b69b7cf7e42aafa392863
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 127]
      //Assert: assertEquals(500L, commonResult0.getCode());
      
      
      CommonResult<Object> commonResult0 = CommonResult.failed();
      
      //Call method: getData
      commonResult0.getData();
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getMessage_07()  throws Throwable  {
      //caseID:1a1b470c7580759b41db77dae1644075
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 119]
      //Assert: assertEquals(500L, commonResult0.getCode());
      
      
      CommonResult<Object> commonResult0 = CommonResult.failed();
      
      //Call method: getMessage
      commonResult0.getMessage();
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setCode_08()  throws Throwable  {
      //caseID:c01fd2f5f054f6aafbc39a3a3df14ef6
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 115, 116]
      //Input_0_long: -1
      
      
      CommonResult<Object> commonResult0 = CommonResult.failed();
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
      
      
      //Call method: setCode
      commonResult0.setCode((-1L));
      
      //Test Result Assert
      assertEquals((-1L), commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_09()  throws Throwable  {
      //caseID:1a5c1e3ed6088b2289726da161de7391
      //CoveredLines: [24, 25, 26, 27, 28, 71, 131, 132]
      //Input_0_Object: object0
      
      
      CommonResult<Object> commonResult0 = CommonResult.failed("1.0");
      Object object0 = new Object();
      
      //Call method: setData
      commonResult0.setData(object0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMessage_10()  throws Throwable  {
      //caseID:548c07061707084c143217a835d0e421
      //CoveredLines: [24, 25, 26, 27, 28, 36, 123, 124]
      //Input_0_String: \u64CD\u4F5C\u6210\u529F
      
      
      CommonResult<String> commonResult0 = CommonResult.success("2k~;k");
      
      //Call method: setMessage
      commonResult0.setMessage("\u64CD\u4F5C\u6210\u529F");
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_success_11()  throws Throwable  {
      //caseID:cd4ec65a0f4b9034ecd18f0f734a55a3
      //CoveredLines: [24, 25, 26, 27, 28, 36, 54, 78]
      //Input_0_Object: 1.0
      //Assert: assertEquals(200L, method_result.getCode());
      
      
      CommonResult.failed();
      
      //Call method: success
      CommonResult<Object> commonResult0 = CommonResult.success((Object) "1.0");
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_unauthorized_12()  throws Throwable  {
      //caseID:053fd0962cefe4985be74be953934280
      //CoveredLines: [24, 25, 26, 27, 28, 54, 85, 100]
      //Input_0_Object: commonResult0
      //Assert: assertEquals(401L, method_result.getCode());
      
      
      CommonResult<String> commonResult0 = CommonResult.validateFailed();
      
      //Call method: unauthorized
      CommonResult<Object> commonResult1 = CommonResult.unauthorized((Object) commonResult0);
      
      //Test Result Assert
      assertEquals(401L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_validateFailed_13()  throws Throwable  {
      //caseID:11326d68a73d683b8f4f393fcaa7621a
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 85]
      //Assert: assertEquals(404L, method_result.getCode());
      
      
      CommonResult.failed();
      
      //Call method: validateFailed
      CommonResult<Object> commonResult0 = CommonResult.validateFailed();
      
      //Test Result Assert
      assertEquals(404L, commonResult0.getCode());
  }
}
