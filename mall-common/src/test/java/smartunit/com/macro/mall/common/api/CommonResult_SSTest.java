/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.api;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.common.api.IErrorCode;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommonResult_SSTest extends CommonResult_SSTest_scaffolding {
// allCoveredLines:[24, 25, 26, 27, 28, 36, 46, 54, 63, 71, 78, 85, 93, 100, 107, 111, 115, 116, 119, 123, 124, 127, 131, 132]

  @Test(timeout = 4000)
  public void test_failed_00()  throws Throwable  {
      //caseID:78ca5744268e163e1fe145344449ae33
      //CoveredLines: [24, 25, 26, 27, 28, 54, 63, 85]
      //Input_0_IErrorCode: {getCode=0L}
      //Input_1_String: )
      //Assert: assertEquals(0L, method_result.getCode());
      
      
      CommonResult<String> commonResult0 = CommonResult.validateFailed();
      
      //Test Result Assert
      assertEquals(404L, commonResult0.getCode());
      
      //mock iErrorCode0
      IErrorCode iErrorCode0 = mock(IErrorCode.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(iErrorCode0).getCode();
      
      //Call method: failed
      CommonResult<Object> commonResult1 = CommonResult.failed(iErrorCode0, ")");
      
      //Test Result Assert
      assertEquals(0L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_failed_01()  throws Throwable  {
      //caseID:5f319010a0571c46f88f75e5fc1a9f6d
      //CoveredLines: [24, 25, 26, 27, 28, 54, 71, 78]
      //Input_0_String: 1
      //Assert: assertEquals(500L, method_result.getCode());
      
      
      //Call method: failed
      CommonResult.failed();
      
      //Call method: failed
      CommonResult<String> commonResult1 = CommonResult.failed("1");
      
      //Test Result Assert
      assertEquals(500L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_forbidden_02()  throws Throwable  {
      //caseID:dabf3aa5d3136eff7be802f06c369893
      //CoveredLines: [24, 25, 26, 27, 28, 54, 85, 107]
      //Input_0_Object: 1.0
      //Assert: assertEquals(403L, method_result.getCode());
      
      
      CommonResult.validateFailed();
      
      //Call method: forbidden
      CommonResult<Object> commonResult0 = CommonResult.forbidden((Object) "1.0");
      
      //Test Result Assert
      assertEquals(403L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getCode_03()  throws Throwable  {
      //caseID:02789f49cf06d023ed726b764c6d45fd
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 111]
      //Assert: assertEquals(500L, method_result);
      
      
      CommonResult<Object> commonResult0 = CommonResult.failed();
      
      //Call method: getCode
      long long0 = commonResult0.getCode();
      
      //Test Result Assert
      assertEquals(500L, long0);
  }

  @Test(timeout = 4000)
  public void test_getData_04()  throws Throwable  {
      //caseID:b41d60cd4988c76beefa9a58249f2aaf
      //CoveredLines: [24, 25, 26, 27, 28, 54, 85, 127]
      //Assert: assertEquals(404L, commonResult0.getCode());
      
      
      CommonResult<Object> commonResult0 = CommonResult.validateFailed();
      
      //Call method: getData
      commonResult0.getData();
      
      //Test Result Assert
      assertEquals(404L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getMessage_05()  throws Throwable  {
      //caseID:6bfda9035d866a3405e796ce04d9f1e2
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 119]
      //Assert: assertEquals(500L, commonResult0.getCode());
      
      
      CommonResult<Object> commonResult0 = CommonResult.failed();
      
      //Call method: getMessage
      commonResult0.getMessage();
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setCode_06()  throws Throwable  {
      //caseID:1cd609ea1c621934e1ed51c26ed07aa5
      //CoveredLines: [24, 25, 26, 27, 28, 93, 115, 116]
      //Input_0_long: 809
      
      
      CommonResult<Object> commonResult0 = CommonResult.validateFailed("!HpK^q9=T9Rfue\"n-<m");
      
      //Test Result Assert
      assertEquals(404L, commonResult0.getCode());
      
      
      //Call method: setCode
      commonResult0.setCode(809L);
      
      //Test Result Assert
      assertEquals(809L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setCode_07()  throws Throwable  {
      //caseID:b2608196380182ce06ff3c3194432d3b
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 115, 116]
      //Input_0_long: -2061
      
      
      CommonResult<String> commonResult0 = CommonResult.failed();
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
      
      
      //Call method: setCode
      commonResult0.setCode((-2061L));
      
      //Test Result Assert
      assertEquals((-2061L), commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_08()  throws Throwable  {
      //caseID:452bc710817a34222cf7f2e1b704dd71
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 131, 132]
      //Input_0_String: 
      
      
      CommonResult<String> commonResult0 = CommonResult.failed();
      
      //Call method: setData
      commonResult0.setData("");
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMessage_09()  throws Throwable  {
      //caseID:b30dd7a7fe94d583c2a23246bcf9cfb5
      //CoveredLines: [24, 25, 26, 27, 28, 54, 85, 123, 124]
      //Input_0_String: _e\"{u=K 
      
      
      CommonResult<Object> commonResult0 = CommonResult.validateFailed();
      
      //Call method: setMessage
      commonResult0.setMessage("_e\"{u=K ");
      
      //Test Result Assert
      assertEquals(404L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_success_10()  throws Throwable  {
      //caseID:70438a977bf3d38d521dd92d948570e5
      //CoveredLines: [24, 25, 26, 27, 28, 36, 54, 85]
      //Input_0_Object: commonResult0
      //Assert: assertEquals(200L, method_result.getCode());
      
      
      CommonResult<Object> commonResult0 = CommonResult.validateFailed();
      
      //Call method: success
      CommonResult<Object> commonResult1 = CommonResult.success((Object) commonResult0);
      
      //Test Result Assert
      assertEquals(200L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_success_11()  throws Throwable  {
      //caseID:54259b36e13802b2dbd8873f4bb5cd4b
      //CoveredLines: [24, 25, 26, 27, 28, 46, 54, 78]
      //Input_0_Object: commonResult0
      //Input_1_String: qW'?:S6lYwcP@MU
      //Assert: assertEquals(200L, method_result.getCode());
      
      
      CommonResult<Object> commonResult0 = CommonResult.failed();
      
      //Call method: success
      CommonResult<Object> commonResult1 = CommonResult.success((Object) commonResult0, "qW'?:S6lYwcP@MU");
      
      //Test Result Assert
      assertEquals(200L, commonResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test_unauthorized_12()  throws Throwable  {
      //caseID:d83920554b5013fb255e838e46aefae8
      //CoveredLines: [24, 25, 26, 27, 28, 54, 78, 100]
      //Input_0_Object: commonResult0
      //Assert: assertEquals(401L, method_result.getCode());
      
      
      CommonResult<Integer> commonResult0 = CommonResult.failed();
      
      //Call method: unauthorized
      CommonResult<Object> commonResult1 = CommonResult.unauthorized((Object) commonResult0);
      
      //Test Result Assert
      assertEquals(401L, commonResult1.getCode());
  }
}
