/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.config.BaseRedisConfig;
import com.macro.mall.common.service.RedisService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BaseRedisConfig_SSTest extends BaseRedisConfig_SSTest_scaffolding {
// allCoveredLines:[26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 48, 49, 50, 55, 57, 58, 59, 65]

  @Test(timeout = 4000)
  public void test_redisCacheManager_0()  throws Throwable  {
      //caseID:f2e07a0411982c2a2a752567a0ea8b69
      //CoveredLines: [26, 44, 45, 46, 48, 49, 50, 55, 57, 58, 59]
      //Input_0_RedisConnectionFactory: {}
      //Assert: assertFalse(method_result.isTransactionAware());
      
      BaseRedisConfig baseRedisConfig0 = new BaseRedisConfig();
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: redisCacheManager
      RedisCacheManager redisCacheManager0 = baseRedisConfig0.redisCacheManager(redisConnectionFactory0);
      
      //Test Result Assert
      assertFalse(redisCacheManager0.isTransactionAware());
  }

  @Test(timeout = 4000)
  public void test_redisService_1()  throws Throwable  {
      //caseID:8d8f97a6438f385dae8334717070bc10
      //CoveredLines: [26, 65]
      //Assert: assertNotNull(method_result);
      
      BaseRedisConfig baseRedisConfig0 = new BaseRedisConfig();
      
      //Call method: redisService
      RedisService redisService0 = baseRedisConfig0.redisService();
      
      //Test Result Assert
      assertNotNull(redisService0);
  }

  @Test(timeout = 4000)
  public void test_redisTemplate_2()  throws Throwable  {
      //caseID:1fe7e37a87680072ab04f64f48356ef6
      //CoveredLines: [26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 48, 49, 50]
      //Input_0_RedisConnectionFactory: {}
      //Assert: assertTrue(method_result.isEnableDefaultSerializer());
      
      BaseRedisConfig baseRedisConfig0 = new BaseRedisConfig();
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: redisTemplate
      RedisTemplate<String, Object> redisTemplate0 = baseRedisConfig0.redisTemplate(redisConnectionFactory0);
      
      //Test Result Assert
      assertTrue(redisTemplate0.isEnableDefaultSerializer());
  }
}
