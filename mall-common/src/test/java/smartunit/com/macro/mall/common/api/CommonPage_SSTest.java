/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.api;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommonPage_SSTest extends CommonPage_SSTest_scaffolding {
// allCoveredLines:[12, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 54, 55, 56, 57, 58, 62, 66, 67, 70, 74, 75, 78, 82, 83, 86, 90, 91, 94, 98, 99]

  @Test(timeout = 4000)
  public void test_getList_0()  throws Throwable  {
      //caseID:db939032b98db26d222b59dc4b09b0ee
      //CoveredLines: [12, 86]
      //Assert: assertTrue(method_result.isEmpty());
      
      CommonPage<Integer> commonPage0 = new CommonPage<Integer>();
      Stack<Object> stack0 = new Stack<Object>();
      PrivateAccess.setVariable((Class<?>) CommonPage.class, (CommonPage) commonPage0, "list", (Object) stack0);
      
      //Call method: getList
      List<Integer> list0 = commonPage0.getList();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getPageNum_1()  throws Throwable  {
      //caseID:73c43af451c5981a64e96b3b82462621
      //CoveredLines: [12, 62]
      //Assert: assertNull(method_result);
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      
      //Call method: getPageNum
      Integer integer0 = commonPage0.getPageNum();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_getPageSize_2()  throws Throwable  {
      //caseID:de4af64959216303cd9b581b4619893f
      //CoveredLines: [12, 70]
      //Assert: assertNull(method_result);
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      
      //Call method: getPageSize
      Integer integer0 = commonPage0.getPageSize();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_getTotal_3()  throws Throwable  {
      //caseID:0027b014108064ed87124fdee7be0930
      //CoveredLines: [12, 94]
      //Assert: assertNull(method_result);
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      
      //Call method: getTotal
      Long long0 = commonPage0.getTotal();
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_getTotalPage_4()  throws Throwable  {
      //caseID:4e457d8d017d8546abb40e657e1f0bad
      //CoveredLines: [12, 78]
      //Assert: assertNull(method_result);
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      
      //Call method: getTotalPage
      Integer integer0 = commonPage0.getTotalPage();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_restPage_5()  throws Throwable  {
      //caseID:e6e4ea8dbe0a4f4d6525da98459b3b3c
      //CoveredLines: [12, 52, 53, 54, 55, 56, 57, 58, 66, 67, 74, 75, 82, 83, 90, 91, 98, 99]
      //Input_0_Integer>: {getNumber=1721, getTotalElements=(long)1721, getSize=1721, getContent=linkedList0, getTotalPages=1721}
      //Assert: assertEquals(1721L, (long)method_result.getTotal());
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      //mock page0
      Page<Integer> page0 = (Page<Integer>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1721).when(page0).getTotalElements();
      doReturn(1721).when(page0).getTotalPages();
      doReturn(linkedList0).when(page0).getContent();
      doReturn(1721).when(page0).getNumber();
      doReturn(1721).when(page0).getSize();
      
      //Call method: restPage
      CommonPage<Integer> commonPage1 = CommonPage.restPage(page0);
      
      //Test Result Assert
      assertEquals(1721L, (long)commonPage1.getTotal());
  }

  @Test(timeout = 4000)
  public void test_restPage_6()  throws Throwable  {
      //caseID:6372463b36d4487b248220045b8125cc
      //CoveredLines: [12, 38, 39, 40, 41, 42, 43, 44, 45, 66, 67, 74, 75, 82, 83, 90, 91, 98, 99]
      //Input_0_Integer>: linkedList0
      //Assert: assertEquals(0, (int)method_result.getTotalPage());
      
      CommonPage<Integer> commonPage0 = new CommonPage<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      
      //Call method: restPage
      CommonPage<Integer> commonPage1 = CommonPage.restPage((List<Integer>) linkedList0);
      
      //Test Result Assert
      assertEquals(0, (int)commonPage1.getTotalPage());
  }
}
