/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.api;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommonPage_SSTest extends CommonPage_SSTest_scaffolding {
// allCoveredLines:[12, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 54, 55, 56, 57, 58, 62, 66, 67, 70, 74, 75, 78, 82, 83, 86, 90, 91, 94, 98, 99]

  @Test(timeout = 4000)
  public void test_getList_0()  throws Throwable  {
      //caseID:044c60405e8667a2d09e3dcfcb6510a2
      //CoveredLines: [12, 86]
      //Assert: assertFalse(method_result.contains("list"));
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      
      PrivateAccess.setVariable((Class<?>) CommonPage.class, (CommonPage) commonPage0, "list", (Object) arrayList0);
      
      //Call method: getList
      List<String> list0 = commonPage0.getList();
      
      //Test Result Assert
      assertFalse(list0.contains("list"));
  }

  @Test(timeout = 4000)
  public void test_getPageNum_1()  throws Throwable  {
      //caseID:ea942272a737d8b364d931b23f12be50
      //CoveredLines: [12, 62]
      //Assert: assertNull(method_result);
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      
      //Call method: getPageNum
      Integer integer0 = commonPage0.getPageNum();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_getPageSize_2()  throws Throwable  {
      //caseID:2e1ef0e6dc901591d2c29f054fc28bba
      //CoveredLines: [12, 70]
      //Assert: assertNull(method_result);
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      
      //Call method: getPageSize
      Integer integer0 = commonPage0.getPageSize();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_getTotal_3()  throws Throwable  {
      //caseID:2ce28e56b22c0fc3cefa70b2912f8f1a
      //CoveredLines: [12, 94]
      //Assert: assertNull(method_result);
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      
      //Call method: getTotal
      Long long0 = commonPage0.getTotal();
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_getTotalPage_4()  throws Throwable  {
      //caseID:135896f4b81bad5684ed20fd66f30091
      //CoveredLines: [12, 78]
      //Assert: assertNull(method_result);
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      
      //Call method: getTotalPage
      Integer integer0 = commonPage0.getTotalPage();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_restPage_5()  throws Throwable  {
      //caseID:cc763fcf746e63979758401bf5a98328
      //CoveredLines: [12, 52, 53, 54, 55, 56, 57, 58, 66, 67, 74, 75, 82, 83, 90, 91, 98, 99]
      //Input_0_Page<String>: {getNumber=0, getTotalElements=(long)0, getSize=0, getContent=arrayList0, getTotalPages=0}
      //Assert: assertEquals(0, (int)method_result.getPageSize());
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      //mock page0
      Page<String> page0 = (Page<String>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)0).when(page0).getTotalElements();
      doReturn(0).when(page0).getTotalPages();
      doReturn(arrayList0).when(page0).getContent();
      doReturn(0).when(page0).getNumber();
      doReturn(0).when(page0).getSize();
      
      //Call method: restPage
      CommonPage<String> commonPage1 = CommonPage.restPage(page0);
      
      //Test Result Assert
      assertEquals(0, (int)commonPage1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test_restPage_6()  throws Throwable  {
      //caseID:60f8ea15b771b80daa02b9ce34c010da
      //CoveredLines: [12, 38, 39, 40, 41, 42, 43, 44, 45, 66, 67, 74, 75, 82, 83, 90, 91, 98, 99]
      //Input_0_List<Object>: stack0
      //Assert: assertEquals(0, (int)method_result.getPageSize());
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      Stack<Object> stack0 = new Stack<Object>();
      
      //Call method: restPage
      CommonPage<Object> commonPage1 = CommonPage.restPage((List<Object>) stack0);
      
      //Test Result Assert
      assertEquals(0, (int)commonPage1.getPageSize());
  }
}
