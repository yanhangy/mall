/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.api;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommonPage_SSTest extends CommonPage_SSTest_scaffolding {
// allCoveredLines:[12, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 54, 55, 56, 57, 58, 62, 66, 67, 70, 74, 75, 78, 82, 83, 86, 90, 91, 94, 98, 99]

  @Test(timeout = 4000)
  public void test_getList_0()  throws Throwable  {
      //caseID:11debd487699c5292a688f9611850f4e
      //CoveredLines: [12, 86]
      //Assert: assertEquals(0, method_result.size());
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      Stack<String> stack0 = new Stack<String>();
      
      PrivateAccess.setVariable((Class<?>) CommonPage.class, (CommonPage) commonPage0, "list", (Object) stack0);
      
      //Call method: getList
      List<String> list0 = commonPage0.getList();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_getPageNum_1()  throws Throwable  {
      //caseID:eb818542d562074f74fdc1f5bb4f843d
      //CoveredLines: [12, 62]
      //Assert: assertNull(method_result);
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      
      //Call method: getPageNum
      Integer integer0 = commonPage0.getPageNum();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_getPageSize_2()  throws Throwable  {
      //caseID:222d74cc1efe9c574a6a4b1ece90fa2b
      //CoveredLines: [12, 70]
      //Assert: assertNull(method_result);
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      
      //Call method: getPageSize
      Integer integer0 = commonPage0.getPageSize();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_getTotal_3()  throws Throwable  {
      //caseID:2cc243d0fb0137264119097b58f41dae
      //CoveredLines: [12, 94]
      //Assert: assertNull(method_result);
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      
      //Call method: getTotal
      Long long0 = commonPage0.getTotal();
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_getTotalPage_4()  throws Throwable  {
      //caseID:5cffc4800d2d3c65e53d707422dbc4ea
      //CoveredLines: [12, 78]
      //Assert: assertNull(method_result);
      
      CommonPage<String> commonPage0 = new CommonPage<String>();
      
      //Call method: getTotalPage
      Integer integer0 = commonPage0.getTotalPage();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_restPage_5()  throws Throwable  {
      //caseID:f3a23910d1fed3468c1b0fdc9d7a52fb
      //CoveredLines: [12, 52, 53, 54, 55, 56, 57, 58, 66, 67, 74, 75, 82, 83, 90, 91, 98, 99]
      //Input_0_Page<Object>: {getNumber=381, getTotalElements=1510L, getSize=1319, getContent=arrayList0, getTotalPages=777}
      //Assert: assertEquals(1319, (int)method_result.getPageSize());
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      //mock page0
      Page<Object> page0 = (Page<Object>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1510L).when(page0).getTotalElements();
      doReturn(777).when(page0).getTotalPages();
      doReturn(arrayList0).when(page0).getContent();
      doReturn(381).when(page0).getNumber();
      doReturn(1319).when(page0).getSize();
      
      //Call method: restPage
      CommonPage<Object> commonPage1 = CommonPage.restPage(page0);
      
      //Test Result Assert
      assertEquals(1319, (int)commonPage1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test_restPage_6()  throws Throwable  {
      //caseID:5dd9a1c6eedf40af3f7a0dd2f3896c4d
      //CoveredLines: [12, 38, 39, 40, 41, 42, 43, 44, 45, 66, 67, 74, 75, 82, 83, 90, 91, 98, 99]
      //Input_0_List<String>: arrayList0
      //Assert: assertEquals(1, (int)method_result.getPageNum());
      
      CommonPage<Object> commonPage0 = new CommonPage<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      
      //Call method: restPage
      CommonPage<String> commonPage1 = CommonPage.restPage((List<String>) arrayList0);
      
      //Test Result Assert
      assertEquals(1, (int)commonPage1.getPageNum());
  }
}
