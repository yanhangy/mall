/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.util.RequestUtil;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RequestUtil_SSTest extends RequestUtil_SSTest_scaffolding {
// allCoveredLines:[11, 18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 40, 41, 44]

  @Test(timeout = 4000)
  public void test_getRequestIp_0()  throws Throwable  {
      //caseID:12f9e2749facbaf0f16ea9e156de6409
      //CoveredLines: [18, 19, 22, 25, 39, 40, 44]
      //Input_0_HttpServletRequest: {getHeader=\"reactor.core.publisher.MonoSingle$SingleSubscriber\" \"reactor.core.publisher.MonoSingle$SingleSubscriber\" \"reactor.core.publisher.MonoSingle$SingleSubscriber\"}
      //Assert: assertEquals("reactor.core.publisher.MonoSingle$SingleSubscriber", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reactor.core.publisher.MonoSingle$SingleSubscriber", "reactor.core.publisher.MonoSingle$SingleSubscriber", "reactor.core.publisher.MonoSingle$SingleSubscriber").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("reactor.core.publisher.MonoSingle$SingleSubscriber", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_1()  throws Throwable  {
      //caseID:0046979ac962ef0599f1f46e51270553
      //CoveredLines: [11, 18, 19, 20, 22, 25, 39, 44]
      //Input_0_HttpServletRequest: {getHeader=(String) null \"8#\"}
      //Assert: assertEquals("8#", method_result);
      
      RequestUtil requestUtil0 = new RequestUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((String) null, "8#").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("8#", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_2()  throws Throwable  {
      //caseID:22b669226a0e3a2dbd6f0e6088515ea6
      //CoveredLines: [18, 19, 22, 25, 39, 40, 41, 44]
      //Input_0_HttpServletRequest: {getHeader=\"nLZm~m,h{^&^~?j\"}
      //Assert: assertEquals("nLZm~m,h{^&^~?j", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("nLZm~m,h{^&^~?j").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("nLZm~m,h{^&^~?j", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_3()  throws Throwable  {
      //caseID:792fa2c21147f74c4d803f18260db278
      //CoveredLines: [18, 19, 20, 22, 23, 25, 39, 40, 41, 44]
      //Input_0_HttpServletRequest: {getHeader=\"unknown\" \"unknown\" \"CLsBuCCAw5E:j,Sv@q\"}
      //Assert: assertEquals("CLsBuCCAw5E:j", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("unknown", "unknown", "CLsBuCCAw5E:j,Sv@q").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("CLsBuCCAw5E:j", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_4()  throws Throwable  {
      //caseID:1849fc5eb3559c9691c97ee68ae6cf13
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"\", getHeader=\"\" \"\" \"\"}
      //Assert: assertEquals("", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(httpServletRequest0).getRemoteAddr();
      doReturn("", "", "").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_5()  throws Throwable  {
      //caseID:5f7918cc215ca4a8b31b381cdb749f03
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"127.0.0.1\", getHeader=\"unknown\" \"unknown\" \"unknown\"}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("127.0.0.1").when(httpServletRequest0).getRemoteAddr();
      doReturn("unknown", "unknown", "unknown").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_6()  throws Throwable  {
      //caseID:c9b740ff0dd276b3caeb702695c8f8c2
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"0:0:0:0:0:0:0:1\", getHeader=\"\" \"\" \"\"}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0:0:0:0:0:0:0:1").when(httpServletRequest0).getRemoteAddr();
      doReturn("", "", "").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_7()  throws Throwable  {
      //caseID:0ab484ce94e722b6b80ef794ece03561
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"0:0:0:0:0:0:0:1\", getHeader=\"unknown\" \"unknown\" \"unknown\"}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0:0:0:0:0:0:0:1").when(httpServletRequest0).getRemoteAddr();
      doReturn("unknown", "unknown", "unknown").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }
}
