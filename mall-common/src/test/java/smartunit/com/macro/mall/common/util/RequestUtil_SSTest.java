/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.util.RequestUtil;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RequestUtil_SSTest extends RequestUtil_SSTest_scaffolding {
// allCoveredLines:[11, 18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 40, 41, 44]

  @Test(timeout = 4000)
  public void test_getRequestIp_0()  throws Throwable  {
      //caseID:435df78a5b14adcc6eec8f9b3bac45fa
      //CoveredLines: [11, 18, 19, 20, 22, 25, 39, 44]
      //Input_0_HttpServletRequest: {getHeader=(String) null \"-2093064\"}
      //Assert: assertEquals("-2093064", method_result);
      
      RequestUtil requestUtil0 = new RequestUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((String) null, "-2093064").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("-2093064", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_1()  throws Throwable  {
      //caseID:7a930ebe012839e84cdc047e5c2f9dd5
      //CoveredLines: [18, 19, 22, 25, 39, 40, 41, 44]
      //Input_0_HttpServletRequest: {getHeader=\"_|\\\"_',3Qt-zKh=E)\"}
      //Assert: assertEquals("_|\"_'", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("_|\"_',3Qt-zKh=E)").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("_|\"_'", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_2()  throws Throwable  {
      //caseID:534d1df7e15532f6ef4a19957fd1b343
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"\", getHeader=\"\" \"\" \"\"}
      //Assert: assertEquals("", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(httpServletRequest0).getRemoteAddr();
      doReturn("", "", "").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_3()  throws Throwable  {
      //caseID:d9103d10f09760807d70367dd75371fd
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 39, 40, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\",E4(FVT?6;Jm}Q*3{\", getHeader=(String) null (String) null (String) null}
      //Assert: assertEquals(",E4(FVT?6;Jm}Q*3{", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(",E4(FVT?6;Jm}Q*3{").when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals(",E4(FVT?6;Jm}Q*3{", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_4()  throws Throwable  {
      //caseID:508c617db672e411ffeb76dfc678834a
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"127.0.0.1\", getHeader=(String) null (String) null (String) null}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("127.0.0.1").when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_5()  throws Throwable  {
      //caseID:9889f14fc32ef5fa31bbec111bf2989a
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"0:0:0:0:0:0:0:1\", getHeader=\"unknown\" \"unknown\" \"unknown\"}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0:0:0:0:0:0:0:1").when(httpServletRequest0).getRemoteAddr();
      doReturn("unknown", "unknown", "unknown").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }
}
