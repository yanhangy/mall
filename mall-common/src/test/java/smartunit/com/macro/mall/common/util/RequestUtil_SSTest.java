/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.util.RequestUtil;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RequestUtil_SSTest extends RequestUtil_SSTest_scaffolding {
// allCoveredLines:[11, 18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 40, 41, 44]

  @Test(timeout = 4000)
  public void test_getRequestIp_0()  throws Throwable  {
      //caseID:0243e35ee4c9e94c92878646382b332f
      //CoveredLines: [18, 19, 22, 25, 39, 40, 41, 44]
      //Input_0_HttpServletRequest: {getHeader=\"Error while discarding a stream element, continuing with next element\"}
      //Assert: assertEquals("Error while discarding a stream element", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Error while discarding a stream element, continuing with next element").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("Error while discarding a stream element", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_1()  throws Throwable  {
      //caseID:8a8f4205594150ae2d89d0fe9123d0d3
      //CoveredLines: [11, 18, 19, 20, 22, 23, 25, 39, 44]
      //Input_0_HttpServletRequest: {getHeader=(String) null (String) null \"x-forwarded-for\"}
      //Assert: assertEquals("x-forwarded-for", method_result);
      
      RequestUtil requestUtil0 = new RequestUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((String) null, (String) null, "x-forwarded-for").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("x-forwarded-for", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_2()  throws Throwable  {
      //caseID:04f2425aeacb88b0af579b3ecd5dbfc8
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"unknown\", getHeader=\"unknown\" \"unknown\" \"unknown\"}
      //Assert: assertEquals("unknown", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("unknown").when(httpServletRequest0).getRemoteAddr();
      doReturn("unknown", "unknown", "unknown").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_3()  throws Throwable  {
      //caseID:93035c0c6ff67140671648762ae92f77
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 39, 40, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\",:)_U/UKDFi40t7Ph\", getHeader=(String) null (String) null (String) null}
      //Assert: assertEquals(",:)_U/UKDFi40t7Ph", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(",:)_U/UKDFi40t7Ph").when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals(",:)_U/UKDFi40t7Ph", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_4()  throws Throwable  {
      //caseID:b5423419dcba4701da4def80ee50bac4
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"127.0.0.1\", getHeader=\"\" \"\" \"\"}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("127.0.0.1").when(httpServletRequest0).getRemoteAddr();
      doReturn("", "", "").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_5()  throws Throwable  {
      //caseID:ec6280fd6ece9ca3c44458914676959a
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"0:0:0:0:0:0:0:1\", getHeader=\"\" \"\" \"\"}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0:0:0:0:0:0:0:1").when(httpServletRequest0).getRemoteAddr();
      doReturn("", "", "").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }
}
