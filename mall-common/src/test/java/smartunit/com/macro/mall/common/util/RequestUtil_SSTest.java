/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.util.RequestUtil;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RequestUtil_SSTest extends RequestUtil_SSTest_scaffolding {
// allCoveredLines:[11, 18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 40, 41, 44]

  @Test(timeout = 4000)
  public void test_getRequestIp_0()  throws Throwable  {
      //caseID:58a8e652b7f78f10b52bb44d83922a54
      //CoveredLines: [18, 19, 22, 25, 39, 40, 44]
      //Input_0_HttpServletRequest: {getHeader="W~}$>\"a-plmdTIS~"}
      //Assert: assertEquals("W~}$>\"a-plmdTIS~", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("W~}$>\"a-plmdTIS~").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("W~}$>\"a-plmdTIS~", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_1()  throws Throwable  {
      //caseID:ab4bf5858abe5921cc779537bc449bf8
      //CoveredLines: [18, 19, 22, 25, 39, 40, 41, 44]
      //Input_0_HttpServletRequest: {getHeader="q!X'% QQu,H't:&))9"}
      //Assert: assertEquals("q!X'% QQu", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("q!X'% QQu,H't:&))9").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("q!X'% QQu", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_2()  throws Throwable  {
      //caseID:06de62fae7eca944a6d07805c85b8e29
      //CoveredLines: [11, 18, 19, 20, 22, 23, 25, 26, 28, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr="unknown", getHeader="unknown" "unknown" "unknown"}
      //Assert: assertEquals("unknown", method_result);
      
      RequestUtil requestUtil0 = new RequestUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("unknown").when(httpServletRequest0).getRemoteAddr();
      doReturn("unknown", "unknown", "unknown").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_3()  throws Throwable  {
      //caseID:5aa42e74ab321e403b9e0e48ac8574b4
      //CoveredLines: [18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr="127.0.0.1", getHeader="" "" ""}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("127.0.0.1").when(httpServletRequest0).getRemoteAddr();
      doReturn("", "", "").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }

  @Test(timeout = 4000)
  public void test_getRequestIp_4()  throws Throwable  {
      //caseID:0e0804c56056f5b8d13f06ff9caa5ceb
      //CoveredLines: [11, 18, 19, 20, 22, 23, 25, 26, 28, 29, 31, 34, 35, 39, 44]
      //Input_0_HttpServletRequest: {getRemoteAddr="0:0:0:0:0:0:0:1", getHeader=(String) null (String) null (String) null}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      RequestUtil requestUtil0 = new RequestUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0:0:0:0:0:0:0:1").when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getRequestIp
      String string0 = RequestUtil.getRequestIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("192.168.1.42", string0);
  }
}
