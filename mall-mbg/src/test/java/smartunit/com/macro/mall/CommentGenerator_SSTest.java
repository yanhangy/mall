/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.CommentGenerator;
import java.util.Properties;
import org.junit.runner.RunWith;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommentGenerator_SSTest extends CommentGenerator_SSTest_scaffolding {
// allCoveredLines:[17, 18, 28, 29, 30, 38, 40, 43, 44, 47, 49, 56, 58, 59, 60, 62, 63, 64, 68, 70, 71, 73]

  @Test(timeout = 4000)
  public void test_addConfigurationProperties_0()  throws Throwable  {
      //caseID:d7ba7b982d770665f5663533a1732eef
      //CoveredLines: [17, 18, 28, 29, 30]
      //Input_0_Properties: {}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      //mock properties0
      Properties properties0 = mock(Properties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) CommentGenerator.class, commentGenerator0, "properties", (Object) properties0);
      //mock properties1
      Properties properties1 = mock(Properties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: addConfigurationProperties
      commentGenerator0.addConfigurationProperties(properties1);
  }

  @Test(timeout = 4000)
  public void test_addFieldComment_1()  throws Throwable  {
      //caseID:0ab2a01635a40cf24c64cb46ed2db6aa
      //CoveredLines: [17, 18, 38, 40, 49]
      //Input_0_Field: {}
      //Input_1_IntrospectedTable: {}
      //Input_2_IntrospectedColumn: {}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      
      PrivateAccess.setVariable((Class<?>) CommentGenerator.class, commentGenerator0, "addRemarkComments", (Object) true);
      //mock field0
      Field field0 = mock(Field.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedTable0
      IntrospectedTable introspectedTable0 = mock(IntrospectedTable.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedColumn0
      IntrospectedColumn introspectedColumn0 = mock(IntrospectedColumn.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: addFieldComment
      commentGenerator0.addFieldComment(field0, introspectedTable0, introspectedColumn0);
  }

  @Test(timeout = 4000)
  public void test_addFieldComment_2()  throws Throwable  {
      //caseID:cfd5b2349cda3fe2f7149060c501656a
      //CoveredLines: [17, 18, 38, 40, 49]
      //Input_0_Field: {}
      //Input_1_IntrospectedTable: {}
      //Input_2_IntrospectedColumn: {}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      //mock field0
      Field field0 = mock(Field.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedTable0
      IntrospectedTable introspectedTable0 = mock(IntrospectedTable.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedColumn0
      IntrospectedColumn introspectedColumn0 = mock(IntrospectedColumn.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: addFieldComment
      commentGenerator0.addFieldComment(field0, introspectedTable0, introspectedColumn0);
  }

  @Test(timeout = 4000)
  public void test_addFieldComment_3()  throws Throwable  {
      //caseID:17abb879093a0e1e8eb333192ac0634f
      //CoveredLines: [17, 18, 38, 40, 43, 47, 49]
      //Input_0_Field: {}
      //Input_1_IntrospectedTable: {}
      //Input_2_IntrospectedColumn: {getRemarks=\"1.0\"}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      
      PrivateAccess.setVariable((Class<?>) CommentGenerator.class, commentGenerator0, "addRemarkComments", (Object) true);
      //mock field0
      Field field0 = mock(Field.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedTable0
      IntrospectedTable introspectedTable0 = mock(IntrospectedTable.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedColumn0
      IntrospectedColumn introspectedColumn0 = mock(IntrospectedColumn.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(introspectedColumn0).getRemarks();
      
      //Call method: addFieldComment
      commentGenerator0.addFieldComment(field0, introspectedTable0, introspectedColumn0);
  }

  @Test(timeout = 4000)
  public void test_addFieldComment_4()  throws Throwable  {
      //caseID:90462135d81803ca85cb196d9e2e6c62
      //CoveredLines: [17, 18, 38, 40, 43, 44, 47, 49]
      //Input_0_Field: {}
      //Input_1_IntrospectedTable: {}
      //Input_2_IntrospectedColumn: {getRemarks=\"\\\"\"}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      
      PrivateAccess.setVariable((Class<?>) CommentGenerator.class, commentGenerator0, "addRemarkComments", (Object) true);
      //mock field0
      Field field0 = mock(Field.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedTable0
      IntrospectedTable introspectedTable0 = mock(IntrospectedTable.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock introspectedColumn0
      IntrospectedColumn introspectedColumn0 = mock(IntrospectedColumn.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\"").when(introspectedColumn0).getRemarks();
      
      //Call method: addFieldComment
      commentGenerator0.addFieldComment(field0, introspectedTable0, introspectedColumn0);
  }

  @Test(timeout = 4000)
  public void test_addFieldJavaDoc_5()  throws Throwable  {
      //caseID:480627bdb030ad1388076808552726bf
      //CoveredLines: [17, 18, 56, 58, 59, 60, 62, 63, 64]
      //Input_0_org.mybatis.generator.api.dom.java.Field: {}
      //Input_1_String: 
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      //mock field0
      Field field0 = mock(Field.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: addFieldJavaDoc
      PrivateAccess.callMethod((Class<CommentGenerator>) CommentGenerator.class, commentGenerator0, "addFieldJavaDoc", (Object) field0, (Class<?>) Field.class, (Object) "", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_addJavaFileComment_6()  throws Throwable  {
      //caseID:f33a819e8857836df927ebd172b41472
      //CoveredLines: [17, 18, 68, 70, 73]
      //Input_0_CompilationUnit: {getType=fullyQualifiedJavaType0}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      //mock fullyQualifiedJavaType0
      FullyQualifiedJavaType fullyQualifiedJavaType0 = mock(FullyQualifiedJavaType.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Mapper").when(fullyQualifiedJavaType0).getFullyQualifiedName();
      //mock compilationUnit0
      CompilationUnit compilationUnit0 = mock(CompilationUnit.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(fullyQualifiedJavaType0).when(compilationUnit0).getType();
      
      //Call method: addJavaFileComment
      commentGenerator0.addJavaFileComment(compilationUnit0);
  }

  @Test(timeout = 4000)
  public void test_addJavaFileComment_7()  throws Throwable  {
      //caseID:2c62f35caa8e2522636c1731f99ba66b
      //CoveredLines: [17, 18, 68, 70, 73]
      //Input_0_CompilationUnit: {getType=fullyQualifiedJavaType0}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      //mock fullyQualifiedJavaType0
      FullyQualifiedJavaType fullyQualifiedJavaType0 = mock(FullyQualifiedJavaType.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Example").when(fullyQualifiedJavaType0).getFullyQualifiedName();
      //mock compilationUnit0
      CompilationUnit compilationUnit0 = mock(CompilationUnit.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(fullyQualifiedJavaType0).when(compilationUnit0).getType();
      
      //Call method: addJavaFileComment
      commentGenerator0.addJavaFileComment(compilationUnit0);
  }

  @Test(timeout = 4000)
  public void test_addJavaFileComment_8()  throws Throwable  {
      //caseID:8760152c1b6ae6a59e0c9c9233dede65
      //CoveredLines: [17, 18, 68, 70, 71, 73]
      //Input_0_CompilationUnit: {getType=fullyQualifiedJavaType0}
      
      CommentGenerator commentGenerator0 = new CommentGenerator();
      //mock fullyQualifiedJavaType0
      FullyQualifiedJavaType fullyQualifiedJavaType0 = mock(FullyQualifiedJavaType.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("xPAw").when(fullyQualifiedJavaType0).getFullyQualifiedName();
      //mock compilationUnit0
      CompilationUnit compilationUnit0 = mock(CompilationUnit.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(fullyQualifiedJavaType0).when(compilationUnit0).getType();
      
      //Call method: addJavaFileComment
      commentGenerator0.addJavaFileComment(compilationUnit0);
  }
}
