/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.macro.mall.dto.MinioUploadDto;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MinioUploadDto_SSTest extends MinioUploadDto_SSTest_scaffolding {
// allCoveredLines:[11, 12, 15, 17]

  @Test(timeout = 4000)
  public void test_equals_0()  throws Throwable  {
      //caseID:c529f5fc95c7b0b36cb9093abcb02314
      //CoveredLines: [11, 11, 11, 11, 12, 12, 12]
      //Input_0_Object: MinioUploadDto(url=
      //Assert: assertFalse(method_result);
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      
      //Call method: equals
      boolean boolean0 = minioUploadDto0.equals("MinioUploadDto(url=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_1()  throws Throwable  {
      //caseID:3d117bcee6c8e826bb1aae5a93572e39
      //CoveredLines: [11, 11, 11, 11, 12, 12, 12]
      //Input_0_Object: minioUploadDto0
      //Assert: assertTrue(method_result);
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      
      //Call method: equals
      boolean boolean0 = minioUploadDto0.equals(minioUploadDto0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_2()  throws Throwable  {
      //caseID:6a701c25e6137a46de523a2b7b3c0d1e
      //CoveredLines: [11, 11, 11, 11, 12, 12, 12, 15, 17]
      //Input_0_Object: minioUploadDto0
      //Assert: assertTrue(method_result);
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      MinioUploadDto minioUploadDto1 = new MinioUploadDto();
      
      //Call method: equals
      boolean boolean0 = minioUploadDto1.equals(minioUploadDto0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_3()  throws Throwable  {
      //caseID:17189f8ae9930a0c98766ba11871ae0c
      //CoveredLines: [11, 11, 11, 11, 12, 12, 12, 15, 17]
      //Input_0_Object: minioUploadDto1
      //Assert: assertTrue(method_result);
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      MinioUploadDto minioUploadDto1 = new MinioUploadDto();
      
      //Call method: equals
      boolean boolean0 = minioUploadDto0.equals(minioUploadDto1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:f2afa55e650b96a67e1f135a2301afaa
      //CoveredLines: [11, 11, 11, 11, 12, 12, 12, 15, 17]
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      
      //Call method: hashCode
      minioUploadDto0.hashCode();
  }

  @Test(timeout = 4000)
  public void test_setName_5()  throws Throwable  {
      //caseID:15104513dcf57e266d12d4b53606e144
      //CoveredLines: [11, 11, 11, 11]
      //Input_0_String: ^m>9.rbTxg
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      
      //Call method: setName
      minioUploadDto0.setName("^m>9.rbTxg");
      
      //Test Result Assert
      assertEquals("^m>9.rbTxg", minioUploadDto0.getName());
  }

  @Test(timeout = 4000)
  public void test_setUrl_6()  throws Throwable  {
      //caseID:0a530b28ed78d3db5a03531d3f6cfe66
      //CoveredLines: [11, 11, 11, 11]
      //Input_0_String: 1
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      
      //Call method: setUrl
      minioUploadDto0.setUrl("1");
      
      //Test Result Assert
      assertNull(minioUploadDto0.getName());
  }

  @Test(timeout = 4000)
  public void test_toString_7()  throws Throwable  {
      //caseID:dad518ecee8e5df12570f90a27235a7c
      //CoveredLines: [11, 11, 11, 11, 15, 17]
      //Assert: assertEquals("MinioUploadDto(url=null, name=null)", method_result);
      
      MinioUploadDto minioUploadDto0 = new MinioUploadDto();
      
      //Call method: toString
      String string0 = minioUploadDto0.toString();
      
      //Test Result Assert
      assertEquals("MinioUploadDto(url=null, name=null)", string0);
  }
}
