/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.bo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.bo.AdminUserDetails;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AdminUserDetails_SSTest extends AdminUserDetails_SSTest_scaffolding {
// allCoveredLines:[20, 21, 22, 23, 28, 29, 30, 35, 40, 45, 50, 55, 60]

  @Test(timeout = 4000)
  public void test_getAuthorities_0()  throws Throwable  {
      //caseID:7caeb7093417ccd9901222e0d6214a93
      //CoveredLines: [20, 21, 22, 23, 28, 29, 29, 30, 45, 55, 60]
      //Assert: assertTrue(adminUserDetails0.isCredentialsNonExpired());
      
      Integer integer0 = new Integer((-1));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsAdmin0).getStatus();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      Long long0 = new Long(1L);
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsResource0).getId();
      doReturn("maxTaskQueuedPerThread must be strictly positive, was ").when(umsResource0).getName();
      linkedList0.add(umsResource0);
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, linkedList0);
      boolean boolean0 = adminUserDetails0.isAccountNonExpired();
      adminUserDetails0.isEnabled();
      boolean boolean1 = adminUserDetails0.isCredentialsNonExpired();
      
      //Test Result Assert
      assertTrue(boolean1 == boolean0);
      
      
      //Call method: getAuthorities
      adminUserDetails0.getAuthorities();
      
      //Test Result Assert
      assertTrue(adminUserDetails0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test_getPassword_1()  throws Throwable  {
      //caseID:8a82b3a278211008b57cf341eff55d5a
      //CoveredLines: [20, 21, 22, 23, 35, 50, 60]
      //Assert: assertTrue(adminUserDetails0.isAccountNonLocked());
      
      Integer integer0 = new Integer(0);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsAdmin0).getStatus();
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, vector0);
      boolean boolean0 = adminUserDetails0.isAccountNonLocked();
      boolean boolean1 = adminUserDetails0.isEnabled();
      
      //Test Result Assert
      assertFalse(boolean1 == boolean0);
      
      
      //Call method: getPassword
      adminUserDetails0.getPassword();
      
      //Test Result Assert
      assertTrue(adminUserDetails0.isAccountNonLocked());
  }

  @Test(timeout = 4000)
  public void test_getPassword_2()  throws Throwable  {
      //caseID:80e9f83738312fd19a9823927776b745
      //CoveredLines: [20, 21, 22, 23, 35, 45, 55, 60]
      //Assert: assertTrue(adminUserDetails0.isCredentialsNonExpired());
      
      Integer integer0 = new Integer((-1));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsAdmin0).getStatus();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, stack0);
      boolean boolean0 = adminUserDetails0.isCredentialsNonExpired();
      adminUserDetails0.isEnabled();
      boolean boolean1 = adminUserDetails0.isAccountNonExpired();
      
      //Test Result Assert
      assertTrue(boolean1 == boolean0);
      
      
      //Call method: getPassword
      adminUserDetails0.getPassword();
      
      //Test Result Assert
      assertTrue(adminUserDetails0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test_getUsername_3()  throws Throwable  {
      //caseID:ecd34a115f83c45d95b3aa07b5cfc151
      //CoveredLines: [20, 21, 22, 23, 40]
      //Assert: assertNull(method_result);
      
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ArrayList<UmsResource> arrayList0 = new ArrayList<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, arrayList0);
      
      //Call method: getUsername
      String string0 = adminUserDetails0.getUsername();
      
      //Test Result Assert
      assertNull(string0);
  }
}
