/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.UmsResourceCategoryMapper;
import com.macro.mall.model.UmsResourceCategory;
import com.macro.mall.service.impl.UmsResourceCategoryServiceImpl;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsResourceCategoryServiceImpl_SSTest extends UmsResourceCategoryServiceImpl_SSTest_scaffolding {
// allCoveredLines:[18, 24, 25, 26, 31, 32, 37, 38, 43]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:34194910f6d11cde45ef8cd77173af1e
      //CoveredLines: [18, 31, 32]
      //Input_0_UmsResourceCategory: {}
      //Assert: assertEquals(0, method_result);
      
      UmsResourceCategoryServiceImpl umsResourceCategoryServiceImpl0 = new UmsResourceCategoryServiceImpl();
      //mock umsResourceCategoryMapper0
      UmsResourceCategoryMapper umsResourceCategoryMapper0 = mock(UmsResourceCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceCategoryServiceImpl.class, umsResourceCategoryServiceImpl0, "resourceCategoryMapper", (Object) umsResourceCategoryMapper0);
      //mock umsResourceCategory0
      UmsResourceCategory umsResourceCategory0 = mock(UmsResourceCategory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = umsResourceCategoryServiceImpl0.create(umsResourceCategory0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:a1a3623f999e93305a27a4855d0b3a70
      //CoveredLines: [18, 43]
      //Input_0_Long: 6218L
      //Assert: assertEquals(0, method_result);
      
      UmsResourceCategoryServiceImpl umsResourceCategoryServiceImpl0 = new UmsResourceCategoryServiceImpl();
      //mock umsResourceCategoryMapper0
      UmsResourceCategoryMapper umsResourceCategoryMapper0 = mock(UmsResourceCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceCategoryServiceImpl.class, umsResourceCategoryServiceImpl0, "resourceCategoryMapper", (Object) umsResourceCategoryMapper0);
      Long long0 = new Long(6218L);
      
      //Call method: delete
      int int0 = umsResourceCategoryServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_listAll_2()  throws Throwable  {
      //caseID:6be9d5f3265ce456eed84e41cc2d6cba
      //CoveredLines: [18, 24, 25, 26]
      //Assert: assertNull(method_result);
      
      UmsResourceCategoryServiceImpl umsResourceCategoryServiceImpl0 = new UmsResourceCategoryServiceImpl();
      //mock umsResourceCategoryMapper0
      UmsResourceCategoryMapper umsResourceCategoryMapper0 = mock(UmsResourceCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceCategoryServiceImpl.class, umsResourceCategoryServiceImpl0, "resourceCategoryMapper", (Object) umsResourceCategoryMapper0);
      
      //Call method: listAll
      List<UmsResourceCategory> list0 = umsResourceCategoryServiceImpl0.listAll();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_3()  throws Throwable  {
      //caseID:55e7c803c9453ace6c8b81246dc60b7b
      //CoveredLines: [18, 37, 38]
      //Input_0_Long: 1L
      //Input_1_UmsResourceCategory: {}
      //Assert: assertEquals(0, method_result);
      
      UmsResourceCategoryServiceImpl umsResourceCategoryServiceImpl0 = new UmsResourceCategoryServiceImpl();
      //mock umsResourceCategoryMapper0
      UmsResourceCategoryMapper umsResourceCategoryMapper0 = mock(UmsResourceCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceCategoryServiceImpl.class, umsResourceCategoryServiceImpl0, "resourceCategoryMapper", (Object) umsResourceCategoryMapper0);
      Long long0 = new Long(1L);
      //mock umsResourceCategory0
      UmsResourceCategory umsResourceCategory0 = mock(UmsResourceCategory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = umsResourceCategoryServiceImpl0.update(long0, umsResourceCategory0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
