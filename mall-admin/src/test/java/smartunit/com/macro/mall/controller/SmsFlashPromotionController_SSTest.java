/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.SmsFlashPromotionController;
import com.macro.mall.model.SmsFlashPromotion;
import com.macro.mall.service.SmsFlashPromotionService;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsFlashPromotionController_SSTest extends SmsFlashPromotionController_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 34, 41, 42, 43, 45, 52, 53, 54, 56, 63, 64, 65, 67, 74, 75, 84, 85]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:44a479228a7ca96cc127a2d2caa1b532
      //CoveredLines: [22, 30, 31, 32]
      //Input_0_SmsFlashPromotion: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1043).when(smsFlashPromotionService0).create(any(com.macro.mall.model.SmsFlashPromotion.class));
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = smsFlashPromotionController0.create(smsFlashPromotion0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:1d0572d6b46da3970979823eb3ef9d76
      //CoveredLines: [22, 30, 31, 34]
      //Input_0_SmsFlashPromotion: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = smsFlashPromotionController0.create(smsFlashPromotion0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:267f5c0961e688bdca6b9b66e8be606b
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_Long: 1
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsFlashPromotionService0).delete(anyLong());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Long long0 = new Long(1);
      
      //Call method: delete
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.delete(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:979a1b0a9ce4b7adb34cc22248db569d
      //CoveredLines: [22, 52, 53, 56]
      //Input_0_Long: 2668L
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Long long0 = new Long(2668L);
      
      //Call method: delete
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.delete(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getItem_4()  throws Throwable  {
      //caseID:622b905ccb3a60cce87e91ec8323e1e9
      //CoveredLines: [22, 84, 85]
      //Input_0_String: com.macro.mall.controller.SmsFlashPromotionController
      //Input_1_Integer: 1670
      //Input_2_Integer: 1670
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      Vector<SmsFlashPromotion> vector0 = new Vector<SmsFlashPromotion>();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsFlashPromotionService0).list(anyString() , anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Integer integer0 = new Integer(1670);
      
      //Call method: getItem
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.getItem("com.macro.mall.controller.SmsFlashPromotionController", integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getItem_5()  throws Throwable  {
      //caseID:d704fbb8e77f298911aaf02357f1d38e
      //CoveredLines: [22, 74, 75]
      //Input_0_Long: 509L
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Long long0 = new Long(509L);
      
      //Call method: getItem
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.getItem(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_6()  throws Throwable  {
      //caseID:61163c89cec14f8164c9b551cde54370
      //CoveredLines: [22, 41, 42, 43]
      //Input_0_Long: 2257
      //Input_1_SmsFlashPromotion: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2257).when(smsFlashPromotionService0).update(anyLong() , any(com.macro.mall.model.SmsFlashPromotion.class));
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Long long0 = new Long(2257);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.update(long0, smsFlashPromotion0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_7()  throws Throwable  {
      //caseID:408046a03bdf88b68be623f4bf62b59c
      //CoveredLines: [22, 63, 64, 65]
      //Input_0_Long: 1
      //Input_1_Integer: 1
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsFlashPromotionService0).updateStatus(anyLong() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(1);
      
      //Call method: update
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.update(long0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_8()  throws Throwable  {
      //caseID:1eb903c6b15842a591fcb6f71584536c
      //CoveredLines: [22, 63, 64, 67]
      //Input_0_Long: 0
      //Input_1_Integer: 0
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsFlashPromotionService0).updateStatus(anyLong() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Long long0 = new Long(0);
      Integer integer0 = new Integer(0);
      
      //Call method: update
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.update(long0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_9()  throws Throwable  {
      //caseID:604fa940cac813cbed61ea0bbad3c886
      //CoveredLines: [22, 41, 42, 45]
      //Input_0_Long: 1L
      //Input_1_SmsFlashPromotion: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsFlashPromotionController smsFlashPromotionController0 = new SmsFlashPromotionController();
      //mock smsFlashPromotionService0
      SmsFlashPromotionService smsFlashPromotionService0 = mock(SmsFlashPromotionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionController.class, smsFlashPromotionController0, "flashPromotionService", (Object) smsFlashPromotionService0);
      Long long0 = new Long(1L);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = (CommonResult)smsFlashPromotionController0.update(long0, smsFlashPromotion0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
}
