/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dto.PmsBrandParam;
import com.macro.mall.mapper.PmsBrandMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.service.impl.PmsBrandServiceImpl;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsBrandServiceImpl_SSTest extends PmsBrandServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 32, 37, 38, 40, 41, 43, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 66, 71, 72, 73, 78, 79, 80, 81, 82, 83, 85, 90, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108]

  @Test(timeout = 4000)
  public void test_createBrand_00()  throws Throwable  {
      //caseID:635ded157e8b5ea54ae91b739352a14e
      //CoveredLines: [24, 37, 38, 40, 43]
      //Input_0_PmsBrandParam: {getSort=(-1), getLogo=\"SERVER_ERROR\", getName=\"SERVER_ERROR\", getShowStatus=(-1), getFactoryStatus=(-1), getBrandStory=\"SERVER_ERROR\", getBigPic=\"SERVER_ERROR\", getFirstLetter=\"SERVER_ERROR\"}
      //Assert: assertEquals((-1), method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsBrandMapper0).insertSelective(any(com.macro.mall.model.PmsBrand.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Integer integer0 = new Integer((-1));
      //mock pmsBrandParam0
      PmsBrandParam pmsBrandParam0 = mock(PmsBrandParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("SERVER_ERROR").when(pmsBrandParam0).getBigPic();
      doReturn("SERVER_ERROR").when(pmsBrandParam0).getBrandStory();
      doReturn(integer0).when(pmsBrandParam0).getFactoryStatus();
      doReturn("SERVER_ERROR").when(pmsBrandParam0).getFirstLetter();
      doReturn("SERVER_ERROR").when(pmsBrandParam0).getLogo();
      doReturn("SERVER_ERROR").when(pmsBrandParam0).getName();
      doReturn(integer0).when(pmsBrandParam0).getShowStatus();
      doReturn(integer0).when(pmsBrandParam0).getSort();
      
      //Call method: createBrand
      int int0 = pmsBrandServiceImpl0.createBrand(pmsBrandParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_createBrand_01()  throws Throwable  {
      //caseID:3da92dffc8cd9231d2f779046e3a7f01
      //CoveredLines: [24, 37, 38, 40, 41, 43]
      //Input_0_PmsBrandParam: {getSort=14, getLogo=\"\", getName=\"product_sn like\", getShowStatus=14, getFactoryStatus=14, getBrandStory=\"firstTimeout\", getBigPic=\"0/?m874\", getFirstLetter=\"\"}
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Integer integer0 = new Integer(14);
      //mock pmsBrandParam0
      PmsBrandParam pmsBrandParam0 = mock(PmsBrandParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0/?m874").when(pmsBrandParam0).getBigPic();
      doReturn("firstTimeout").when(pmsBrandParam0).getBrandStory();
      doReturn(integer0).when(pmsBrandParam0).getFactoryStatus();
      doReturn("").when(pmsBrandParam0).getFirstLetter();
      doReturn("").when(pmsBrandParam0).getLogo();
      doReturn("product_sn like").when(pmsBrandParam0).getName();
      doReturn(integer0).when(pmsBrandParam0).getShowStatus();
      doReturn(integer0).when(pmsBrandParam0).getSort();
      
      //Call method: createBrand
      int int0 = pmsBrandServiceImpl0.createBrand(pmsBrandParam0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_deleteBrand_02()  throws Throwable  {
      //caseID:193f03e0e59ac1b40bd1b1afc94f19a5
      //CoveredLines: [24, 66]
      //Input_0_Long: 1L
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long(1L);
      
      //Call method: deleteBrand
      int int0 = pmsBrandServiceImpl0.deleteBrand(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_deleteBrand_03()  throws Throwable  {
      //caseID:7ba82eb1891b37979ca3acda6cae2d0c
      //CoveredLines: [24, 71, 72, 73]
      //Input_0_List<Long>: vector0
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Vector<Long> vector0 = new Vector<Long>();
      
      //Call method: deleteBrand
      int int0 = pmsBrandServiceImpl0.deleteBrand((List<Long>) vector0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getBrand_04()  throws Throwable  {
      //caseID:1afa4b699fa647786f3dc60acd21a255
      //CoveredLines: [24, 90]
      //Input_0_Long: (-1L)
      //Assert: assertNull(method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long((-1L));
      
      //Call method: getBrand
      PmsBrand pmsBrand0 = pmsBrandServiceImpl0.getBrand(long0);
      
      //Test Result Assert
      assertNull(pmsBrand0);
  }

  @Test(timeout = 4000)
  public void test_listAllBrand_05()  throws Throwable  {
      //caseID:edf9a4cb69ba626a43dd3271fec84ad6
      //CoveredLines: [24, 32]
      //Assert: assertNull(method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listAllBrand
      List<PmsBrand> list0 = pmsBrandServiceImpl0.listAllBrand();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listBrand_06()  throws Throwable  {
      //caseID:35a8b2dc7b181a8a68597741aec90808
      //CoveredLines: [24, 78, 79, 80, 81, 82, 85]
      //Input_0_String: 
      //Input_1_int: 1654
      //Input_2_int: 0
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      Vector<PmsBrand> vector0 = new Vector<PmsBrand>();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsBrandMapper0).selectByExample(any(com.macro.mall.model.PmsBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listBrand
      List<PmsBrand> list0 = pmsBrandServiceImpl0.listBrand("", 1654, 0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_listBrand_07()  throws Throwable  {
      //caseID:7e9318b69f071e2c2729e380b3d83514
      //CoveredLines: [24, 78, 79, 80, 81, 82, 83, 85]
      //Input_0_String: #~<GV#1L.
      //Input_1_int: 3791
      //Input_2_int: 501
      //Assert: assertNull(method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listBrand
      List<PmsBrand> list0 = pmsBrandServiceImpl0.listBrand("#~<GV#1L.", 3791, 501);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateBrand_08()  throws Throwable  {
      //caseID:eddfefdf51a5a11a569b258ae1350f9e
      //CoveredLines: [24, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61]
      //Input_0_Long: (-22)
      //Input_1_PmsBrandParam: {getSort=(-22), getLogo=\"id\", getName=\"id\", getShowStatus=(-22), getFactoryStatus=(-22), getBrandStory=\"id\", getBigPic=\"id\", getFirstLetter=\"id\"}
      //Assert: assertEquals((-22), method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-22)).when(pmsBrandMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsBrand.class));
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-22)).when(pmsProductMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsProduct.class) , any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long((-22));
      Integer integer0 = new Integer((-22));
      //mock pmsBrandParam0
      PmsBrandParam pmsBrandParam0 = mock(PmsBrandParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("id").when(pmsBrandParam0).getBigPic();
      doReturn("id").when(pmsBrandParam0).getBrandStory();
      doReturn(integer0).when(pmsBrandParam0).getFactoryStatus();
      doReturn("id").when(pmsBrandParam0).getFirstLetter();
      doReturn("id").when(pmsBrandParam0).getLogo();
      doReturn("id").when(pmsBrandParam0).getName();
      doReturn(integer0).when(pmsBrandParam0).getShowStatus();
      doReturn(integer0).when(pmsBrandParam0).getSort();
      
      //Call method: updateBrand
      int int0 = pmsBrandServiceImpl0.updateBrand(long0, pmsBrandParam0);
      
      //Test Result Assert
      assertEquals((-22), int0);
  }

  @Test(timeout = 4000)
  public void test_updateFactoryStatus_09()  throws Throwable  {
      //caseID:3293c79aa89046f93bbe4e22ae334b31
      //CoveredLines: [24, 104, 105, 106, 107, 108]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: 1119
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer(1119);
      
      //Call method: updateFactoryStatus
      int int0 = pmsBrandServiceImpl0.updateFactoryStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_10()  throws Throwable  {
      //caseID:c6e2289aa9c681331242f845fcc536aa
      //CoveredLines: [24, 95, 96, 97, 98, 99]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: (-1)
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updateShowStatus
      int int0 = pmsBrandServiceImpl0.updateShowStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
