/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dto.PmsBrandParam;
import com.macro.mall.mapper.PmsBrandMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.model.PmsBrand;
import com.macro.mall.service.impl.PmsBrandServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsBrandServiceImpl_SSTest extends PmsBrandServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 32, 37, 38, 40, 43, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 66, 71, 72, 73, 78, 79, 80, 81, 82, 83, 85, 90, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108]

  @Test(timeout = 4000)
  public void test_createBrand_0()  throws Throwable  {
      //caseID:bd274ab9ebd66b3487daf7a8de629908
      //CoveredLines: [24, 37, 38, 40, 43]
      //Input_0_PmsBrandParam: {getSort=0, getLogo=\"%\", getName=\"%\", getShowStatus=0, getFactoryStatus=0, getBrandStory=\"%\", getBigPic=\"%\", getFirstLetter=\"%\"}
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(pmsBrandMapper0).insertSelective(any(com.macro.mall.model.PmsBrand.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Integer integer0 = new Integer(0);
      //mock pmsBrandParam0
      PmsBrandParam pmsBrandParam0 = mock(PmsBrandParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("%").when(pmsBrandParam0).getBigPic();
      doReturn("%").when(pmsBrandParam0).getBrandStory();
      doReturn(integer0).when(pmsBrandParam0).getFactoryStatus();
      doReturn("%").when(pmsBrandParam0).getFirstLetter();
      doReturn("%").when(pmsBrandParam0).getLogo();
      doReturn("%").when(pmsBrandParam0).getName();
      doReturn(integer0).when(pmsBrandParam0).getShowStatus();
      doReturn(integer0).when(pmsBrandParam0).getSort();
      
      //Call method: createBrand
      int int0 = pmsBrandServiceImpl0.createBrand(pmsBrandParam0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_deleteBrand_1()  throws Throwable  {
      //caseID:d34588dc2862175f9bdf0c783127aef8
      //CoveredLines: [24, 66]
      //Input_0_Long: 0L
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long(0L);
      
      //Call method: deleteBrand
      int int0 = pmsBrandServiceImpl0.deleteBrand(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_deleteBrand_2()  throws Throwable  {
      //caseID:971596bd02003b6540b9aa87a0f1dc8c
      //CoveredLines: [24, 71, 72, 73]
      //Input_0_List<Long>: linkedList0
      //Assert: assertEquals(0, method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: deleteBrand
      int int0 = pmsBrandServiceImpl0.deleteBrand((List<Long>) linkedList0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getBrand_3()  throws Throwable  {
      //caseID:596b2e313e2f6a3011e0707168c67b7b
      //CoveredLines: [24, 90]
      //Input_0_Long: 3216L
      //Assert: assertNull(method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long(3216L);
      
      //Call method: getBrand
      PmsBrand pmsBrand0 = pmsBrandServiceImpl0.getBrand(long0);
      
      //Test Result Assert
      assertNull(pmsBrand0);
  }

  @Test(timeout = 4000)
  public void test_listAllBrand_4()  throws Throwable  {
      //caseID:6f884919f691724a796ae23dcd9728be
      //CoveredLines: [24, 32]
      //Assert: assertNull(method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listAllBrand
      List<PmsBrand> list0 = pmsBrandServiceImpl0.listAllBrand();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listBrand_5()  throws Throwable  {
      //caseID:bcda44a5171c0e619d49705b57c3416a
      //CoveredLines: [24, 78, 79, 80, 81, 82, 85]
      //Input_0_String: 
      //Input_1_int: -1
      //Input_2_int: 0
      //Assert: assertEquals(0, method_result.size());
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      Stack<PmsBrand> stack0 = new Stack<PmsBrand>();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsBrandMapper0).selectByExample(any(com.macro.mall.model.PmsBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listBrand
      List<PmsBrand> list0 = pmsBrandServiceImpl0.listBrand("", (-1), 0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_listBrand_6()  throws Throwable  {
      //caseID:89f243b844496ceafe3a4e09cbfd33da
      //CoveredLines: [24, 78, 79, 80, 81, 82, 83, 85]
      //Input_0_String: 1
      //Input_1_int: 78721
      //Input_2_int: 0
      //Assert: assertNull(method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      
      //Call method: listBrand
      List<PmsBrand> list0 = pmsBrandServiceImpl0.listBrand("1", 78721, 0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateBrand_7()  throws Throwable  {
      //caseID:f49c2fde9d2da011e36f58eb6f09858b
      //CoveredLines: [24, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61]
      //Input_0_Long: (-1)
      //Input_1_PmsBrandParam: {getSort=(-1), getLogo=\"POST\", getName=\"POST\", getShowStatus=(-1), getFactoryStatus=(-1), getBrandStory=\"POST\", getBigPic=\"POST\", getFirstLetter=\"POST\"}
      //Assert: assertEquals((-1), method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsBrandMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsBrand.class));
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsProductMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsProduct.class) , any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Long long0 = new Long((-1));
      Integer integer0 = new Integer((-1));
      //mock pmsBrandParam0
      PmsBrandParam pmsBrandParam0 = mock(PmsBrandParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("POST").when(pmsBrandParam0).getBigPic();
      doReturn("POST").when(pmsBrandParam0).getBrandStory();
      doReturn(integer0).when(pmsBrandParam0).getFactoryStatus();
      doReturn("POST").when(pmsBrandParam0).getFirstLetter();
      doReturn("POST").when(pmsBrandParam0).getLogo();
      doReturn("POST").when(pmsBrandParam0).getName();
      doReturn(integer0).when(pmsBrandParam0).getShowStatus();
      doReturn(integer0).when(pmsBrandParam0).getSort();
      
      //Call method: updateBrand
      int int0 = pmsBrandServiceImpl0.updateBrand(long0, pmsBrandParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updateFactoryStatus_8()  throws Throwable  {
      //caseID:d19f7994ee508afc8ec4164810ac7f71
      //CoveredLines: [24, 104, 105, 106, 107, 108]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: (-1)
      //Assert: assertEquals((-1), method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsBrandMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsBrand.class) , any(com.macro.mall.model.PmsBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updateFactoryStatus
      int int0 = pmsBrandServiceImpl0.updateFactoryStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_9()  throws Throwable  {
      //caseID:eb3d1efc3fdef2cb026f3b94df27d2fd
      //CoveredLines: [24, 95, 96, 97, 98, 99]
      //Input_0_List<Long>: arrayList0
      //Input_1_Integer: (-15)
      //Assert: assertEquals((-15), method_result);
      
      PmsBrandServiceImpl pmsBrandServiceImpl0 = new PmsBrandServiceImpl();
      //mock pmsBrandMapper0
      PmsBrandMapper pmsBrandMapper0 = mock(PmsBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-15)).when(pmsBrandMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsBrand.class) , any(com.macro.mall.model.PmsBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsBrandServiceImpl.class, pmsBrandServiceImpl0, "brandMapper", (Object) pmsBrandMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer((-15));
      
      //Call method: updateShowStatus
      int int0 = pmsBrandServiceImpl0.updateShowStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals((-15), int0);
  }
}
