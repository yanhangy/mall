/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dto.SmsFlashPromotionSessionDetail;
import com.macro.mall.mapper.SmsFlashPromotionSessionMapper;
import com.macro.mall.model.SmsFlashPromotionSession;
import com.macro.mall.service.SmsFlashPromotionProductRelationService;
import com.macro.mall.service.impl.SmsFlashPromotionSessionServiceImpl;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsFlashPromotionSessionServiceImpl_SSTest extends SmsFlashPromotionSessionServiceImpl_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 36, 37, 42, 43, 44, 45, 50, 55, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:052dd6fc43618c2da8dc917348a7ddd2
      //CoveredLines: [22, 30, 31]
      //Input_0_SmsFlashPromotionSession: {}
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionSessionServiceImpl smsFlashPromotionSessionServiceImpl0 = new SmsFlashPromotionSessionServiceImpl();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      //mock smsFlashPromotionSession0
      SmsFlashPromotionSession smsFlashPromotionSession0 = mock(SmsFlashPromotionSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = smsFlashPromotionSessionServiceImpl0.create(smsFlashPromotionSession0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:5f4f12948cf28dc9f9c90e873b2c1e97
      //CoveredLines: [22, 50]
      //Input_0_Long: 522L
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionSessionServiceImpl smsFlashPromotionSessionServiceImpl0 = new SmsFlashPromotionSessionServiceImpl();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      Long long0 = new Long(522L);
      
      //Call method: delete
      int int0 = smsFlashPromotionSessionServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:a6b536b236c1e6d1aff9abb617f4aa82
      //CoveredLines: [22, 55]
      //Input_0_Long: 96L
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionSessionServiceImpl smsFlashPromotionSessionServiceImpl0 = new SmsFlashPromotionSessionServiceImpl();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      Long long0 = new Long(96L);
      
      //Call method: getItem
      SmsFlashPromotionSession smsFlashPromotionSession0 = smsFlashPromotionSessionServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(smsFlashPromotionSession0);
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:b9ebce352971d2f04c86bcee79aca345
      //CoveredLines: [22, 60, 61]
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionSessionServiceImpl smsFlashPromotionSessionServiceImpl0 = new SmsFlashPromotionSessionServiceImpl();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      
      //Call method: list
      List<SmsFlashPromotionSession> list0 = smsFlashPromotionSessionServiceImpl0.list();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_selectList_4()  throws Throwable  {
      //caseID:7dcc6341394d1b9ede6076cbb7650050
      //CoveredLines: [22, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
      //Input_0_Long: 0L
      //Assert: assertFalse(method_result.isEmpty());
      
      SmsFlashPromotionSessionServiceImpl smsFlashPromotionSessionServiceImpl0 = new SmsFlashPromotionSessionServiceImpl();
      LinkedList<SmsFlashPromotionSession> linkedList0 = new LinkedList<SmsFlashPromotionSession>();
      //mock smsFlashPromotionSession0
      SmsFlashPromotionSession smsFlashPromotionSession0 = mock(SmsFlashPromotionSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(smsFlashPromotionSession0);
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsFlashPromotionSessionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionSessionExample.class));
      //mock smsFlashPromotionProductRelationService0
      SmsFlashPromotionProductRelationService smsFlashPromotionProductRelationService0 = mock(SmsFlashPromotionProductRelationService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "relationService", (Object) smsFlashPromotionProductRelationService0);
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      Long long0 = new Long(0L);
      
      //Call method: selectList
      List<SmsFlashPromotionSessionDetail> list0 = smsFlashPromotionSessionServiceImpl0.selectList(long0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:010adb45febbb3dcc3234d399c9a953c
      //CoveredLines: [22, 36, 37]
      //Input_0_Long: 183L
      //Input_1_SmsFlashPromotionSession: {}
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionSessionServiceImpl smsFlashPromotionSessionServiceImpl0 = new SmsFlashPromotionSessionServiceImpl();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      Long long0 = new Long(183L);
      //mock smsFlashPromotionSession0
      SmsFlashPromotionSession smsFlashPromotionSession0 = mock(SmsFlashPromotionSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = smsFlashPromotionSessionServiceImpl0.update(long0, smsFlashPromotionSession0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateStatus_6()  throws Throwable  {
      //caseID:0297155e855347567149a40cc244dcfd
      //CoveredLines: [22, 42, 43, 44, 45]
      //Input_0_Long: 39
      //Input_1_Integer: 39
      //Assert: assertEquals(39, method_result);
      
      SmsFlashPromotionSessionServiceImpl smsFlashPromotionSessionServiceImpl0 = new SmsFlashPromotionSessionServiceImpl();
      //mock smsFlashPromotionSessionMapper0
      SmsFlashPromotionSessionMapper smsFlashPromotionSessionMapper0 = mock(SmsFlashPromotionSessionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(39).when(smsFlashPromotionSessionMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsFlashPromotionSession.class));
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionSessionServiceImpl.class, smsFlashPromotionSessionServiceImpl0, "promotionSessionMapper", (Object) smsFlashPromotionSessionMapper0);
      Long long0 = new Long(39);
      Integer integer0 = new Integer(39);
      
      //Call method: updateStatus
      int int0 = smsFlashPromotionSessionServiceImpl0.updateStatus(long0, integer0);
      
      //Test Result Assert
      assertEquals(39, int0);
  }
}
