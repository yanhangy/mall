/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.SmsHomeRecommendProductController;
import com.macro.mall.model.SmsHomeRecommendProduct;
import com.macro.mall.service.SmsHomeRecommendProductService;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeRecommendProductController_SSTest extends SmsHomeRecommendProductController_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 34, 41, 42, 43, 45, 52, 53, 54, 56, 63, 64, 65, 67, 77, 78]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:fbce24d807d74e1b34f73dd7f699cc5a
      //CoveredLines: [22, 30, 31, 32]
      //Input_0_SmsHomeRecommendProduct>: vector0
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2604).when(smsHomeRecommendProductService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeRecommendProduct>anyList());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      Vector<SmsHomeRecommendProduct> vector0 = new Vector<SmsHomeRecommendProduct>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeRecommendProductController0.create(vector0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:7ab2c58165a092731eee4798a1d9088f
      //CoveredLines: [22, 30, 31, 34]
      //Input_0_SmsHomeRecommendProduct>: linkedList0
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeRecommendProductService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeRecommendProduct>anyList());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      LinkedList<SmsHomeRecommendProduct> linkedList0 = new LinkedList<SmsHomeRecommendProduct>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeRecommendProductController0.create(linkedList0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:27b16f058e8483cded413123c8314a15
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_Long>: stack0
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2151).when(smsHomeRecommendProductService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeRecommendProductController0.delete(stack0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:38b3fdd047ce7071becd30e086624d25
      //CoveredLines: [22, 52, 53, 56]
      //Input_0_Long>: stack0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeRecommendProductController0.delete(stack0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:e1f6aba44cb8e71d8b3d1b48712902cb
      //CoveredLines: [22, 77, 78]
      //Input_0_String: ""
      //Input_1_Integer: 154
      //Input_2_Integer: 154
      //Input_3_Integer: 154
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      ArrayList<SmsHomeRecommendProduct> arrayList0 = new ArrayList<SmsHomeRecommendProduct>();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsHomeRecommendProductService0).list(anyString() , anyInt() , anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      Integer integer0 = new Integer(154);
      
      //Call method: list
      CommonResult<CommonPage<SmsHomeRecommendProduct>> commonResult0 = smsHomeRecommendProductController0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:7c3ec6d665a6c2c7e84d82d8e413c170
      //CoveredLines: [22, 63, 64, 67]
      //Input_0_Long>: linkedList0
      //Input_1_Integer: 411
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer(411);
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeRecommendProductController0.updateRecommendStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_6()  throws Throwable  {
      //caseID:b37d7d52b19b04d26a9d3b2a8d80fb0b
      //CoveredLines: [22, 63, 64, 65]
      //Input_0_Long>: vector0
      //Input_1_Integer: 1685
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(818).when(smsHomeRecommendProductService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer(1685);
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeRecommendProductController0.updateRecommendStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateSort_7()  throws Throwable  {
      //caseID:e1ea0ef2196ea25b78e8ef419545dc8a
      //CoveredLines: [22, 41, 42, 45]
      //Input_0_Long: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeRecommendProductService0).updateSort(anyLong() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      Long long0 = new Long((-1));
      Integer integer0 = new Integer((-1));
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeRecommendProductController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateSort_8()  throws Throwable  {
      //caseID:5a67b5017160ea5958d4801461751488
      //CoveredLines: [22, 41, 42, 43]
      //Input_0_Long: 1
      //Input_1_Integer: 1
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeRecommendProductController smsHomeRecommendProductController0 = new SmsHomeRecommendProductController();
      //mock smsHomeRecommendProductService0
      SmsHomeRecommendProductService smsHomeRecommendProductService0 = mock(SmsHomeRecommendProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsHomeRecommendProductService0).updateSort(anyLong() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductController.class, smsHomeRecommendProductController0, "recommendProductService", (Object) smsHomeRecommendProductService0);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(1);
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeRecommendProductController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
}
