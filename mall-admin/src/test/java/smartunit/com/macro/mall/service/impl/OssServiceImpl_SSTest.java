/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.aliyun.oss.OSSClient;
import com.aliyun.oss.common.auth.Credentials;
import com.aliyun.oss.common.auth.CredentialsProvider;
import com.macro.mall.dto.OssCallbackResult;
import com.macro.mall.dto.OssPolicyResult;
import com.macro.mall.service.impl.OssServiceImpl;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OssServiceImpl_SSTest extends OssServiceImpl_SSTest_scaffolding {
// allCoveredLines:[27, 51, 53, 54, 56, 57, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99]

  @Test(timeout = 4000)
  public void test_callback_0()  throws Throwable  {
      //caseID:d36522932b06827780c7c91a1a40e20e
      //CoveredLines: [27, 91, 92, 93, 94, 95, 96, 97, 98, 99]
      //Input_0_HttpServletRequest: {getParameter=\"POST\"}
      //Assert: assertEquals("http://..POST/POST", method_result.getFilename());
      
      OssServiceImpl ossServiceImpl0 = new OssServiceImpl();
      
      PrivateAccess.setVariable((Class<?>) OssServiceImpl.class, ossServiceImpl0, "ALIYUN_OSS_ENDPOINT", (Object) "POST");
      
      PrivateAccess.setVariable((Class<?>) OssServiceImpl.class, ossServiceImpl0, "ALIYUN_OSS_BUCKET_NAME", (Object) ".");
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("POST").when(httpServletRequest0).getParameter(anyString());
      
      //Call method: callback
      OssCallbackResult ossCallbackResult0 = ossServiceImpl0.callback(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("http://..POST/POST", ossCallbackResult0.getFilename());
  }

  @Test(timeout = 4000)
  public void test_policy_1()  throws Throwable  {
      //caseID:0d67ad9b5276127dfd122a4144ceb35b
      //CoveredLines: [27, 51, 53, 54, 56, 57, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 83, 84, 86]
      //Assert: assertNull(method_result.getDir());
      
      OssServiceImpl ossServiceImpl0 = new OssServiceImpl();
      //mock oSSClient0
      OSSClient oSSClient0 = mock(OSSClient.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("StartWith").when(oSSClient0).generatePostPolicy(any(java.util.Date.class) , any(com.aliyun.oss.model.PolicyConditions.class));
      
      PrivateAccess.setVariable((Class<?>) OssServiceImpl.class, ossServiceImpl0, "ossClient", (Object) oSSClient0);
      
      //Call method: policy
      OssPolicyResult ossPolicyResult0 = ossServiceImpl0.policy();
      
      //Test Result Assert
      assertNull(ossPolicyResult0.getDir());
  }

  @Test(timeout = 4000)
  public void test_policy_2()  throws Throwable  {
      //caseID:f5a45c2873b0f24b32d04fb2429b9771
      //CoveredLines: [27, 51, 53, 54, 56, 57, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86]
      //Assert: assertEquals("null20140214", method_result.getDir());
      //Assert: assertEquals("http://null.null", method_result.getHost());
      //Assert: assertEquals("filename=${object}&size=${size}&mimeType=${mimeType}&height=${imageInfo.height}&width=${imageInfo.width}", method_result.getSignature());
      //Assert: assertEquals("eyJjYWxsYmFja0JvZHlUeXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwiY2FsbGJhY2tCb2R5IjoiZmlsZW5hbWU9JHtvYmplY3R9JnNpemU9JHtzaXplfSZtaW1lVHlwZT0ke21pbWVUeXBlfSZoZWlnaHQ9JHtpbWFnZUluZm8uaGVpZ2h0fSZ3aWR0aD0ke2ltYWdlSW5mby53aWR0aH0ifQ==", method_result.getCallback());
      //Assert: assertEquals("ZmlsZW5hbWU9JHtvYmplY3R9JnNpemU9JHtzaXplfSZtaW1lVHlwZT0ke21pbWVUeXBlfSZoZWlnaHQ9JHtpbWFnZUluZm8uaGVpZ2h0fSZ3aWR0aD0ke2ltYWdlSW5mby53aWR0aH0=", method_result.getPolicy());
      
      OssServiceImpl ossServiceImpl0 = new OssServiceImpl();
      //mock credentials0
      Credentials credentials0 = mock(Credentials.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("filename=${object}&size=${size}&mimeType=${mimeType}&height=${imageInfo.height}&width=${imageInfo.width}").when(credentials0).getAccessKeyId();
      //mock credentialsProvider0
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(credentials0).when(credentialsProvider0).getCredentials();
      //mock oSSClient0
      OSSClient oSSClient0 = mock(OSSClient.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("filename=${object}&size=${size}&mimeType=${mimeType}&height=${imageInfo.height}&width=${imageInfo.width}").when(oSSClient0).calculatePostSignature(anyString());
      doReturn("filename=${object}&size=${size}&mimeType=${mimeType}&height=${imageInfo.height}&width=${imageInfo.width}").when(oSSClient0).generatePostPolicy(any(java.util.Date.class) , any(com.aliyun.oss.model.PolicyConditions.class));
      doReturn(credentialsProvider0).when(oSSClient0).getCredentialsProvider();
      
      PrivateAccess.setVariable((Class<?>) OssServiceImpl.class, ossServiceImpl0, "ossClient", (Object) oSSClient0);
      
      //Call method: policy
      OssPolicyResult ossPolicyResult0 = ossServiceImpl0.policy();
      
      //Test Result Assert
      assertEquals("null20140214", ossPolicyResult0.getDir());
      
      //Test Result Assert
      assertEquals("http://null.null", ossPolicyResult0.getHost());
      
      //Test Result Assert
      assertEquals("filename=${object}&size=${size}&mimeType=${mimeType}&height=${imageInfo.height}&width=${imageInfo.width}", ossPolicyResult0.getSignature());
      
      //Test Result Assert
      assertEquals("eyJjYWxsYmFja0JvZHlUeXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwiY2FsbGJhY2tCb2R5IjoiZmlsZW5hbWU9JHtvYmplY3R9JnNpemU9JHtzaXplfSZtaW1lVHlwZT0ke21pbWVUeXBlfSZoZWlnaHQ9JHtpbWFnZUluZm8uaGVpZ2h0fSZ3aWR0aD0ke2ltYWdlSW5mby53aWR0aH0ifQ==", ossPolicyResult0.getCallback());
      
      //Test Result Assert
      assertEquals("ZmlsZW5hbWU9JHtvYmplY3R9JnNpemU9JHtzaXplfSZtaW1lVHlwZT0ke21pbWVUeXBlfSZoZWlnaHQ9JHtpbWFnZUluZm8uaGVpZ2h0fSZ3aWR0aD0ke2ltYWdlSW5mby53aWR0aH0=", ossPolicyResult0.getPolicy());
  }
}
