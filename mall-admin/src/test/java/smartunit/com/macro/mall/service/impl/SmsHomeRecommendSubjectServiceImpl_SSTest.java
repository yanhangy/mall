/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsHomeRecommendSubjectMapper;
import com.macro.mall.model.SmsHomeRecommendSubject;
import com.macro.mall.service.impl.SmsHomeRecommendSubjectServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeRecommendSubjectServiceImpl_SSTest extends SmsHomeRecommendSubjectServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 42, 43, 44, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 67, 68]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:eb5aabe1f13e17ee8cda214eb906d9dc
      //CoveredLines: [19, 24, 25, 26, 27, 28, 29]
      //Input_0_SmsHomeRecommendSubject>: stack0
      //Assert: assertEquals(1, method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Stack<SmsHomeRecommendSubject> stack0 = new Stack<SmsHomeRecommendSubject>();
      //mock smsHomeRecommendSubject0
      SmsHomeRecommendSubject smsHomeRecommendSubject0 = mock(SmsHomeRecommendSubject.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      stack0.add(smsHomeRecommendSubject0);
      
      //Call method: create
      int int0 = smsHomeRecommendSubjectServiceImpl0.create(stack0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:4b33d16a57c243a784991a4d5a65eb6a
      //CoveredLines: [19, 42, 43, 44]
      //Input_0_Long>: stack0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      int int0 = smsHomeRecommendSubjectServiceImpl0.delete(stack0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:01894c5c6067629de60344cd065cb18d
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 67, 68]
      //Input_0_String: "sort desc"
      //Input_1_Integer: null
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      ArrayList<SmsHomeRecommendSubject> arrayList0 = new ArrayList<SmsHomeRecommendSubject>();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsHomeRecommendSubjectMapper0).selectByExample(any(com.macro.mall.model.SmsHomeRecommendSubjectExample.class));
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeRecommendSubject> list0 = smsHomeRecommendSubjectServiceImpl0.list("sort desc", (Integer) null, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:d98fd96b668c26e1f32d2e4c576e0db0
      //CoveredLines: [19, 58, 59, 60, 61, 64, 65, 67, 68]
      //Input_0_String: ""
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      LinkedList<SmsHomeRecommendSubject> linkedList0 = new LinkedList<SmsHomeRecommendSubject>();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsHomeRecommendSubjectMapper0).selectByExample(any(com.macro.mall.model.SmsHomeRecommendSubjectExample.class));
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeRecommendSubject> list0 = smsHomeRecommendSubjectServiceImpl0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:687ec2fc4d85a6c1b8a87b6b0174d8bf
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 65, 67, 68]
      //Input_0_String: "sort desc"
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertNull(method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeRecommendSubject> list0 = smsHomeRecommendSubjectServiceImpl0.list("sort desc", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:9c2ba460d082ae38a9b42c29f12ccbe0
      //CoveredLines: [19, 49, 50, 51, 52, 53]
      //Input_0_Long>: stack0
      //Input_1_Integer: (-1)
      //Assert: assertEquals((-1), method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeRecommendSubjectMapper0).updateByExampleSelective(any(com.macro.mall.model.SmsHomeRecommendSubject.class) , any(com.macro.mall.model.SmsHomeRecommendSubjectExample.class));
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updateRecommendStatus
      int int0 = smsHomeRecommendSubjectServiceImpl0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updateSort_6()  throws Throwable  {
      //caseID:31902e04a72654a07ed87e72077ebb83
      //CoveredLines: [19, 34, 35, 36, 37]
      //Input_0_Long: 0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeRecommendSubjectMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsHomeRecommendSubject.class));
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Long long0 = new Long(0);
      Integer integer0 = new Integer(0);
      
      //Call method: updateSort
      int int0 = smsHomeRecommendSubjectServiceImpl0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
