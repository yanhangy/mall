/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsHomeRecommendSubjectMapper;
import com.macro.mall.model.SmsHomeRecommendSubject;
import com.macro.mall.service.impl.SmsHomeRecommendSubjectServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeRecommendSubjectServiceImpl_SSTest extends SmsHomeRecommendSubjectServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 42, 43, 44, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 67, 68]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:43ed1d2e13e7da62549b12bd62fe6882
      //CoveredLines: [19, 24, 25, 26, 27, 28, 29]
      //Input_0_List<SmsHomeRecommendSubject>: vector0
      //Assert: assertEquals(1, method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Vector<SmsHomeRecommendSubject> vector0 = new Vector<SmsHomeRecommendSubject>();
      //mock smsHomeRecommendSubject0
      SmsHomeRecommendSubject smsHomeRecommendSubject0 = mock(SmsHomeRecommendSubject.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(smsHomeRecommendSubject0);
      
      //Call method: create
      int int0 = smsHomeRecommendSubjectServiceImpl0.create(vector0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:7fbf0e9e841539d09f47e4d3793167dc
      //CoveredLines: [19, 42, 43, 44]
      //Input_0_List<Long>: linkedList0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: delete
      int int0 = smsHomeRecommendSubjectServiceImpl0.delete(linkedList0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:9876e5ac904c97663cc5f5d881c2fe8d
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 67, 68]
      //Input_0_String: -@
      //Input_1_Integer: null
      //Input_2_Integer: 17
      //Input_3_Integer: 17
      //Assert: assertEquals(0, method_result.size());
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      ArrayList<SmsHomeRecommendSubject> arrayList0 = new ArrayList<SmsHomeRecommendSubject>();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsHomeRecommendSubjectMapper0).selectByExample(any(com.macro.mall.model.SmsHomeRecommendSubjectExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Integer integer0 = new Integer(17);
      
      //Call method: list
      List<SmsHomeRecommendSubject> list0 = smsHomeRecommendSubjectServiceImpl0.list("-@", (Integer) null, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:a044a4786cdab08c40a37e821e0604e1
      //CoveredLines: [19, 58, 59, 60, 61, 64, 65, 67, 68]
      //Input_0_String: 
      //Input_1_Integer: 1415
      //Input_2_Integer: 1415
      //Input_3_Integer: 1415
      //Assert: assertNull(method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Integer integer0 = new Integer(1415);
      
      //Call method: list
      List<SmsHomeRecommendSubject> list0 = smsHomeRecommendSubjectServiceImpl0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:9feb05adfdf4959f36e5b4b1e20940c5
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 65, 67, 68]
      //Input_0_String: sort desc
      //Input_1_Integer: 74
      //Input_2_Integer: 74
      //Input_3_Integer: 74
      //Assert: assertEquals(0, method_result.size());
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      LinkedList<SmsHomeRecommendSubject> linkedList0 = new LinkedList<SmsHomeRecommendSubject>();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsHomeRecommendSubjectMapper0).selectByExample(any(com.macro.mall.model.SmsHomeRecommendSubjectExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Integer integer0 = new Integer(74);
      
      //Call method: list
      List<SmsHomeRecommendSubject> list0 = smsHomeRecommendSubjectServiceImpl0.list("sort desc", integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:b5f197f561ee78f2a237b26a0f469d2a
      //CoveredLines: [19, 49, 50, 51, 52, 53]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: 67
      //Assert: assertEquals(67, method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(67).when(smsHomeRecommendSubjectMapper0).updateByExampleSelective(any(com.macro.mall.model.SmsHomeRecommendSubject.class) , any(com.macro.mall.model.SmsHomeRecommendSubjectExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer(67);
      
      //Call method: updateRecommendStatus
      int int0 = smsHomeRecommendSubjectServiceImpl0.updateRecommendStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test_updateSort_6()  throws Throwable  {
      //caseID:0b11ff4080cad3230c0b4dcc6d6749ee
      //CoveredLines: [19, 34, 35, 36, 37]
      //Input_0_Long: 14
      //Input_1_Integer: 14
      //Assert: assertEquals(14, method_result);
      
      SmsHomeRecommendSubjectServiceImpl smsHomeRecommendSubjectServiceImpl0 = new SmsHomeRecommendSubjectServiceImpl();
      //mock smsHomeRecommendSubjectMapper0
      SmsHomeRecommendSubjectMapper smsHomeRecommendSubjectMapper0 = mock(SmsHomeRecommendSubjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(14).when(smsHomeRecommendSubjectMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsHomeRecommendSubject.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectServiceImpl.class, smsHomeRecommendSubjectServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendSubjectMapper0);
      Long long0 = new Long(14);
      Integer integer0 = new Integer(14);
      
      //Call method: updateSort
      int int0 = smsHomeRecommendSubjectServiceImpl0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(14, int0);
  }
}
