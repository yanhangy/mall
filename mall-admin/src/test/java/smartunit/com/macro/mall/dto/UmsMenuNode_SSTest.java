/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.macro.mall.dto.UmsMenuNode;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsMenuNode_SSTest extends UmsMenuNode_SSTest_scaffolding {
// allCoveredLines:[15, 16, 18]

  @Test(timeout = 4000)
  public void test_getChildren_0()  throws Throwable  {
      //caseID:d25688c7dbb27968a9bcfcf7a5b922cc
      //CoveredLines: [16, 18]
      //Assert: assertTrue(method_result.isEmpty());
      
      UmsMenuNode umsMenuNode0 = new UmsMenuNode();
      Stack<UmsMenuNode> stack0 = new Stack<UmsMenuNode>();
      
      PrivateAccess.setVariable((Class<?>) UmsMenuNode.class, umsMenuNode0, "children", (Object) stack0);
      
      //Call method: getChildren
      List<UmsMenuNode> list0 = umsMenuNode0.getChildren();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_setChildren_1()  throws Throwable  {
      //caseID:f8b99393ffcf4ce66c1a6366a5f2aea1
      //CoveredLines: [15, 16]
      //Input_0_List<UmsMenuNode>: arrayList0
      
      UmsMenuNode umsMenuNode0 = new UmsMenuNode();
      ArrayList<UmsMenuNode> arrayList0 = new ArrayList<UmsMenuNode>();
      
      //Call method: setChildren
      umsMenuNode0.setChildren(arrayList0);
      
      //Test Result Assert
      assertNull(umsMenuNode0.getParentId());
  }
}
