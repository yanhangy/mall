/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.validator.FlagValidator;
import com.macro.mall.validator.FlagValidatorClass;
import javax.validation.ConstraintValidatorContext;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FlagValidatorClass_SSTest extends FlagValidatorClass_SSTest_scaffolding {
// allCoveredLines:[10, 14, 15, 19, 20, 22, 24, 25, 26, 27, 30]

  @Test(timeout = 4000)
  public void test_initialize_0()  throws Throwable  {
      //caseID:f27f07725b74d0e4f3dec7351566d586
      //CoveredLines: [10, 14, 15]
      //Input_0_FlagValidator: {}
      
      FlagValidatorClass flagValidatorClass0 = new FlagValidatorClass();
      //mock flagValidator0
      FlagValidator flagValidator0 = mock(FlagValidator.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: initialize
      flagValidatorClass0.initialize(flagValidator0);
  }

  @Test(timeout = 4000)
  public void test_isValid_1()  throws Throwable  {
      //caseID:e1695b7ec0e74cb0131b893efc9e0d59
      //CoveredLines: [10, 19, 20, 22]
      //Input_0_Integer: null
      //Input_1_ConstraintValidatorContext: {}
      //Assert: assertTrue(method_result);
      
      FlagValidatorClass flagValidatorClass0 = new FlagValidatorClass();
      //mock constraintValidatorContext0
      ConstraintValidatorContext constraintValidatorContext0 = mock(ConstraintValidatorContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isValid
      boolean boolean0 = flagValidatorClass0.isValid((Integer) null, constraintValidatorContext0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isValid_2()  throws Throwable  {
      //caseID:f02e33537b269e916a428b797db2c0f5
      //CoveredLines: [10, 19, 20, 24, 25, 30]
      //Input_0_Integer: 36
      //Input_1_ConstraintValidatorContext: {}
      //Assert: assertFalse(method_result);
      
      FlagValidatorClass flagValidatorClass0 = new FlagValidatorClass();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.0";
      
      PrivateAccess.setVariable((Class<?>) FlagValidatorClass.class, flagValidatorClass0, "values", (Object) stringArray0);
      Integer integer0 = new Integer(36);
      //mock constraintValidatorContext0
      ConstraintValidatorContext constraintValidatorContext0 = mock(ConstraintValidatorContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isValid
      boolean boolean0 = flagValidatorClass0.isValid(integer0, constraintValidatorContext0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isValid_3()  throws Throwable  {
      //caseID:593d9de4dbd8ed6fded0c9ba5664d02e
      //CoveredLines: [10, 19, 20, 24, 25, 26, 27, 30]
      //Input_0_Integer: 0
      //Input_1_ConstraintValidatorContext: {}
      //Assert: assertTrue(method_result);
      
      FlagValidatorClass flagValidatorClass0 = new FlagValidatorClass();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-1982669979";
      stringArray0[1] = "1";
      stringArray0[2] = "0";
      
      PrivateAccess.setVariable((Class<?>) FlagValidatorClass.class, flagValidatorClass0, "values", (Object) stringArray0);
      Integer integer0 = new Integer(0);
      //mock constraintValidatorContext0
      ConstraintValidatorContext constraintValidatorContext0 = mock(ConstraintValidatorContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isValid
      boolean boolean0 = flagValidatorClass0.isValid(integer0, constraintValidatorContext0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isValid_4()  throws Throwable  {
      //caseID:5b466275ab1d5fde6b323048864b813c
      //CoveredLines: [10, 19, 20, 24, 25, 26, 27, 30]
      //Input_0_Integer: 0
      //Input_1_ConstraintValidatorContext: {}
      //Assert: assertTrue(method_result);
      
      FlagValidatorClass flagValidatorClass0 = new FlagValidatorClass();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      
      PrivateAccess.setVariable((Class<?>) FlagValidatorClass.class, flagValidatorClass0, "values", (Object) stringArray0);
      Integer integer0 = new Integer(0);
      //mock constraintValidatorContext0
      ConstraintValidatorContext constraintValidatorContext0 = mock(ConstraintValidatorContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isValid
      boolean boolean0 = flagValidatorClass0.isValid(integer0, constraintValidatorContext0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }
}
