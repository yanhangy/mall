/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsHomeRecommendProductMapper;
import com.macro.mall.model.SmsHomeRecommendProduct;
import com.macro.mall.service.impl.SmsHomeRecommendProductServiceImpl;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeRecommendProductServiceImpl_SSTest extends SmsHomeRecommendProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 42, 43, 44, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 67, 68]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:f1b2bc8dca8456099cc6e41ef8597874
      //CoveredLines: [19, 24, 25, 26, 27, 28, 29]
      //Input_0_SmsHomeRecommendProduct>: stack0
      //Assert: assertEquals(1, method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Stack<SmsHomeRecommendProduct> stack0 = new Stack<SmsHomeRecommendProduct>();
      //mock smsHomeRecommendProduct0
      SmsHomeRecommendProduct smsHomeRecommendProduct0 = mock(SmsHomeRecommendProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      stack0.add(smsHomeRecommendProduct0);
      
      //Call method: create
      int int0 = smsHomeRecommendProductServiceImpl0.create(stack0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:b974c2a0efffb7feb6c7346d11c09f3f
      //CoveredLines: [19, 42, 43, 44]
      //Input_0_Long>: stack0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      int int0 = smsHomeRecommendProductServiceImpl0.delete(stack0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:c9d70be22edd682c347558fd9a9d473b
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 67, 68]
      //Input_0_String: "sort desc"
      //Input_1_Integer: null
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertEquals(0, method_result.size());
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      LinkedList<SmsHomeRecommendProduct> linkedList0 = new LinkedList<SmsHomeRecommendProduct>();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsHomeRecommendProductMapper0).selectByExample(any(com.macro.mall.model.SmsHomeRecommendProductExample.class));
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeRecommendProduct> list0 = smsHomeRecommendProductServiceImpl0.list("sort desc", (Integer) null, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:6538c348f9f835542b85303d17bd8d21
      //CoveredLines: [19, 58, 59, 60, 61, 64, 65, 67, 68]
      //Input_0_String: ""
      //Input_1_Integer: 205
      //Input_2_Integer: 205
      //Input_3_Integer: 205
      //Assert: assertNull(method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Integer integer0 = new Integer(205);
      
      //Call method: list
      List<SmsHomeRecommendProduct> list0 = smsHomeRecommendProductServiceImpl0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:31e6c259ec652c8ed74357955e47c94c
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 65, 67, 68]
      //Input_0_String: "1.0"
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertNull(method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeRecommendProduct> list0 = smsHomeRecommendProductServiceImpl0.list("1.0", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:96b1c3f81ca8a8539c06831c3d7c9bf2
      //CoveredLines: [19, 49, 50, 51, 52, 53]
      //Input_0_Long>: stack0
      //Input_1_Integer: 2346
      //Assert: assertEquals(0, method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer(2346);
      
      //Call method: updateRecommendStatus
      int int0 = smsHomeRecommendProductServiceImpl0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateSort_6()  throws Throwable  {
      //caseID:e885ed21a50fafda06d39f780f422604
      //CoveredLines: [19, 34, 35, 36, 37]
      //Input_0_Long: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertEquals((-1), method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeRecommendProductMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsHomeRecommendProduct.class));
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Long long0 = new Long((-1));
      Integer integer0 = new Integer((-1));
      
      //Call method: updateSort
      int int0 = smsHomeRecommendProductServiceImpl0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }
}
