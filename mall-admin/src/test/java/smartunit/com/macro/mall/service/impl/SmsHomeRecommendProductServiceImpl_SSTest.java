/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsHomeRecommendProductMapper;
import com.macro.mall.model.SmsHomeRecommendProduct;
import com.macro.mall.service.impl.SmsHomeRecommendProductServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeRecommendProductServiceImpl_SSTest extends SmsHomeRecommendProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 42, 43, 44, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 67, 68]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:9cf9ca00b8d65023cb8d19e5b40c28d9
      //CoveredLines: [19, 24, 25, 26, 27, 28, 29]
      //Input_0_List<SmsHomeRecommendProduct>: arrayList0
      //Assert: assertEquals(1, method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      ArrayList<SmsHomeRecommendProduct> arrayList0 = new ArrayList<SmsHomeRecommendProduct>();
      //mock smsHomeRecommendProduct0
      SmsHomeRecommendProduct smsHomeRecommendProduct0 = mock(SmsHomeRecommendProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(smsHomeRecommendProduct0);
      
      //Call method: create
      int int0 = smsHomeRecommendProductServiceImpl0.create(arrayList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:05897ccf2c341633ccbe898e52ce5b52
      //CoveredLines: [19, 42, 43, 44]
      //Input_0_List<Long>: vector0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Vector<Long> vector0 = new Vector<Long>();
      
      //Call method: delete
      int int0 = smsHomeRecommendProductServiceImpl0.delete(vector0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:a79efbf938b8b07e02bd2aebf7d2fbef
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 67, 68]
      //Input_0_String: >
      //Input_1_Integer: null
      //Input_2_Integer: 4089
      //Input_3_Integer: 4089
      //Assert: assertEquals(0, method_result.size());
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      Vector<SmsHomeRecommendProduct> vector0 = new Vector<SmsHomeRecommendProduct>();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsHomeRecommendProductMapper0).selectByExample(any(com.macro.mall.model.SmsHomeRecommendProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Integer integer0 = new Integer(4089);
      
      //Call method: list
      List<SmsHomeRecommendProduct> list0 = smsHomeRecommendProductServiceImpl0.list(">", (Integer) null, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:f78b0222a27ba79bec726a8e5ca30f57
      //CoveredLines: [19, 58, 59, 60, 61, 64, 65, 67, 68]
      //Input_0_String: 
      //Input_1_Integer: 43
      //Input_2_Integer: 43
      //Input_3_Integer: 43
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      Stack<SmsHomeRecommendProduct> stack0 = new Stack<SmsHomeRecommendProduct>();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsHomeRecommendProductMapper0).selectByExample(any(com.macro.mall.model.SmsHomeRecommendProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Integer integer0 = new Integer(43);
      
      //Call method: list
      List<SmsHomeRecommendProduct> list0 = smsHomeRecommendProductServiceImpl0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:c7a284fa2921df0152b319970f57f5f4
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 65, 67, 68]
      //Input_0_String: 1
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertNull(method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeRecommendProduct> list0 = smsHomeRecommendProductServiceImpl0.list("1", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:980d54761a6976cc07fcc3c68fa1f8e3
      //CoveredLines: [19, 49, 50, 51, 52, 53]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: (-1)
      //Assert: assertEquals((-1), method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeRecommendProductMapper0).updateByExampleSelective(any(com.macro.mall.model.SmsHomeRecommendProduct.class) , any(com.macro.mall.model.SmsHomeRecommendProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updateRecommendStatus
      int int0 = smsHomeRecommendProductServiceImpl0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updateSort_6()  throws Throwable  {
      //caseID:befd68e4e17b38638e6e4c960b2de112
      //CoveredLines: [19, 34, 35, 36, 37]
      //Input_0_Long: (-7)
      //Input_1_Integer: (-7)
      //Assert: assertEquals((-7), method_result);
      
      SmsHomeRecommendProductServiceImpl smsHomeRecommendProductServiceImpl0 = new SmsHomeRecommendProductServiceImpl();
      //mock smsHomeRecommendProductMapper0
      SmsHomeRecommendProductMapper smsHomeRecommendProductMapper0 = mock(SmsHomeRecommendProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-7)).when(smsHomeRecommendProductMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsHomeRecommendProduct.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendProductServiceImpl.class, smsHomeRecommendProductServiceImpl0, "recommendProductMapper", (Object) smsHomeRecommendProductMapper0);
      Long long0 = new Long((-7));
      Integer integer0 = new Integer((-7));
      
      //Call method: updateSort
      int int0 = smsHomeRecommendProductServiceImpl0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals((-7), int0);
  }
}
