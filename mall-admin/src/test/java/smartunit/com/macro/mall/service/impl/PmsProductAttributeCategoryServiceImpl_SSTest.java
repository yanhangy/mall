/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.PmsProductAttributeCategoryDao;
import com.macro.mall.dto.PmsProductAttributeCategoryItem;
import com.macro.mall.mapper.PmsProductAttributeCategoryMapper;
import com.macro.mall.model.PmsProductAttributeCategory;
import com.macro.mall.service.impl.PmsProductAttributeCategoryServiceImpl;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductAttributeCategoryServiceImpl_SSTest extends PmsProductAttributeCategoryServiceImpl_SSTest_scaffolding {
// allCoveredLines:[20, 28, 29, 30, 35, 36, 37, 38, 43, 48, 53, 54, 59]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:b8ffc52b2855d5898cd1ab0a10aada83
      //CoveredLines: [20, 28, 29, 30]
      //Input_0_String: 1.0
      //Assert: assertEquals(0, method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      
      //Call method: create
      int int0 = pmsProductAttributeCategoryServiceImpl0.create("1.0");
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:4a7f9d55a3bb577818786f2f0653ae9e
      //CoveredLines: [20, 43]
      //Input_0_Long: 48L
      //Assert: assertEquals(0, method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Long long0 = new Long(48L);
      
      //Call method: delete
      int int0 = pmsProductAttributeCategoryServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:723fdda7415d3cd14c56e25275a91735
      //CoveredLines: [20, 48]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getItem
      PmsProductAttributeCategory pmsProductAttributeCategory0 = pmsProductAttributeCategoryServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(pmsProductAttributeCategory0);
  }

  @Test(timeout = 4000)
  public void test_getList_3()  throws Throwable  {
      //caseID:80ed6133cb0b3f79496e03244fb5e5a1
      //CoveredLines: [20, 53, 54]
      //Input_0_Integer: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertNull(method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: getList
      List<PmsProductAttributeCategory> list0 = pmsProductAttributeCategoryServiceImpl0.getList(integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_getListWithAttr_4()  throws Throwable  {
      //caseID:9b4aca823b4ad4f25c35aa910157a811
      //CoveredLines: [20, 59]
      //Assert: assertNull(method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryDao0
      PmsProductAttributeCategoryDao pmsProductAttributeCategoryDao0 = mock(PmsProductAttributeCategoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryDao", (Object) pmsProductAttributeCategoryDao0);
      
      //Call method: getListWithAttr
      List<PmsProductAttributeCategoryItem> list0 = pmsProductAttributeCategoryServiceImpl0.getListWithAttr();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:1f458a74fe52abfbe6c7dd1bde957b8a
      //CoveredLines: [20, 35, 36, 37, 38]
      //Input_0_Long: 2449L
      //Input_1_String: com.macro.mall.service.impl.PmsProductAttributeCategoryServiceImpl
      //Assert: assertEquals(0, method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Long long0 = new Long(2449L);
      
      //Call method: update
      int int0 = pmsProductAttributeCategoryServiceImpl0.update(long0, "com.macro.mall.service.impl.PmsProductAttributeCategoryServiceImpl");
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
