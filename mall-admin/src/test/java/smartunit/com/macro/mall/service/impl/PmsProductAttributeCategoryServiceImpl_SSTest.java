/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.PmsProductAttributeCategoryDao;
import com.macro.mall.dto.PmsProductAttributeCategoryItem;
import com.macro.mall.mapper.PmsProductAttributeCategoryMapper;
import com.macro.mall.model.PmsProductAttributeCategory;
import com.macro.mall.service.impl.PmsProductAttributeCategoryServiceImpl;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductAttributeCategoryServiceImpl_SSTest extends PmsProductAttributeCategoryServiceImpl_SSTest_scaffolding {
// allCoveredLines:[20, 28, 29, 30, 35, 36, 37, 38, 43, 48, 53, 54, 59]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:e8a41c8ece375b9e2e25a169e90fbf1e
      //CoveredLines: [20, 28, 29, 30]
      //Input_0_String: 1
      //Assert: assertEquals(0, method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      
      //Call method: create
      int int0 = pmsProductAttributeCategoryServiceImpl0.create("1");
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:9046760dd0e1c9fdffe3024e337ef444
      //CoveredLines: [20, 43]
      //Input_0_Long: 2310L
      //Assert: assertEquals(0, method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Long long0 = new Long(2310L);
      
      //Call method: delete
      int int0 = pmsProductAttributeCategoryServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:4a8a72e427b2a7d403b2d89738532ee6
      //CoveredLines: [20, 48]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getItem
      PmsProductAttributeCategory pmsProductAttributeCategory0 = pmsProductAttributeCategoryServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(pmsProductAttributeCategory0);
  }

  @Test(timeout = 4000)
  public void test_getList_3()  throws Throwable  {
      //caseID:3701d5e3a54219d9fd43bf4ca0d58190
      //CoveredLines: [20, 53, 54]
      //Input_0_Integer: 1
      //Input_1_Integer: 1
      //Assert: assertNull(method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Integer integer0 = new Integer(1);
      
      //Call method: getList
      List<PmsProductAttributeCategory> list0 = pmsProductAttributeCategoryServiceImpl0.getList(integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_getListWithAttr_4()  throws Throwable  {
      //caseID:4f7107fea6f00ed2e07368f7ea7fa023
      //CoveredLines: [20, 59]
      //Assert: assertNull(method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryDao0
      PmsProductAttributeCategoryDao pmsProductAttributeCategoryDao0 = mock(PmsProductAttributeCategoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryDao", (Object) pmsProductAttributeCategoryDao0);
      
      //Call method: getListWithAttr
      List<PmsProductAttributeCategoryItem> list0 = pmsProductAttributeCategoryServiceImpl0.getListWithAttr();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:b19464f2de563617d39a8e93abf613a7
      //CoveredLines: [20, 35, 36, 37, 38]
      //Input_0_Long: 0L
      //Input_1_String: reactor.core.publisher.FluxSkipLast
      //Assert: assertEquals(0, method_result);
      
      PmsProductAttributeCategoryServiceImpl pmsProductAttributeCategoryServiceImpl0 = new PmsProductAttributeCategoryServiceImpl();
      //mock pmsProductAttributeCategoryMapper0
      PmsProductAttributeCategoryMapper pmsProductAttributeCategoryMapper0 = mock(PmsProductAttributeCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryServiceImpl.class, pmsProductAttributeCategoryServiceImpl0, "productAttributeCategoryMapper", (Object) pmsProductAttributeCategoryMapper0);
      Long long0 = new Long(0L);
      
      //Call method: update
      int int0 = pmsProductAttributeCategoryServiceImpl0.update(long0, "reactor.core.publisher.FluxSkipLast");
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
