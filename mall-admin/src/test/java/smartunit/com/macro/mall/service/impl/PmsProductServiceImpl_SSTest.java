/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.dao.PmsProductDao;
import com.macro.mall.dao.PmsProductVertifyRecordDao;
import com.macro.mall.dao.PmsSkuStockDao;
import com.macro.mall.dto.PmsProductParam;
import com.macro.mall.dto.PmsProductQueryParam;
import com.macro.mall.dto.PmsProductResult;
import com.macro.mall.mapper.CmsPrefrenceAreaProductRelationMapper;
import com.macro.mall.mapper.CmsSubjectProductRelationMapper;
import com.macro.mall.mapper.PmsMemberPriceMapper;
import com.macro.mall.mapper.PmsProductAttributeValueMapper;
import com.macro.mall.mapper.PmsProductFullReductionMapper;
import com.macro.mall.mapper.PmsProductLadderMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.mapper.PmsSkuStockMapper;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.service.impl.PmsProductServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductServiceImpl_SSTest extends PmsProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[31, 72, 73, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 93, 94, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 117, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 180, 181, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 198, 199, 200, 201, 204, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 224, 225, 227, 228, 230, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 284, 285, 286, 287, 288, 293, 294, 295, 296, 297, 298, 300, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325]

  @Test(timeout = 4000)
  public void test_create_00()  throws Throwable  {
      //caseID:35337abca3f813b840d1acf13a4f0dac
      //CoveredLines: [31, 72, 73, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 93, 94, 98, 312]
      //Input_0_PmsProductParam: {}
      //Assert: assertEquals(1, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = pmsProductServiceImpl0.create(pmsProductParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_getUpdateInfo_01()  throws Throwable  {
      //caseID:5eb9649e87b69fe54fab92774ea149df
      //CoveredLines: [31, 117]
      //Input_0_Long: (-1L)
      //Assert: assertNull(method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductDao0
      PmsProductDao pmsProductDao0 = mock(PmsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productDao", (Object) pmsProductDao0);
      Long long0 = new Long((-1L));
      
      //Call method: getUpdateInfo
      PmsProductResult pmsProductResult0 = pmsProductServiceImpl0.getUpdateInfo(long0);
      
      //Test Result Assert
      assertNull(pmsProductResult0);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_02()  throws Throwable  {
      //caseID:9c1ae120984db5a9bf49a46b049b48a8
      //CoveredLines: [31, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 191, 198, 199, 200, 201, 204]
      //Input_0_Long: 72L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=stack0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      LinkedList<PmsSkuStock> linkedList0 = new LinkedList<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      Long long0 = new Long(72L);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock0).getId();
      
      stack0.add(pmsSkuStock0);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_03()  throws Throwable  {
      //caseID:dee443d205697bfbbfee52b5315e879f
      //CoveredLines: [31, 98, 99, 100, 101, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 188, 191, 198, 199, 200, 201, 204, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325]
      //Input_0_Long: 1877L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=stack0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsSkuStockDao0
      PmsSkuStockDao pmsSkuStockDao0 = mock(PmsSkuStockDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1536).when(pmsSkuStockDao0).insertList(ArgumentMatchers.<com.macro.mall.model.PmsSkuStock>anyList());
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null, (Long) null, (Long) null).when(pmsSkuStock0).getId();
      doReturn("&}QS999@WG9; {[J@4").when(pmsSkuStock0).getSkuCode();
      
      stack0.add(pmsSkuStock0);
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      doReturn(0).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockDao", (Object) pmsSkuStockDao0);
      Long long0 = new Long(1877L);
      //mock pmsSkuStock1
      PmsSkuStock pmsSkuStock1 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, (Long) null, (Long) null).when(pmsSkuStock1).getId();
      doReturn("test").when(pmsSkuStock1).getSkuCode();
      
      stack0.add(pmsSkuStock1);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_04()  throws Throwable  {
      //caseID:dfa413cfcc779adabde48d60fc17c2fa
      //CoveredLines: [31, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 198, 204, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325]
      //Input_0_Long: 1384L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=stack0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsSkuStockDao0
      PmsSkuStockDao pmsSkuStockDao0 = mock(PmsSkuStockDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      doReturn((-2146690313)).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockDao", (Object) pmsSkuStockDao0);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(pmsSkuStock0);
      Long long0 = new Long(1384L);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_list_05()  throws Throwable  {
      //caseID:294ff66b31f456df4da503a9b24f14f2
      //CoveredLines: [31, 293, 294, 295, 296, 300]
      //Input_0_String: 
      //Assert: assertNull(method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list("");
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:34fce0afb198fc6cdb78f0201e92aef9
      //CoveredLines: [31, 293, 294, 295, 296, 297, 298, 300]
      //Input_0_String: 1
      //Assert: assertNull(method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list("1");
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_07()  throws Throwable  {
      //caseID:297e639b8a10611c2d0718806b601cf9
      //CoveredLines: [31, 208, 209, 210, 211, 212, 215, 218, 221, 224, 227, 230]
      //Input_0_PmsProductQueryParam: {}
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertNull(method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_08()  throws Throwable  {
      //caseID:eb5dc91584f39e9d774258d614c31bf4
      //CoveredLines: [31, 208, 209, 210, 211, 212, 215, 218, 219, 221, 222, 224, 227, 228, 230]
      //Input_0_PmsProductQueryParam: {getVerifyStatus=(Integer) null, getKeyword=\";C`*jl$$<b^=wK=#fv\", getPublishStatus=(Integer) null, getProductCategoryId=(-1246L), getBrandId=(Long) null, getProductSn=\"reactor.core.publisher.FluxRepeatWhen$RepeatWhenMainSubscriber\"}
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertEquals(0, method_result.size());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      LinkedList<PmsProduct> linkedList0 = new LinkedList<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long((-1246L));
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(pmsProductQueryParam0).getBrandId();
      doReturn(";C`*jl$$<b^=wK=#fv").when(pmsProductQueryParam0).getKeyword();
      doReturn(long0).when(pmsProductQueryParam0).getProductCategoryId();
      doReturn("reactor.core.publisher.FluxRepeatWhen$RepeatWhenMainSubscriber").when(pmsProductQueryParam0).getProductSn();
      doReturn((Integer) null).when(pmsProductQueryParam0).getPublishStatus();
      doReturn((Integer) null).when(pmsProductQueryParam0).getVerifyStatus();
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_09()  throws Throwable  {
      //caseID:0d5e50e8a0a96ea4d231bd088cd8aee0
      //CoveredLines: [31, 208, 209, 210, 211, 212, 215, 218, 219, 221, 222, 224, 225, 227, 230]
      //Input_0_PmsProductQueryParam: {getVerifyStatus=(Integer) null, getKeyword=\"test\", getPublishStatus=(Integer) null, getProductCategoryId=(Long) null, getBrandId=0L, getProductSn=\"setId\"}
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(0L);
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProductQueryParam0).getBrandId();
      doReturn("test").when(pmsProductQueryParam0).getKeyword();
      doReturn((Long) null).when(pmsProductQueryParam0).getProductCategoryId();
      doReturn("setId").when(pmsProductQueryParam0).getProductSn();
      doReturn((Integer) null).when(pmsProductQueryParam0).getPublishStatus();
      doReturn((Integer) null).when(pmsProductQueryParam0).getVerifyStatus();
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_10()  throws Throwable  {
      //caseID:134e9d0bfb089ee2f0cd47d50155b5ee
      //CoveredLines: [31, 208, 209, 210, 211, 212, 213, 215, 218, 219, 221, 222, 224, 227, 230]
      //Input_0_PmsProductQueryParam: {getVerifyStatus=(Integer) null, getKeyword=\"1\", getPublishStatus=(-1), getProductCategoryId=(Long) null, getBrandId=(Long) null, getProductSn=\"0\"}
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Integer integer0 = new Integer((-1));
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(pmsProductQueryParam0).getBrandId();
      doReturn("1").when(pmsProductQueryParam0).getKeyword();
      doReturn((Long) null).when(pmsProductQueryParam0).getProductCategoryId();
      doReturn("0").when(pmsProductQueryParam0).getProductSn();
      doReturn(integer0).when(pmsProductQueryParam0).getPublishStatus();
      doReturn((Integer) null).when(pmsProductQueryParam0).getVerifyStatus();
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_11()  throws Throwable  {
      //caseID:0e305ff248e276347249f23d0700081f
      //CoveredLines: [31, 208, 209, 210, 211, 212, 215, 216, 218, 219, 221, 222, 224, 227, 230]
      //Input_0_PmsProductQueryParam: {getVerifyStatus=(-1), getKeyword=\"-2145963841\", getPublishStatus=(Integer) null, getProductCategoryId=(Long) null, getBrandId=(Long) null, getProductSn=\"-2144573776\"}
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Assert: assertEquals(0, method_result.size());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      ArrayList<PmsProduct> arrayList0 = new ArrayList<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Integer integer0 = new Integer((-1));
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(pmsProductQueryParam0).getBrandId();
      doReturn("-2145963841").when(pmsProductQueryParam0).getKeyword();
      doReturn((Long) null).when(pmsProductQueryParam0).getProductCategoryId();
      doReturn("-2144573776").when(pmsProductQueryParam0).getProductSn();
      doReturn((Integer) null).when(pmsProductQueryParam0).getPublishStatus();
      doReturn(integer0).when(pmsProductQueryParam0).getVerifyStatus();
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_relateAndInsertList_12()  throws Throwable  {
      //caseID:0dee27f60574c9ce8d44791930dcc0bf
      //CoveredLines: [31, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323]
      //Input_0_Object: pmsProductServiceImpl0
      //Input_1_List: vector0
      //Input_2_Long: 811L
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Vector<Object> vector0 = new Vector<Object>();
      PmsSkuStock pmsSkuStock0 = new PmsSkuStock();
      
      vector0.add((Object) pmsSkuStock0);
      Long long0 = new Long(811L);
      
      //Call method: relateAndInsertList
      try { 
        PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "relateAndInsertList", (Object) pmsProductServiceImpl0, (Class<?>) Object.class, (Object) vector0, (Class<?>) List.class, (Object) long0, (Class<?>) Long.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.PmsProductServiceImpl", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockRuntimeException", e.getClass().getName());
         assertEquals("com.macro.mall.service.impl.PmsProductServiceImpl.insertList(java.util.List)", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_update_13()  throws Throwable  {
      //caseID:12a22ea62583d6c707844a5b4da352e2
      //CoveredLines: [31, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 165, 167, 168, 169, 170, 171, 312]
      //Input_0_Long: 4908L
      //Input_1_PmsProductParam: {}
      //Assert: assertEquals(1, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock cmsPrefrenceAreaProductRelationMapper0
      CmsPrefrenceAreaProductRelationMapper cmsPrefrenceAreaProductRelationMapper0 = mock(CmsPrefrenceAreaProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock cmsSubjectProductRelationMapper0
      CmsSubjectProductRelationMapper cmsSubjectProductRelationMapper0 = mock(CmsSubjectProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsMemberPriceMapper0
      PmsMemberPriceMapper pmsMemberPriceMapper0 = mock(PmsMemberPriceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductAttributeValueMapper0
      PmsProductAttributeValueMapper pmsProductAttributeValueMapper0 = mock(PmsProductAttributeValueMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductFullReductionMapper0
      PmsProductFullReductionMapper pmsProductFullReductionMapper0 = mock(PmsProductFullReductionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductLadderMapper0
      PmsProductLadderMapper pmsProductLadderMapper0 = mock(PmsProductLadderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productLadderMapper", (Object) pmsProductLadderMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productFullReductionMapper", (Object) pmsProductFullReductionMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productAttributeValueMapper", (Object) pmsProductAttributeValueMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "memberPriceMapper", (Object) pmsMemberPriceMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "subjectProductRelationMapper", (Object) cmsSubjectProductRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "prefrenceAreaProductRelationMapper", (Object) cmsPrefrenceAreaProductRelationMapper0);
      Long long0 = new Long(4908L);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = pmsProductServiceImpl0.update(long0, pmsProductParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateDeleteStatus_14()  throws Throwable  {
      //caseID:710da45b0155e632ab8e1392f5f76651
      //CoveredLines: [31, 284, 285, 286, 287, 288]
      //Input_0_List<Long>: arrayList0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateDeleteStatus
      int int0 = pmsProductServiceImpl0.updateDeleteStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateNewStatus_15()  throws Throwable  {
      //caseID:6699683653aae3cd02f6faef70535c75
      //CoveredLines: [31, 275, 276, 277, 278, 279]
      //Input_0_List<Long>: vector0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateNewStatus
      int int0 = pmsProductServiceImpl0.updateNewStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updatePublishStatus_16()  throws Throwable  {
      //caseID:d6577cb64c468106055c80fc75fb6613
      //CoveredLines: [31, 257, 258, 259, 260, 261]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: (-1)
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updatePublishStatus
      int int0 = pmsProductServiceImpl0.updatePublishStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_17()  throws Throwable  {
      //caseID:100796ac42d359a5ace3977423484aa2
      //CoveredLines: [31, 266, 267, 268, 269, 270]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateRecommendStatus
      int int0 = pmsProductServiceImpl0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateVerifyStatus_18()  throws Throwable  {
      //caseID:795d13bfae276f759036448cc1c88ece
      //CoveredLines: [31, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252]
      //Input_0_List<Long>: arrayList0
      //Input_1_Integer: 1
      //Input_2_String: %04d
      //Assert: assertEquals(1, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductVertifyRecordDao0
      PmsProductVertifyRecordDao pmsProductVertifyRecordDao0 = mock(PmsProductVertifyRecordDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(pmsProductVertifyRecordDao0).insertList(ArgumentMatchers.<com.macro.mall.model.PmsProductVertifyRecord>anyList());
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(pmsProductMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsProduct.class) , any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productVertifyRecordDao", (Object) pmsProductVertifyRecordDao0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(1);
      Long long0 = new Long(1);
      
      arrayList0.add(long0);
      
      //Call method: updateVerifyStatus
      int int0 = pmsProductServiceImpl0.updateVerifyStatus(arrayList0, integer0, "%04d");
      
      //Test Result Assert
      assertEquals(1, int0);
  }
}
