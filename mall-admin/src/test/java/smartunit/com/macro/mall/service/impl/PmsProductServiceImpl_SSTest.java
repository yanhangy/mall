/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.dao.PmsProductDao;
import com.macro.mall.dao.PmsProductVertifyRecordDao;
import com.macro.mall.dao.PmsSkuStockDao;
import com.macro.mall.dto.PmsProductParam;
import com.macro.mall.dto.PmsProductQueryParam;
import com.macro.mall.dto.PmsProductResult;
import com.macro.mall.mapper.CmsPrefrenceAreaProductRelationMapper;
import com.macro.mall.mapper.CmsSubjectProductRelationMapper;
import com.macro.mall.mapper.PmsMemberPriceMapper;
import com.macro.mall.mapper.PmsProductAttributeValueMapper;
import com.macro.mall.mapper.PmsProductFullReductionMapper;
import com.macro.mall.mapper.PmsProductLadderMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.mapper.PmsSkuStockMapper;
import com.macro.mall.model.PmsProduct;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.service.impl.PmsProductServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductServiceImpl_SSTest extends PmsProductServiceImpl_SSTest_scaffolding {
// allCoveredLines:[31, 72, 73, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 93, 94, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 117, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 180, 181, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 198, 199, 200, 201, 204, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 224, 225, 227, 228, 230, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 284, 285, 286, 287, 288, 293, 294, 295, 296, 297, 298, 300, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325]

  @Test(timeout = 4000)
  public void test_create_00()  throws Throwable  {
      //caseID:f0bbef31a38648cb2a94a1a4c06b3fcf
      //CoveredLines: [31, 72, 73, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 93, 94, 98, 312]
      //Input_0_PmsProductParam: {}
      //Assert: assertEquals(1, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = pmsProductServiceImpl0.create(pmsProductParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_getUpdateInfo_01()  throws Throwable  {
      //caseID:47357cc904cbf4ce433f3164125da023
      //CoveredLines: [31, 117]
      //Input_0_Long: 1038L
      //Assert: assertNull(method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductDao0
      PmsProductDao pmsProductDao0 = mock(PmsProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productDao", (Object) pmsProductDao0);
      Long long0 = new Long(1038L);
      
      //Call method: getUpdateInfo
      PmsProductResult pmsProductResult0 = pmsProductServiceImpl0.getUpdateInfo(long0);
      
      //Test Result Assert
      assertNull(pmsProductResult0);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_02()  throws Throwable  {
      //caseID:9049ed489e5876b29e6244905e523cf3
      //CoveredLines: [31, 98, 99, 100, 101, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 191, 198, 199, 200, 201, 204]
      //Input_0_Long: 1004L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=arrayList0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      doReturn((-1)).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      Long long0 = new Long(1004L);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(pmsSkuStock0).getId();
      doReturn("setProductId").when(pmsSkuStock0).getSkuCode();
      
      arrayList0.add(pmsSkuStock0);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_03()  throws Throwable  {
      //caseID:008bfadccaa27aee2c3b89276abb7870
      //CoveredLines: [31, 98, 99, 100, 101, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 191, 192, 193, 194, 195, 198, 199, 200, 201, 204]
      //Input_0_Long: 1004L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=arrayList0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-2134468593)).when(pmsSkuStockMapper0).deleteByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      doReturn(arrayList0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      doReturn((-1)).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      Long long0 = new Long(1004L);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, (Long) null, long0).when(pmsSkuStock0).getId();
      doReturn("setProductId").when(pmsSkuStock0).getSkuCode();
      
      arrayList0.add(pmsSkuStock0);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_04()  throws Throwable  {
      //caseID:977d0253e00831ab5ad04f3e2859ab0a
      //CoveredLines: [31, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 191, 198, 199, 200, 201, 204]
      //Input_0_Long: 1004L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=stack0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      Long long0 = new Long(1004L);
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock0).getId();
      
      stack0.add(pmsSkuStock0);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_05()  throws Throwable  {
      //caseID:a40551907946d34135520e8e0f023854
      //CoveredLines: [31, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 198, 204, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325]
      //Input_0_Long: 1004L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=arrayList0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsSkuStockDao0
      PmsSkuStockDao pmsSkuStockDao0 = mock(PmsSkuStockDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      doReturn((-1)).when(pmsSkuStockMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsSkuStock.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockDao", (Object) pmsSkuStockDao0);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(pmsSkuStock0);
      Long long0 = new Long(1004L);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_handleUpdateSkuStockList_06()  throws Throwable  {
      //caseID:78a2b1fb0c85dc8106cdbf7b3dc624bc
      //CoveredLines: [31, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 165, 167, 174, 175, 176, 178, 178, 180, 180, 181, 183, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 198, 199, 200, 201, 204, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325]
      //Input_0_Long: 0L
      //Input_1_com.macro.mall.dto.PmsProductParam: {getSkuStockList=stack0}
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsSkuStockDao0
      PmsSkuStockDao pmsSkuStockDao0 = mock(PmsSkuStockDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Stack<PmsSkuStock> stack0 = new Stack<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(pmsSkuStock0);
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsSkuStockMapper0).selectByExample(any(com.macro.mall.model.PmsSkuStockExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockDao", (Object) pmsSkuStockDao0);
      Long long0 = new Long(0L);
      //mock pmsSkuStock1
      PmsSkuStock pmsSkuStock1 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null, long0).when(pmsSkuStock1).getId();
      
      stack0.add(pmsSkuStock1);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductParam0).getSkuStockList();
      
      //Call method: handleUpdateSkuStockList
      PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "handleUpdateSkuStockList", (Object) long0, (Class<?>) Long.class, (Object) pmsProductParam0, (Class<?>) PmsProductParam.class);
  }

  @Test(timeout = 4000)
  public void test_list_07()  throws Throwable  {
      //caseID:5ccaf5f66304318ea1ca1be66e5cb62c
      //CoveredLines: [31, 293, 294, 295, 296, 300]
      //Input_0_String: 
      //Assert: assertEquals(0, method_result.size());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Stack<PmsProduct> stack0 = new Stack<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list("");
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_08()  throws Throwable  {
      //caseID:24f1701f6935bdb62c424efb5cb6ffad
      //CoveredLines: [31, 293, 294, 295, 296, 297, 298, 300]
      //Input_0_String: !Ag[{[T
      //Assert: assertNull(method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list("!Ag[{[T");
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_09()  throws Throwable  {
      //caseID:f4b6bb193e74a2b3b9b317a7006c8ae6
      //CoveredLines: [31, 208, 209, 210, 211, 212, 213, 215, 218, 221, 224, 227, 230]
      //Input_0_PmsProductQueryParam: {getPublishStatus=2425 2425}
      //Input_1_Integer: 2425
      //Input_2_Integer: 2425
      //Assert: assertNull(method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Integer integer0 = new Integer(2425);
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(pmsProductQueryParam0).getPublishStatus();
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_10()  throws Throwable  {
      //caseID:c73a6fe4d75652a0ffba2094da390d9f
      //CoveredLines: [31, 208, 209, 210, 211, 212, 215, 218, 219, 221, 222, 224, 227, 228, 230]
      //Input_0_PmsProductQueryParam: {getVerifyStatus=(Integer) null, getKeyword=\"com.google.common.collect.MultimapBuilder$TreeSetSupplier\", getPublishStatus=(Integer) null, getProductCategoryId=1878L, getBrandId=(Long) null, getProductSn=\"~87:<V1[22 4up%`VJ\"}
      //Input_1_Integer: 960
      //Input_2_Integer: 960
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(1878L);
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(pmsProductQueryParam0).getBrandId();
      doReturn("com.google.common.collect.MultimapBuilder$TreeSetSupplier").when(pmsProductQueryParam0).getKeyword();
      doReturn(long0).when(pmsProductQueryParam0).getProductCategoryId();
      doReturn("~87:<V1[22 4up%`VJ").when(pmsProductQueryParam0).getProductSn();
      doReturn((Integer) null).when(pmsProductQueryParam0).getPublishStatus();
      doReturn((Integer) null).when(pmsProductQueryParam0).getVerifyStatus();
      Integer integer0 = new Integer(960);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_11()  throws Throwable  {
      //caseID:39b42720d743b3f7d592ffbdb2357a8f
      //CoveredLines: [31, 208, 209, 210, 211, 212, 215, 218, 219, 221, 222, 224, 225, 227, 230]
      //Input_0_PmsProductQueryParam: {getVerifyStatus=(Integer) null, getKeyword=\"Am^m8MCL4f6V?;gA7y\", getPublishStatus=(Integer) null, getProductCategoryId=(Long) null, getBrandId=106L, getProductSn=\"insertList\"}
      //Input_1_Integer: 960
      //Input_2_Integer: 960
      //Assert: assertTrue(method_result.isEmpty());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      ArrayList<PmsProduct> arrayList0 = new ArrayList<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Long long0 = new Long(106L);
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProductQueryParam0).getBrandId();
      doReturn("Am^m8MCL4f6V?;gA7y").when(pmsProductQueryParam0).getKeyword();
      doReturn((Long) null).when(pmsProductQueryParam0).getProductCategoryId();
      doReturn("insertList").when(pmsProductQueryParam0).getProductSn();
      doReturn((Integer) null).when(pmsProductQueryParam0).getPublishStatus();
      doReturn((Integer) null).when(pmsProductQueryParam0).getVerifyStatus();
      Integer integer0 = new Integer(960);
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_12()  throws Throwable  {
      //caseID:d47be2aaae688f5029ded248cbc5c265
      //CoveredLines: [31, 208, 209, 210, 211, 212, 215, 216, 218, 219, 221, 222, 224, 227, 230]
      //Input_0_PmsProductQueryParam: {getVerifyStatus=(-2147483644), getKeyword=\"-2144389289\", getPublishStatus=(Integer) null, getProductCategoryId=(Long) null, getBrandId=(Long) null, getProductSn=\"setId\"}
      //Input_1_Integer: (-2147483644)
      //Input_2_Integer: (-2147483644)
      //Assert: assertEquals(0, method_result.size());
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Vector<PmsProduct> vector0 = new Vector<PmsProduct>();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductMapper0).selectByExample(any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Integer integer0 = new Integer((-2147483644));
      //mock pmsProductQueryParam0
      PmsProductQueryParam pmsProductQueryParam0 = mock(PmsProductQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(pmsProductQueryParam0).getBrandId();
      doReturn("-2144389289").when(pmsProductQueryParam0).getKeyword();
      doReturn((Long) null).when(pmsProductQueryParam0).getProductCategoryId();
      doReturn("setId").when(pmsProductQueryParam0).getProductSn();
      doReturn((Integer) null).when(pmsProductQueryParam0).getPublishStatus();
      doReturn(integer0).when(pmsProductQueryParam0).getVerifyStatus();
      
      //Call method: list
      List<PmsProduct> list0 = pmsProductServiceImpl0.list(pmsProductQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_relateAndInsertList_13()  throws Throwable  {
      //caseID:1c8e370a3f002f64d6fca97c09e06e87
      //CoveredLines: [31, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323]
      //Input_0_Object: pmsProductServiceImpl0
      //Input_1_List: vector0
      //Input_2_Long: (-1L)
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(pmsSkuStock0);
      Long long0 = new Long((-1L));
      
      //Call method: relateAndInsertList
      try { 
        PrivateAccess.callMethod((Class<PmsProductServiceImpl>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "relateAndInsertList", (Object) pmsProductServiceImpl0, (Class<?>) Object.class, (Object) vector0, (Class<?>) List.class, (Object) long0, (Class<?>) Long.class);
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.PmsProductServiceImpl", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockRuntimeException", e.getClass().getName());
         assertEquals("com.macro.mall.service.impl.PmsProductServiceImpl.insertList(java.util.List)", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_update_14()  throws Throwable  {
      //caseID:c6915c1d22a6741e8d94f8a4147c8daf
      //CoveredLines: [31, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 165, 167, 168, 169, 170, 171, 312]
      //Input_0_Long: 0L
      //Input_1_PmsProductParam: {}
      //Assert: assertEquals(1, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock cmsPrefrenceAreaProductRelationMapper0
      CmsPrefrenceAreaProductRelationMapper cmsPrefrenceAreaProductRelationMapper0 = mock(CmsPrefrenceAreaProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock cmsSubjectProductRelationMapper0
      CmsSubjectProductRelationMapper cmsSubjectProductRelationMapper0 = mock(CmsSubjectProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsMemberPriceMapper0
      PmsMemberPriceMapper pmsMemberPriceMapper0 = mock(PmsMemberPriceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductAttributeValueMapper0
      PmsProductAttributeValueMapper pmsProductAttributeValueMapper0 = mock(PmsProductAttributeValueMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductFullReductionMapper0
      PmsProductFullReductionMapper pmsProductFullReductionMapper0 = mock(PmsProductFullReductionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductLadderMapper0
      PmsProductLadderMapper pmsProductLadderMapper0 = mock(PmsProductLadderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productLadderMapper", (Object) pmsProductLadderMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productFullReductionMapper", (Object) pmsProductFullReductionMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productAttributeValueMapper", (Object) pmsProductAttributeValueMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "memberPriceMapper", (Object) pmsMemberPriceMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "subjectProductRelationMapper", (Object) cmsSubjectProductRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "prefrenceAreaProductRelationMapper", (Object) cmsPrefrenceAreaProductRelationMapper0);
      Long long0 = new Long(0L);
      //mock pmsProductParam0
      PmsProductParam pmsProductParam0 = mock(PmsProductParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = pmsProductServiceImpl0.update(long0, pmsProductParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateDeleteStatus_15()  throws Throwable  {
      //caseID:6c8692575942e8cd634409881615c02f
      //CoveredLines: [31, 284, 285, 286, 287, 288]
      //Input_0_List<Long>: vector0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateDeleteStatus
      int int0 = pmsProductServiceImpl0.updateDeleteStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateNewStatus_16()  throws Throwable  {
      //caseID:16cd7285a028b4ac90f8241d6c1a8f44
      //CoveredLines: [31, 275, 276, 277, 278, 279]
      //Input_0_List<Long>: arrayList0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateNewStatus
      int int0 = pmsProductServiceImpl0.updateNewStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updatePublishStatus_17()  throws Throwable  {
      //caseID:ddbd086e686156619969dfeae0f90374
      //CoveredLines: [31, 257, 258, 259, 260, 261]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updatePublishStatus
      int int0 = pmsProductServiceImpl0.updatePublishStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_18()  throws Throwable  {
      //caseID:d990931c5e6de58097094b5f70d318f0
      //CoveredLines: [31, 266, 267, 268, 269, 270]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateRecommendStatus
      int int0 = pmsProductServiceImpl0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateVerifyStatus_19()  throws Throwable  {
      //caseID:edac8600a5f4032c8725d1c6e3fea86a
      //CoveredLines: [31, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252]
      //Input_0_List<Long>: vector0
      //Input_1_Integer: 6
      //Input_2_String: insertList
      //Assert: assertEquals(0, method_result);
      
      PmsProductServiceImpl pmsProductServiceImpl0 = new PmsProductServiceImpl();
      //mock pmsProductVertifyRecordDao0
      PmsProductVertifyRecordDao pmsProductVertifyRecordDao0 = mock(PmsProductVertifyRecordDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductServiceImpl.class, pmsProductServiceImpl0, "productVertifyRecordDao", (Object) pmsProductVertifyRecordDao0);
      Vector<Long> vector0 = new Vector<Long>();
      Long long0 = new Long((-1L));
      
      vector0.add(long0);
      Integer integer0 = new Integer(6);
      
      //Call method: updateVerifyStatus
      int int0 = pmsProductServiceImpl0.updateVerifyStatus(vector0, integer0, "insertList");
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
