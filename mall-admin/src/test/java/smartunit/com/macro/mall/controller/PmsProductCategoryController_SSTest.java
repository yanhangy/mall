/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.PmsProductCategoryController;
import com.macro.mall.dto.PmsProductCategoryParam;
import com.macro.mall.dto.PmsProductCategoryWithChildrenItem;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.service.PmsProductCategoryService;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductCategoryController_SSTest extends PmsProductCategoryController_SSTest_scaffolding {
// allCoveredLines:[25, 33, 34, 35, 37, 47, 48, 49, 51, 61, 62, 69, 70, 77, 78, 79, 81, 89, 90, 91, 93, 101, 102, 103, 105, 113, 114]

  @Test(timeout = 4000)
  public void test_create_00()  throws Throwable  {
      //caseID:98925087781880fb2991341bb5fa6c74
      //CoveredLines: [25, 33, 34, 35]
      //Input_0_PmsProductCategoryParam: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(302).when(pmsProductCategoryService0).create(any(com.macro.mall.dto.PmsProductCategoryParam.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = pmsProductCategoryController0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_01()  throws Throwable  {
      //caseID:e3f9f0df39129ba4fc72e97f960498e9
      //CoveredLines: [25, 33, 34, 37]
      //Input_0_PmsProductCategoryParam: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = pmsProductCategoryController0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_02()  throws Throwable  {
      //caseID:03b4b9277ed593ee03fa8f199b8f93d4
      //CoveredLines: [25, 77, 78, 79]
      //Input_0_Long: 9
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(9).when(pmsProductCategoryService0).delete(anyLong());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(9);
      
      //Call method: delete
      CommonResult commonResult0 = pmsProductCategoryController0.delete(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_03()  throws Throwable  {
      //caseID:10b5281126d16f983a5fb9b1ac35fe11
      //CoveredLines: [25, 77, 78, 81]
      //Input_0_Long: 4889L
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(4889L);
      
      //Call method: delete
      CommonResult commonResult0 = pmsProductCategoryController0.delete(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getItem_04()  throws Throwable  {
      //caseID:b43938f3796f50eace2281b16abecd80
      //CoveredLines: [25, 69, 70]
      //Input_0_Long: 1133L
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(1133L);
      
      //Call method: getItem
      CommonResult<PmsProductCategory> commonResult0 = pmsProductCategoryController0.getItem(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getList_05()  throws Throwable  {
      //caseID:64932a522591ef4ee191b235bda0e272
      //CoveredLines: [25, 61, 62]
      //Input_0_Long: 0L
      //Input_1_Integer: 956
      //Input_2_Integer: 956
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      Vector<PmsProductCategory> vector0 = new Vector<PmsProductCategory>();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductCategoryService0).getList(anyLong() , anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(956);
      
      //Call method: getList
      CommonResult<CommonPage<PmsProductCategory>> commonResult0 = pmsProductCategoryController0.getList(long0, integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_listWithChildren_06()  throws Throwable  {
      //caseID:9cd4c39708c2d8db9bde71f1c6d8324c
      //CoveredLines: [25, 113, 114]
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      
      //Call method: listWithChildren
      CommonResult<List<PmsProductCategoryWithChildrenItem>> commonResult0 = pmsProductCategoryController0.listWithChildren();
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_07()  throws Throwable  {
      //caseID:f423f849f70371de51aba387eb387710
      //CoveredLines: [25, 47, 48, 49]
      //Input_0_Long: 10
      //Input_1_PmsProductCategoryParam: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(10).when(pmsProductCategoryService0).update(anyLong() , any(com.macro.mall.dto.PmsProductCategoryParam.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(10);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = pmsProductCategoryController0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_08()  throws Throwable  {
      //caseID:5ca157bed35d616e9e28ff8bf62a34e1
      //CoveredLines: [25, 47, 48, 51]
      //Input_0_Long: (-2775L)
      //Input_1_PmsProductCategoryParam: {}
      //Assert: assertEquals(500L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long((-2775L));
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = pmsProductCategoryController0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateNavStatus_09()  throws Throwable  {
      //caseID:c8b66377c155ed34aa86ad853b58ffd4
      //CoveredLines: [25, 89, 90, 91]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: 70
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(70).when(pmsProductCategoryService0).updateNavStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer(70);
      
      //Call method: updateNavStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateNavStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateNavStatus_10()  throws Throwable  {
      //caseID:1d5d1ff77d6935ccd26fd18abcfb63e4
      //CoveredLines: [25, 89, 90, 93]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: (-1)
      //Assert: assertEquals(500L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsProductCategoryService0).updateNavStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updateNavStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateNavStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_11()  throws Throwable  {
      //caseID:6cc3731cd433bbda8f57ae07d5a80ba2
      //CoveredLines: [25, 101, 102, 103]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: 393241
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(393241).when(pmsProductCategoryService0).updateShowStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer(393241);
      
      //Call method: updateShowStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateShowStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_12()  throws Throwable  {
      //caseID:0cf50b272c3031745e6099cfa315457e
      //CoveredLines: [25, 101, 102, 105]
      //Input_0_List<Long>: linkedList0
      //Input_1_Integer: 262144
      //Assert: assertEquals(500L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(pmsProductCategoryService0).updateShowStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Integer integer0 = new Integer(262144);
      
      //Call method: updateShowStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateShowStatus(linkedList0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }
}
