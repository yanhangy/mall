/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.PmsProductCategoryController;
import com.macro.mall.dto.PmsProductCategoryParam;
import com.macro.mall.dto.PmsProductCategoryWithChildrenItem;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.service.PmsProductCategoryService;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductCategoryController_SSTest extends PmsProductCategoryController_SSTest_scaffolding {
// allCoveredLines:[25, 33, 34, 35, 37, 47, 48, 49, 51, 61, 62, 69, 70, 77, 78, 79, 81, 89, 90, 91, 93, 101, 102, 103, 105, 113, 114]

  @Test(timeout = 4000)
  public void test_create_00()  throws Throwable  {
      //caseID:64e7d9606be3cf162b8a8b26b0af5b1e
      //CoveredLines: [25, 33, 34, 35]
      //Input_0_PmsProductCategoryParam: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(pmsProductCategoryService0).create(any(com.macro.mall.dto.PmsProductCategoryParam.class));
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = pmsProductCategoryController0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_01()  throws Throwable  {
      //caseID:84c83ba5d9b258f8b10f6f52093ed8ca
      //CoveredLines: [25, 33, 34, 37]
      //Input_0_PmsProductCategoryParam: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = pmsProductCategoryController0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_02()  throws Throwable  {
      //caseID:55d2dee162a6a764f41c939c36537663
      //CoveredLines: [25, 77, 78, 79]
      //Input_0_Long: 3
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3).when(pmsProductCategoryService0).delete(anyLong());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(3);
      
      //Call method: delete
      CommonResult commonResult0 = pmsProductCategoryController0.delete(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_03()  throws Throwable  {
      //caseID:e4d733d106e26a02b522deae96c5813a
      //CoveredLines: [25, 77, 78, 81]
      //Input_0_Long: 4036L
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(4036L);
      
      //Call method: delete
      CommonResult commonResult0 = pmsProductCategoryController0.delete(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getItem_04()  throws Throwable  {
      //caseID:aef3d10682f51d3579c4b1432cb23d56
      //CoveredLines: [25, 69, 70]
      //Input_0_Long: 2097L
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(2097L);
      
      //Call method: getItem
      CommonResult<PmsProductCategory> commonResult0 = pmsProductCategoryController0.getItem(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getList_05()  throws Throwable  {
      //caseID:0a4aaec9c9bd26009887a850aa139eab
      //CoveredLines: [25, 61, 62]
      //Input_0_Long: 0L
      //Input_1_Integer: 410
      //Input_2_Integer: 410
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      Vector<PmsProductCategory> vector0 = new Vector<PmsProductCategory>();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(pmsProductCategoryService0).getList(anyLong() , anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(410);
      
      //Call method: getList
      CommonResult<CommonPage<PmsProductCategory>> commonResult0 = pmsProductCategoryController0.getList(long0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_listWithChildren_06()  throws Throwable  {
      //caseID:daa7a84bfbef9225e0072e38f63ed285
      //CoveredLines: [25, 113, 114]
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      
      //Call method: listWithChildren
      CommonResult<List<PmsProductCategoryWithChildrenItem>> commonResult0 = pmsProductCategoryController0.listWithChildren();
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_update_07()  throws Throwable  {
      //caseID:a4ab3748677997c00f2afd66bd638e40
      //CoveredLines: [25, 47, 48, 49]
      //Input_0_Long: 1
      //Input_1_PmsProductCategoryParam: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(pmsProductCategoryService0).update(anyLong() , any(com.macro.mall.dto.PmsProductCategoryParam.class));
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(1);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = pmsProductCategoryController0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_08()  throws Throwable  {
      //caseID:6f3636a942e377519b9650a888a6d0fb
      //CoveredLines: [25, 47, 48, 51]
      //Input_0_Long: 0L
      //Input_1_PmsProductCategoryParam: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Long long0 = new Long(0L);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = pmsProductCategoryController0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateNavStatus_09()  throws Throwable  {
      //caseID:f2c6a6ff9b46b5d3753ae9af7a806c60
      //CoveredLines: [25, 89, 90, 91]
      //Input_0_Long>: arrayList0
      //Input_1_Integer: 5
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(5).when(pmsProductCategoryService0).updateNavStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(5);
      
      //Call method: updateNavStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateNavStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateNavStatus_10()  throws Throwable  {
      //caseID:cd64ae0196bd9cc0b22efd9642218f86
      //CoveredLines: [25, 89, 90, 93]
      //Input_0_Long>: arrayList0
      //Input_1_Integer: (-2963)
      //Assert: assertEquals(500L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-2963)).when(pmsProductCategoryService0).updateNavStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer((-2963));
      
      //Call method: updateNavStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateNavStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_11()  throws Throwable  {
      //caseID:fb7765a00b5056c70244b55952df8a33
      //CoveredLines: [25, 101, 102, 105]
      //Input_0_Long>: stack0
      //Input_1_Integer: 0
      //Assert: assertEquals(500L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(pmsProductCategoryService0).updateShowStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateShowStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateShowStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_12()  throws Throwable  {
      //caseID:0d65de8d8b0545afa89136218efca4b6
      //CoveredLines: [25, 101, 102, 103]
      //Input_0_Long>: vector0
      //Input_1_Integer: 255
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductCategoryController pmsProductCategoryController0 = new PmsProductCategoryController();
      //mock pmsProductCategoryService0
      PmsProductCategoryService pmsProductCategoryService0 = mock(PmsProductCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(46).when(pmsProductCategoryService0).updateShowStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryController.class, pmsProductCategoryController0, "productCategoryService", (Object) pmsProductCategoryService0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer(255);
      
      //Call method: updateShowStatus
      CommonResult commonResult0 = pmsProductCategoryController0.updateShowStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }
}
