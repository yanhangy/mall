/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.dao.UmsAdminRoleRelationDao;
import com.macro.mall.dto.UmsAdminParam;
import com.macro.mall.dto.UpdateAdminPasswordParam;
import com.macro.mall.mapper.UmsAdminMapper;
import com.macro.mall.mapper.UmsAdminRoleRelationMapper;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import com.macro.mall.model.UmsRole;
import com.macro.mall.security.util.JwtTokenUtil;
import com.macro.mall.service.UmsAdminCacheService;
import com.macro.mall.service.impl.UmsAdminServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminServiceImpl_SSTest extends UmsAdminServiceImpl_SSTest_scaffolding {
// allCoveredLines:[45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 99, 102, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 117, 125, 126, 127, 128, 129, 130, 131, 140, 141, 142, 143, 144, 145, 149, 154, 159, 160, 161, 162, 163, 164, 166, 171, 172, 173, 175, 178, 179, 181, 184, 185, 186, 191, 192, 193, 194, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 221, 226, 227, 228, 230, 231, 232, 234, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 263, 264, 265, 266, 268]

  @Test(timeout = 4000)
  public void test_delete_00()  throws Throwable  {
      //caseID:b1010d040414ff13b7901c2fa0f7439d
      //CoveredLines: [45, 191, 192, 193, 194]
      //Input_0_Long: 1L
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(1L);
      
      //Call method: delete
      int int0 = umsAdminServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_01()  throws Throwable  {
      //caseID:39ad9889391f5f7581e7367de261a036
      //CoveredLines: [45, 154]
      //Input_0_Long: 2956L
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(2956L);
      
      //Call method: getItem
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_getResourceList_02()  throws Throwable  {
      //caseID:244d4fcd2b73d9596634b7230d77c767
      //CoveredLines: [45, 226, 227, 230, 231, 232, 234]
      //Input_0_Long: 2829L
      //Assert: assertTrue(method_result.contains(umsResource0));
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(umsResource0);
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminRoleRelationDao0).getResourceList(anyLong());
      Vector<UmsResource> vector1 = new Vector<UmsResource>();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector1).when(umsAdminCacheService0).getResourceList(anyLong());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(2829L);
      
      //Call method: getResourceList
      List<UmsResource> list0 = umsAdminServiceImpl0.getResourceList(long0);
      
      //Test Result Assert
      assertTrue(list0.contains(umsResource0));
  }

  @Test(timeout = 4000)
  public void test_getRoleList_03()  throws Throwable  {
      //caseID:e3e31b95f7777244ff083d7dfef858e3
      //CoveredLines: [45, 221]
      //Input_0_Long: 4637L
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(4637L);
      
      //Call method: getRoleList
      List<UmsRole> list0 = umsAdminServiceImpl0.getRoleList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_insertLoginLog_04()  throws Throwable  {
      //caseID:8a81c959b0aa79cdfcae5c1e53b17d1e
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 125, 126]
      //Input_0_String: 1
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: insertLoginLog
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "insertLoginLog", (Object) "1", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_list_05()  throws Throwable  {
      //caseID:249d665e8b8d661c8e250aa2d7cf8850
      //CoveredLines: [45, 159, 160, 161, 162, 166]
      //Input_0_String: 
      //Input_1_Integer: 150
      //Input_2_Integer: 150
      //Assert: assertTrue(method_result.isEmpty());
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsAdmin> stack0 = new Stack<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer(150);
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list("", integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:5460c40203d3b397a26966d6ad3e29f4
      //CoveredLines: [45, 159, 160, 161, 162, 163, 164, 166]
      //Input_0_String: ,0)}vK0;9 >X2y
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list(",0)}vK0;9 >X2y", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_loadUserByUsername_07()  throws Throwable  {
      //caseID:16ced472668c7a9e901dc7691f36c2df
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 263, 264, 268]
      //Input_0_String: \u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: loadUserByUsername
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.loadUserByUsername("\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF");
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.UmsAdminServiceImpl", e);
         assertEquals("org.springframework.security.core.userdetails.UsernameNotFoundException", e.getClass().getName());
         assertEquals("\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_loadUserByUsername_08()  throws Throwable  {
      //caseID:79b388cf2dfcc6270fe38c5530026683
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: com.macro.mall.service.impl.UmsAdminServiceImpl
      //Assert: assertTrue(method_result.isCredentialsNonExpired());
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      LinkedList<UmsAdmin> linkedList1 = new LinkedList<UmsAdmin>();
      Integer integer0 = new Integer((-2));
      Long long0 = new Long(1122L);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("Jsqz^PM'F];=/b").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("\u767B\u5F55\u5F02\u5E38:{}").when(umsAdmin0).getUsername();
      doReturn("1").when(umsAdmin0).toString();
      
      linkedList1.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList1).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(linkedList0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: loadUserByUsername
      UserDetails userDetails0 = umsAdminServiceImpl0.loadUserByUsername("com.macro.mall.service.impl.UmsAdminServiceImpl");
      
      //Test Result Assert
      assertTrue(userDetails0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test_login_09()  throws Throwable  {
      //caseID:705341b629150170377d78f158920e86
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 109, 110, 111, 113, 125, 126, 127, 128, 129, 130, 131, 226, 227, 228, 263, 264, 265, 266]
      //Input_0_String: 
      //Input_1_String: \u5BC6\u7801\u4E0D\u6B63\u786E
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      Long long0 = new Long(0L);
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsResource0).getId();
      doReturn("parallelism > 0 required but it was ").when(umsResource0).getName();
      doReturn("FAk`Ye)").when(umsResource0).toString();
      
      vector0.add(umsResource0);
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1970946338").when(jwtTokenUtil0).generateToken(any(org.springframework.security.core.userdetails.UserDetails.class));
      Integer integer0 = new Integer(1);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("m<N9GGm2F").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("Mono").when(umsAdmin0).toString();
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin1).getId();
      doReturn("\u5E10\u53F7\u5DF2\u88AB\u7981\u7528").when(umsAdmin1).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0, umsAdmin1).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(vector0).when(umsAdminCacheService0).getResourceList(anyLong());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("", "\u5BC6\u7801\u4E0D\u6B63\u786E");
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.UmsAdminServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_login_10()  throws Throwable  {
      //caseID:59ee4269c52d725fb2db9d00375b3667
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 109, 110, 111, 113, 125, 126, 127, 128, 129, 130, 131, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: 1
      //Input_1_String: 1
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(jwtTokenUtil0).generateToken(any(org.springframework.security.core.userdetails.UserDetails.class));
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("\u5BC6\u7801\u4E0D\u6B63\u786E").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("\u5BC6\u7801\u4E0D\u6B63\u786E").when(umsAdmin0).toString();
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin1).getId();
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsAdmin1).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0, umsAdmin1).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(linkedList0).when(umsAdminCacheService0).getResourceList(anyLong());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("1", "1");
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.UmsAdminServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_login_11()  throws Throwable  {
      //caseID:2bfbc97ec0c0076b4c2ac2125fd9f9ce
      //CoveredLines: [45, 64, 65, 99, 102, 103, 104, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: 
      //Input_1_String: reactor.core.publisher.FluxWindowTimeout$WindowTimeoutSubscriber
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("", "reactor.core.publisher.FluxWindowTimeout$WindowTimeoutSubscriber");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5BC6\u7801\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_12()  throws Throwable  {
      //caseID:9bfd80334fc268d431f66da86f3d8306
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 99, 102, 114, 115, 117, 263, 264, 268]
      //Input_0_String: 1
      //Input_1_String: 1
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: login
      String string0 = umsAdminServiceImpl0.login("1", "1");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_login_13()  throws Throwable  {
      //caseID:5efbce3c7cf0c77cba6347061cc47e73
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 107, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: 1
      //Input_1_String: 1
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(2229);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("\u5BC6\u7801\u4E0D\u6B63\u786E").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("\u5BC6\u7801\u4E0D\u6B63\u786E").when(umsAdmin0).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(linkedList0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("1", "1");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E10\u53F7\u5DF2\u88AB\u7981\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_refreshToken_14()  throws Throwable  {
      //caseID:1c405bc956bde5842410ab733fbc948e
      //CoveredLines: [45, 149]
      //Input_0_String: com.macro.mall.service.impl.UmsAdminServiceImpl
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      //Call method: refreshToken
      String string0 = umsAdminServiceImpl0.refreshToken("com.macro.mall.service.impl.UmsAdminServiceImpl");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_register_15()  throws Throwable  {
      //caseID:b1bcbb8267fa13c0b479d0863d5b8697
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 88]
      //Input_0_UmsAdminParam: {getPassword=\"\", getNickName=\"com.google.common.base.Suppliers$MemoizingSupplier\", getEmail=\"com.google.common.base.Suppliers$MemoizingSupplier\", getNote=\"\", getIcon=\"com.google.common.base.Suppliers$MemoizingSupplier\", getUsername=\"\"}
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsAdmin> linkedList0 = new LinkedList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(umsAdmin0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.google.common.base.Suppliers$MemoizingSupplier").when(umsAdminParam0).getEmail();
      doReturn("com.google.common.base.Suppliers$MemoizingSupplier").when(umsAdminParam0).getIcon();
      doReturn("com.google.common.base.Suppliers$MemoizingSupplier").when(umsAdminParam0).getNickName();
      doReturn("").when(umsAdminParam0).getNote();
      doReturn("").when(umsAdminParam0).getPassword();
      doReturn("").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin1 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertNull(umsAdmin1);
  }

  @Test(timeout = 4000)
  public void test_register_16()  throws Throwable  {
      //caseID:539b633eb3457dcdfdc3ccde432fe6a6
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 91, 92, 93, 94]
      //Input_0_UmsAdminParam: {getPassword=\"\", getNickName=\"com.google.common.base.Suppliers$MemoizingSupplier\", getEmail=\"com.google.common.base.Suppliers$MemoizingSupplier\", getNote=\"\", getIcon=\"com.google.common.base.Suppliers$MemoizingSupplier\", getUsername=\"\"}
      //Assert: assertEquals(1, (int)method_result.getStatus());
      //Assert: assertNotNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsAdmin> linkedList0 = new LinkedList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.google.common.base.Suppliers$MemoizingSupplier").when(umsAdminParam0).getEmail();
      doReturn("com.google.common.base.Suppliers$MemoizingSupplier").when(umsAdminParam0).getIcon();
      doReturn("com.google.common.base.Suppliers$MemoizingSupplier").when(umsAdminParam0).getNickName();
      doReturn("").when(umsAdminParam0).getNote();
      doReturn("").when(umsAdminParam0).getPassword();
      doReturn("").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertEquals(1, (int)umsAdmin0.getStatus());
      
      //Test Result Assert
      assertNotNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_update_17()  throws Throwable  {
      //caseID:8b6d7945ba8e00f921fa829e1cd52f2f
      //CoveredLines: [45, 171, 172, 173, 175, 184, 185, 186]
      //Input_0_Long: (-372L)
      //Input_1_UmsAdmin: {getPassword=\"Z+s\\\"VN:Q-.#Ty|\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Z+s\"VN:Q-.#Ty|").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long((-372L));
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Z+s\"VN:Q-.#Ty|").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_18()  throws Throwable  {
      //caseID:139fe1caa7acdcb16e4e106f5601d376
      //CoveredLines: [45, 171, 172, 173, 178, 179, 184, 185, 186]
      //Input_0_Long: (-372L)
      //Input_1_UmsAdmin: {getPassword=\"\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.scheduling.annotation.SchedulingConfiguration").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long((-372L));
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_19()  throws Throwable  {
      //caseID:5dc42387e9886c7698514c8b27f0424c
      //CoveredLines: [45, 171, 172, 173, 178, 181, 184, 185, 186]
      //Input_0_Long: 1L
      //Input_1_UmsAdmin: {getPassword=\"^fIX'BKo!i\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(1L);
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("^fIX'BKo!i").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateLoginTimeByUsername_20()  throws Throwable  {
      //caseID:61703f2363ffcc4c635967b817bceec4
      //CoveredLines: [45, 140, 141, 142, 143, 144, 145]
      //Input_0_String: 
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: updateLoginTimeByUsername
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "updateLoginTimeByUsername", (Object) "", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_21()  throws Throwable  {
      //caseID:68889fa63a2bdf8c9b968416f5bbeb46
      //CoveredLines: [45, 239, 242]
      //Input_0_UpdateAdminPasswordParam: {}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_22()  throws Throwable  {
      //caseID:98bd5d25a2561b46843d39fa9d4e456a
      //CoveredLines: [45, 239, 240, 242]
      //Input_0_UpdateAdminPasswordParam: {getUsername=\"com.macro.mall.service.impl.UmsAdminServiceImpl\"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_23()  throws Throwable  {
      //caseID:93c610bd3ae9fba646031791c25c3f43
      //CoveredLines: [45, 239, 240, 241, 242]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"2\", getUsername=\"2\"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("2").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_24()  throws Throwable  {
      //caseID:a50255b333494f5d0bfb862bcb997ad4
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 248]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"2\", getNewPassword=\"2\", getUsername=\"2\"}
      //Assert: assertEquals((-2), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("2").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("2").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_25()  throws Throwable  {
      //caseID:a19c7a8370fc3212f5a7cf4444faef2a
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 252]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"3\" \"1\", getNewPassword=\":rn!D\\\"M3\", getUsername=\"com.macro.mall.service.impl.UmsAdminServiceImpl\" \"1.0\"}
      //Assert: assertEquals((-3), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsAdmin> stack0 = new Stack<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.data.redis.core.convert.BinaryConverters$BooleanToBytesConverter").when(umsAdmin0).getPassword();
      
      stack0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(":rn!D\"M3").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("3", "1").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl", "1.0").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_26()  throws Throwable  {
      //caseID:b8f9297c34bb3e12aaeccbddd559554c
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"2\" \"2\", getNewPassword=\"2\", getUsername=\"2\" \"2\"}
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Vector<UmsAdmin> vector0 = new Vector<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("#&_2Hl$").when(umsAdmin0).getPassword();
      
      vector0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("2", "2").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("2", "2").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_27()  throws Throwable  {
      //caseID:c5f662897586d4440bca1ce68d280896
      //CoveredLines: [45, 199, 201, 202, 203, 205, 215, 216]
      //Input_0_Long: 3371L
      //Input_1_List<Long>: arrayList0
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-2101837717)).when(umsAdminRoleRelationMapper0).deleteByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      Long long0 = new Long(3371L);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, arrayList0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_28()  throws Throwable  {
      //caseID:95fec15fd8769a5b76f9cc3d2deb5e26
      //CoveredLines: [45, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216]
      //Input_0_Long: 0L
      //Input_1_List<Long>: vector0
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(0L);
      Vector<Long> vector0 = new Vector<Long>();
      
      vector0.add(long0);
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, vector0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }
}
