/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.dao.UmsAdminRoleRelationDao;
import com.macro.mall.dto.UmsAdminParam;
import com.macro.mall.dto.UpdateAdminPasswordParam;
import com.macro.mall.mapper.UmsAdminMapper;
import com.macro.mall.mapper.UmsAdminRoleRelationMapper;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import com.macro.mall.model.UmsRole;
import com.macro.mall.security.util.JwtTokenUtil;
import com.macro.mall.service.UmsAdminCacheService;
import com.macro.mall.service.impl.UmsAdminServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminServiceImpl_SSTest extends UmsAdminServiceImpl_SSTest_scaffolding {
// allCoveredLines:[45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 99, 102, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 117, 125, 126, 127, 128, 129, 130, 131, 140, 141, 142, 143, 144, 145, 149, 154, 159, 160, 161, 162, 163, 164, 166, 171, 172, 173, 175, 178, 179, 181, 184, 185, 186, 191, 192, 193, 194, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 221, 226, 227, 228, 230, 231, 232, 234, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 263, 264, 265, 266, 268]

  @Test(timeout = 4000)
  public void test_delete_00()  throws Throwable  {
      //caseID:09a7e3d5e9c2e3d9912987a949d891b6
      //CoveredLines: [45, 191, 192, 193, 194]
      //Input_0_Long: 739L
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(739L);
      
      //Call method: delete
      int int0 = umsAdminServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_01()  throws Throwable  {
      //caseID:f2b7c265d1e3667516163e084c59e5a6
      //CoveredLines: [45, 154]
      //Input_0_Long: 174L
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(174L);
      
      //Call method: getItem
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_getResourceList_02()  throws Throwable  {
      //caseID:0bfb0e93e5a6b9ffe069b2bfface5bed
      //CoveredLines: [45, 226, 227, 230, 231, 232, 234]
      //Input_0_Long: 2344L
      //Assert: assertTrue(method_result.contains(umsResource0));
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getResourceList(anyLong());
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminCacheService0).getResourceList(anyLong());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      stack0.add(umsResource0);
      Long long0 = new Long(2344L);
      
      //Call method: getResourceList
      List<UmsResource> list0 = umsAdminServiceImpl0.getResourceList(long0);
      
      //Test Result Assert
      assertTrue(list0.contains(umsResource0));
  }

  @Test(timeout = 4000)
  public void test_getRoleList_03()  throws Throwable  {
      //caseID:441b988f192672094ba19eff250310a4
      //CoveredLines: [45, 221]
      //Input_0_Long: 124L
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(124L);
      
      //Call method: getRoleList
      List<UmsRole> list0 = umsAdminServiceImpl0.getRoleList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_insertLoginLog_04()  throws Throwable  {
      //caseID:6323ef97f1cae950a3f61ba2e618e0bd
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 125, 126]
      //Input_0_String: "\u767B\u5F55\u5F02\u5E38:{}"
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: insertLoginLog
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "insertLoginLog", (Object) "\u767B\u5F55\u5F02\u5E38:{}", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_insertLoginLog_05()  throws Throwable  {
      //caseID:8db1edc7e034e64279dfdae6d5ef3434
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 125, 126]
      //Input_0_String: "\u767B\u5F55\u5F02\u5E38:{}"
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: insertLoginLog
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "insertLoginLog", (Object) "\u767B\u5F55\u5F02\u5E38:{}", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:bd51f4b68cd21dc214f8a4645eb0fb2d
      //CoveredLines: [45, 159, 160, 161, 162, 166]
      //Input_0_String: ""
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list("", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_07()  throws Throwable  {
      //caseID:3f242cf3d0cd40eab9eff4058cc494cf
      //CoveredLines: [45, 159, 160, 161, 162, 163, 164, 166]
      //Input_0_String: "\u767B\u5F55\u5F02\u5E38:{}"
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list("\u767B\u5F55\u5F02\u5E38:{}", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_loadUserByUsername_08()  throws Throwable  {
      //caseID:9d0e6cfd81870b00d20d61f4ddf51573
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: "com.macro.mall.service.impl.UmsAdminServiceImpl"
      //Assert: assertTrue(method_result.isCredentialsNonExpired());
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<UmsAdmin> linkedList0 = new LinkedList<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      linkedList0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: loadUserByUsername
      UserDetails userDetails0 = umsAdminServiceImpl0.loadUserByUsername("com.macro.mall.service.impl.UmsAdminServiceImpl");
      
      //Test Result Assert
      assertTrue(userDetails0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test_login_09()  throws Throwable  {
      //caseID:ca249c921ebf17cd712fbe1147f58d00
      //CoveredLines: [45, 64, 65, 99, 102, 103, 104, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: "com.macro.mall.service.impl.UmsAdminServiceImpl"
      //Input_1_String: "0"
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("com.macro.mall.service.impl.UmsAdminServiceImpl", "0");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5BC6\u7801\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_10()  throws Throwable  {
      //caseID:b347ecf9a0d8cd6133b496c183f39d0d
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 99, 102, 114, 115, 117, 263, 264, 268]
      //Input_0_String: "3Hjt-5]"
      //Input_1_String: "Kzo#u:9fsl"
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: login
      String string0 = umsAdminServiceImpl0.login("3Hjt-5]", "Kzo#u:9fsl");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_refreshToken_11()  throws Throwable  {
      //caseID:6e0d398bd90f0d33f356bd1fdb5e3318
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 109, 110, 111, 113, 125, 126, 127, 128, 129, 130, 131, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2147483646").when(jwtTokenUtil0).generateToken(any(org.springframework.security.core.userdetails.UserDetails.class));
      Long long0 = new Long(1910L);
      Integer integer0 = new Integer(1);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("Loaded [").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("Loaded [").when(umsAdmin0).toString();
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin1).getId();
      doReturn(" 1`U3NNNgTFN.{?sCD").when(umsAdmin1).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0, umsAdmin1).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(stack0).when(umsAdminCacheService0).getResourceList(anyLong());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("Loaded [", "V1IgyjdJ`s?S@X^");
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.UmsAdminServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_refreshToken_12()  throws Throwable  {
      //caseID:e3628aa484dfc0eac79ff9b732431ae2
      //CoveredLines: [45, 149]
      //Input_0_String: "^4B2"
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      //Call method: refreshToken
      String string0 = umsAdminServiceImpl0.refreshToken("^4B2");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_refreshToken_13()  throws Throwable  {
      //caseID:8db8fc40c09d0db9a0ae3dc6b32d5cbe
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 107, 226, 227, 228, 263, 264, 265, 266]
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-2));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("\u4E09").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("\u4E09").when(umsAdmin0).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(stack0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1933673682").when(umsResource0).toString();
      stack0.add(umsResource0);
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("\u4E09", "\u767B\u5F55\u5F02\u5E38:{}");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E10\u53F7\u5DF2\u88AB\u7981\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_refreshToken_14()  throws Throwable  {
      //caseID:454766c6ff27cfd26c60ff7c901f34f0
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 107, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-2));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("\u4E09").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("\u4E09").when(umsAdmin0).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(stack0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("\u4E09", "\u767B\u5F55\u5F02\u5E38:{}");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E10\u53F7\u5DF2\u88AB\u7981\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_register_15()  throws Throwable  {
      //caseID:7ba8ddc4175202ed6f866f571d4b52d5
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 88]
      //Input_0_UmsAdminParam: {getPassword="-2", getNickName="\u767B\u5F55\u5F02\u5E38:{}", getEmail="H+*Zm`ENT", getNote="1.0", getIcon=", address=", getUsername="%"}
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsAdmin> linkedList0 = new LinkedList<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      linkedList0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("H+*Zm`ENT").when(umsAdminParam0).getEmail();
      doReturn(", address=").when(umsAdminParam0).getIcon();
      doReturn("\u767B\u5F55\u5F02\u5E38:{}").when(umsAdminParam0).getNickName();
      doReturn("1.0").when(umsAdminParam0).getNote();
      doReturn("-2").when(umsAdminParam0).getPassword();
      doReturn("%").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin1 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertNull(umsAdmin1);
  }

  @Test(timeout = 4000)
  public void test_register_16()  throws Throwable  {
      //caseID:385ea3f4deff4dfdeb2cb7d41dac022a
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 91, 92, 93, 94]
      //Input_0_UmsAdminParam: {getPassword="", getNickName="\u767B\u5F55\u5F02\u5E38:{}", getEmail="H+*Zm`ENT", getNote="1.0", getIcon=", address=", getUsername="\u5BC6\u7801\u4E0D\u6B63\u786E"}
      //Assert: assertEquals(1, (int)method_result.getStatus());
      //Assert: assertNotNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsAdmin> linkedList0 = new LinkedList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("H+*Zm`ENT").when(umsAdminParam0).getEmail();
      doReturn(", address=").when(umsAdminParam0).getIcon();
      doReturn("\u767B\u5F55\u5F02\u5E38:{}").when(umsAdminParam0).getNickName();
      doReturn("1.0").when(umsAdminParam0).getNote();
      doReturn("").when(umsAdminParam0).getPassword();
      doReturn("\u5BC6\u7801\u4E0D\u6B63\u786E").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertEquals(1, (int)umsAdmin0.getStatus());
      
      //Test Result Assert
      assertNotNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_update_17()  throws Throwable  {
      //caseID:0940d820596735eec726197d2ffa6190
      //CoveredLines: [45, 171, 172, 173, 175, 184, 185, 186]
      //Input_0_Long: 0L
      //Input_1_UmsAdmin: {getPassword="-2"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-2").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(0L);
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-2").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_18()  throws Throwable  {
      //caseID:57146f9634b4e81efdeee0e1d7746d21
      //CoveredLines: [45, 171, 172, 173, 178, 179, 184, 185, 186]
      //Input_0_Long: 0L
      //Input_1_UmsAdmin: {getPassword=""}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("must subscribe with ").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(0L);
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_19()  throws Throwable  {
      //caseID:1d4d7e81ea8efff3cd2bff9c54b6b4fd
      //CoveredLines: [45, 171, 172, 173, 178, 181, 184, 185, 186]
      //Input_0_Long: 0L
      //Input_1_UmsAdmin: {getPassword="!h"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(0L);
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("!h").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateLoginTimeByUsername_20()  throws Throwable  {
      //caseID:396d1be47f6c1d7fe9cff72903a18c9b
      //CoveredLines: [45, 140, 141, 142, 143, 144, 145]
      //Input_0_String: "processPropertyPlaceHolders"
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: updateLoginTimeByUsername
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "updateLoginTimeByUsername", (Object) "processPropertyPlaceHolders", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_21()  throws Throwable  {
      //caseID:d377dd282abdd7aab5f8e3b7c72a7892
      //CoveredLines: [45, 239, 242]
      //Input_0_UpdateAdminPasswordParam: {}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_22()  throws Throwable  {
      //caseID:d5e665bee5bbd39c5463337eaa73709e
      //CoveredLines: [45, 239, 240, 242]
      //Input_0_UpdateAdminPasswordParam: {getUsername="ieJ/w"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("ieJ/w").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_23()  throws Throwable  {
      //caseID:3d4c4aa307f3f965c41ebc4857e9ee2c
      //CoveredLines: [45, 239, 240, 241, 242]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword="Retry-After", getUsername="Retry-After"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Retry-After").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("Retry-After").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_24()  throws Throwable  {
      //caseID:7f67cc6f885360e007ba718def0247ac
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 248]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword="Retry-After", getNewPassword="Retry-After", getUsername="Retry-After"}
      //Assert: assertEquals((-2), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Retry-After").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("Retry-After").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("Retry-After").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_25()  throws Throwable  {
      //caseID:f48f32deff2d17c0e69a1f3e08775c85
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 252]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword="Retry-After", getNewPassword="Retry-After", getUsername="Retry-After" "Retry-After"}
      //Assert: assertEquals((-3), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsAdmin> stack0 = new Stack<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      stack0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Retry-After").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("Retry-After").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("Retry-After", "Retry-After").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_26()  throws Throwable  {
      //caseID:d13f5cc17cf76e0ed5b32bda389525e4
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword="-2122952805" "-2122952805", getNewPassword="-2122952805", getUsername="-2122952805" "-2122952805"}
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Vector<UmsAdmin> vector0 = new Vector<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-2122952805").when(umsAdmin0).getPassword();
      vector0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-2122952805").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("-2122952805", "-2122952805").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("-2122952805", "-2122952805").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_27()  throws Throwable  {
      //caseID:9c94a2d298302bcc209c8a468c9a826f
      //CoveredLines: [45, 199, 201, 202, 203, 205, 215, 216]
      //Input_0_Long: 40L
      //Input_1_Long>: null
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(umsAdminRoleRelationMapper0).deleteByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      Long long0 = new Long(40L);
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, (List<Long>) null);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_28()  throws Throwable  {
      //caseID:2f0eb0d0ddc7e99d445719782efb3fd8
      //CoveredLines: [45, 199, 201, 202, 203, 205, 215, 216]
      //Input_0_Long: 23
      //Input_1_Long>: stack0
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(23).when(umsAdminRoleRelationMapper0).deleteByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      Long long0 = new Long(23);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, stack0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_29()  throws Throwable  {
      //caseID:1ce816114d15f744d4bf5f768c67900f
      //CoveredLines: [45, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216]
      //Input_0_Long: 1796L
      //Input_1_Long>: arrayList0
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(1796L);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      arrayList0.add(long0);
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, arrayList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }
}
