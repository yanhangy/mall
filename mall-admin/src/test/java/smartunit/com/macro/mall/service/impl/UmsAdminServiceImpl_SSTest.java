/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.dao.UmsAdminRoleRelationDao;
import com.macro.mall.dto.UmsAdminParam;
import com.macro.mall.dto.UpdateAdminPasswordParam;
import com.macro.mall.mapper.UmsAdminMapper;
import com.macro.mall.mapper.UmsAdminRoleRelationMapper;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import com.macro.mall.model.UmsRole;
import com.macro.mall.security.util.JwtTokenUtil;
import com.macro.mall.service.UmsAdminCacheService;
import com.macro.mall.service.impl.UmsAdminServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminServiceImpl_SSTest extends UmsAdminServiceImpl_SSTest_scaffolding {
// allCoveredLines:[45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 99, 102, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 117, 125, 126, 127, 128, 129, 130, 131, 140, 141, 142, 143, 144, 145, 149, 154, 159, 160, 161, 162, 163, 164, 166, 171, 172, 173, 175, 178, 179, 181, 184, 185, 186, 191, 192, 193, 194, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 221, 226, 227, 228, 230, 231, 232, 234, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 263, 264, 265, 266, 268]

  @Test(timeout = 4000)
  public void test_delete_00()  throws Throwable  {
      //caseID:25fb2f6395a4cbecc890c26bbb3cb5f5
      //CoveredLines: [45, 191, 192, 193, 194]
      //Input_0_Long: 0L
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(0L);
      
      //Call method: delete
      int int0 = umsAdminServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_01()  throws Throwable  {
      //caseID:b9924d6a76d3cf32814503ff6a8e178a
      //CoveredLines: [45, 154]
      //Input_0_Long: 4085L
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(4085L);
      
      //Call method: getItem
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_getResourceList_02()  throws Throwable  {
      //caseID:3297078c8762e2f2d858cd6ffa569a8c
      //CoveredLines: [45, 226, 227, 230, 231, 232, 234]
      //Input_0_Long: 265L
      //Assert: assertTrue(method_result.contains(umsResource0));
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(umsResource0);
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationDao0).getResourceList(anyLong());
      ArrayList<UmsResource> arrayList0 = new ArrayList<UmsResource>();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminCacheService0).getResourceList(anyLong());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(265L);
      
      //Call method: getResourceList
      List<UmsResource> list0 = umsAdminServiceImpl0.getResourceList(long0);
      
      //Test Result Assert
      assertTrue(list0.contains(umsResource0));
  }

  @Test(timeout = 4000)
  public void test_getRoleList_03()  throws Throwable  {
      //caseID:f1df3c4edc907d891a4789e262d012cc
      //CoveredLines: [45, 221]
      //Input_0_Long: 2961L
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(2961L);
      
      //Call method: getRoleList
      List<UmsRole> list0 = umsAdminServiceImpl0.getRoleList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_insertLoginLog_04()  throws Throwable  {
      //caseID:105e43aec6c8c675ff5d9516677c1170
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 125, 126]
      //Input_0_String: 
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsAdmin> linkedList0 = new LinkedList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: insertLoginLog
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "insertLoginLog", (Object) "", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_insertLoginLog_05()  throws Throwable  {
      //caseID:28c4fc85f2b37b697560e54d167c95bb
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 125, 126]
      //Input_0_String: \u5E10\u53F7\u5DF2\u88AB\u7981\u7528
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: insertLoginLog
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "insertLoginLog", (Object) "\u5E10\u53F7\u5DF2\u88AB\u7981\u7528", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:4e0a1458e8288ac14717be62d14a5e41
      //CoveredLines: [45, 159, 160, 161, 162, 166]
      //Input_0_String: 
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list("", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_07()  throws Throwable  {
      //caseID:511bf5194267dbf1bd291c6766a2e7f3
      //CoveredLines: [45, 159, 160, 161, 162, 163, 164, 166]
      //Input_0_String: ?Re+$sy QH
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list("?Re+$sy QH", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_loadUserByUsername_08()  throws Throwable  {
      //caseID:6be7c2f37e5f6ab82351211f2f5cfccb
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: com.google.common.base.CharMatcher$NegatedFastMatcher
      //Assert: assertTrue(method_result.isAccountNonExpired());
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      Integer integer0 = new Integer(1);
      Long long0 = new Long(0L);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("org.bouncycastle.jcajce.provider.symmetric.VMPC$Mappings").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsAdmin0).getUsername();
      doReturn("1.0").when(umsAdmin0).toString();
      
      arrayList0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(vector0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: loadUserByUsername
      UserDetails userDetails0 = umsAdminServiceImpl0.loadUserByUsername("com.google.common.base.CharMatcher$NegatedFastMatcher");
      
      //Test Result Assert
      assertTrue(userDetails0.isAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test_login_09()  throws Throwable  {
      //caseID:72b8f3d0f297f062564b97d70700ea76
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 109, 110, 111, 113, 125, 126, 127, 128, 129, 130, 131, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: kQbew07g}~eDv|
      //Input_1_String: -1633410038
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jwtTokenUtil0).generateToken(any(org.springframework.security.core.userdetails.UserDetails.class));
      Long long0 = new Long((-7894198246740708037L));
      Integer integer0 = new Integer(1);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("io.lettuce.core.RedisPublisher").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("io.lettuce.core.RedisPublisher").when(umsAdmin0).toString();
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin1).getId();
      doReturn("1.0").when(umsAdmin1).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0, umsAdmin1).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(linkedList0).when(umsAdminCacheService0).getResourceList(anyLong());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("kQbew07g}~eDv|", "-1633410038");
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.UmsAdminServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_login_10()  throws Throwable  {
      //caseID:7ea72a8633b5e2213efc6bdc11674a22
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 107, 226, 227, 228, 263, 264, 265, 266]
      //Input_0_String: 
      //Input_1_String: 1
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-46340));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("q!e1@c.V'g:").when(umsAdmin0).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(stack0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHA-256AND192BITAES-CBC-BC").when(umsResource0).toString();
      
      stack0.add(umsResource0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("", "1");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E10\u53F7\u5DF2\u88AB\u7981\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_11()  throws Throwable  {
      //caseID:8fbc18afd34e2e77b45d8c9d930d80bf
      //CoveredLines: [45, 64, 65, 99, 102, 103, 104, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: 
      //Input_1_String: 1
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("", "1");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5BC6\u7801\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_12()  throws Throwable  {
      //caseID:865d10108fa27c6f3b8ec974bf0bbe5e
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 99, 102, 114, 115, 117, 263, 264, 268]
      //Input_0_String: ,9VU/?;B)g8*{$ {
      //Input_1_String: saltGenerator cannot be null
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: login
      String string0 = umsAdminServiceImpl0.login(",9VU/?;B)g8*{$ {", "saltGenerator cannot be null");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_login_13()  throws Throwable  {
      //caseID:b568016152265e2e1dce0cbe1288274f
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 107, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: ,9VU/?;B)g8*{$ {
      //Input_1_String: saltGenerator cannot be null
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(407);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("1.0").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("1.0").when(umsAdmin0).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(linkedList0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login(",9VU/?;B)g8*{$ {", "saltGenerator cannot be null");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E10\u53F7\u5DF2\u88AB\u7981\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_refreshToken_14()  throws Throwable  {
      //caseID:6b9ae285f0c9d228a2114e321681ec29
      //CoveredLines: [45, 149]
      //Input_0_String: VOLATILE
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      //Call method: refreshToken
      String string0 = umsAdminServiceImpl0.refreshToken("VOLATILE");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_register_15()  throws Throwable  {
      //caseID:9bccf0682b6fc4bf4f6916dfa6cfef01
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 88]
      //Input_0_UmsAdminParam: {getPassword=\"k#@'(ql3YUe\", getNickName=\"k#@'(ql3YUe\", getEmail=\"k#@'(ql3YUe\", getNote=\"k#@'(ql3YUe\", getIcon=\"k#@'(ql3YUe\", getUsername=\"k#@'(ql3YUe\"}
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(umsAdmin0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("k#@'(ql3YUe").when(umsAdminParam0).getEmail();
      doReturn("k#@'(ql3YUe").when(umsAdminParam0).getIcon();
      doReturn("k#@'(ql3YUe").when(umsAdminParam0).getNickName();
      doReturn("k#@'(ql3YUe").when(umsAdminParam0).getNote();
      doReturn("k#@'(ql3YUe").when(umsAdminParam0).getPassword();
      doReturn("k#@'(ql3YUe").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin1 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertNull(umsAdmin1);
  }

  @Test(timeout = 4000)
  public void test_register_16()  throws Throwable  {
      //caseID:eafb4169e0040465137bf2e9d91b1d18
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 91, 92, 93, 94]
      //Input_0_UmsAdminParam: {getPassword=\"1\", getNickName=\"1\", getEmail=\"1\", getNote=\"1\", getIcon=\"1\", getUsername=\"1\"}
      //Assert: assertEquals(1, (int)method_result.getStatus());
      //Assert: assertNotNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-20)).when(umsAdminMapper0).insert(any(com.macro.mall.model.UmsAdmin.class));
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(passwordEncoder0).encode(any(java.lang.CharSequence.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(umsAdminParam0).getEmail();
      doReturn("1").when(umsAdminParam0).getIcon();
      doReturn("1").when(umsAdminParam0).getNickName();
      doReturn("1").when(umsAdminParam0).getNote();
      doReturn("1").when(umsAdminParam0).getPassword();
      doReturn("1").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertEquals(1, (int)umsAdmin0.getStatus());
      
      //Test Result Assert
      assertNotNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_update_17()  throws Throwable  {
      //caseID:1c18c1202c2c54e98be5980db9eece8f
      //CoveredLines: [45, 171, 172, 173, 175, 184, 185, 186]
      //Input_0_Long: (-1660L)
      //Input_1_UmsAdmin: {getPassword=\"reactor.core.publisher.FluxScan$ScanSubscriber\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reactor.core.publisher.FluxScan$ScanSubscriber").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long((-1660L));
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reactor.core.publisher.FluxScan$ScanSubscriber").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_18()  throws Throwable  {
      //caseID:29bf8b00ae461cf53ea1e0dd895f77d4
      //CoveredLines: [45, 171, 172, 173, 178, 179, 184, 185, 186]
      //Input_0_Long: (-1660L)
      //Input_1_UmsAdmin: {getPassword=\"\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("must subscribe with ").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long((-1660L));
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_19()  throws Throwable  {
      //caseID:4e4dca37a1113603dc1b87ceccc9dda4
      //CoveredLines: [45, 171, 172, 173, 178, 181, 184, 185, 186]
      //Input_0_Long: (-1660L)
      //Input_1_UmsAdmin: {getPassword=\"0\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long((-1660L));
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateLoginTimeByUsername_20()  throws Throwable  {
      //caseID:1c6f774efc41d5e5dbef58a6bc6b4dbd
      //CoveredLines: [45, 140, 141, 142, 143, 144, 145]
      //Input_0_String: 1
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: updateLoginTimeByUsername
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "updateLoginTimeByUsername", (Object) "1", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_21()  throws Throwable  {
      //caseID:11cf06303c75a51e2b5b956db5b177f8
      //CoveredLines: [45, 239, 242]
      //Input_0_UpdateAdminPasswordParam: {}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_22()  throws Throwable  {
      //caseID:305c90c3422351719175078463d09077
      //CoveredLines: [45, 239, 240, 242]
      //Input_0_UpdateAdminPasswordParam: {getUsername=\"d>?]U-5<0k[}(e\"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("d>?]U-5<0k[}(e").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_23()  throws Throwable  {
      //caseID:890ed419a4a40ba2f1b5fc5a13eaafba
      //CoveredLines: [45, 239, 240, 241, 242]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"\\u767B\\u5F55\\u5F02\\u5E38:{}\", getUsername=\"\\u767B\\u5F55\\u5F02\\u5E38:{}\"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u767B\u5F55\u5F02\u5E38:{}").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("\u767B\u5F55\u5F02\u5E38:{}").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_24()  throws Throwable  {
      //caseID:65607f7cd92e6a5996217969429358f6
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 248]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS\", getNewPassword=\"org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS\", getUsername=\"org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS\"}
      //Assert: assertEquals((-2), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_25()  throws Throwable  {
      //caseID:e372f698fe658a2983c94abf39830357
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 252]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"UNAVAILABLE_SCAN\" \"btM*\", getNewPassword=\"-1130042162\", getUsername=\"1.0\" \"2147483645\"}
      //Assert: assertEquals((-3), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("%").when(umsAdmin0).getPassword();
      
      arrayList0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1130042162").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("UNAVAILABLE_SCAN", "btM*").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("1.0", "2147483645").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_26()  throws Throwable  {
      //caseID:0e408b09906d897e070885e8c988d4fa
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"0\" \"\", getNewPassword=\"0\", getUsername=\"0\" \"0\"}
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(umsAdmin0).getPassword();
      
      arrayList0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("0", "").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("0", "0").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_27()  throws Throwable  {
      //caseID:6db20504f80213deac2cf6ccfd2a79ce
      //CoveredLines: [45, 199, 201, 202, 203, 205, 215, 216]
      //Input_0_Long: 995
      //Input_1_List<Long>: arrayList0
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(995).when(umsAdminRoleRelationMapper0).deleteByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      Long long0 = new Long(995);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, arrayList0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_28()  throws Throwable  {
      //caseID:78dcf8b4bb14c9bbf96c646fea77627f
      //CoveredLines: [45, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216]
      //Input_0_Long: 1019L
      //Input_1_List<Long>: linkedList0
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(1019L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      linkedList0.add(long0);
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, linkedList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }
}
