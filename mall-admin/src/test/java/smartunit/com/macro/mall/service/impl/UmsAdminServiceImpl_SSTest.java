/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.dao.UmsAdminRoleRelationDao;
import com.macro.mall.dto.UmsAdminParam;
import com.macro.mall.dto.UpdateAdminPasswordParam;
import com.macro.mall.mapper.UmsAdminMapper;
import com.macro.mall.mapper.UmsAdminRoleRelationMapper;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import com.macro.mall.model.UmsRole;
import com.macro.mall.security.util.JwtTokenUtil;
import com.macro.mall.service.UmsAdminCacheService;
import com.macro.mall.service.impl.UmsAdminServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminServiceImpl_SSTest extends UmsAdminServiceImpl_SSTest_scaffolding {
// allCoveredLines:[45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 99, 102, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 117, 125, 126, 127, 128, 129, 130, 131, 140, 141, 142, 143, 144, 145, 149, 154, 159, 160, 161, 162, 163, 164, 166, 171, 172, 173, 175, 178, 179, 181, 184, 185, 186, 191, 192, 193, 194, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 221, 226, 227, 228, 230, 231, 232, 234, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 263, 264, 265, 266, 268]

  @Test(timeout = 4000)
  public void test_delete_00()  throws Throwable  {
      //caseID:a4e79accd9be3ca1c4526424cc429e97
      //CoveredLines: [45, 191, 192, 193, 194]
      //Input_0_Long: 0L
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(0L);
      
      //Call method: delete
      int int0 = umsAdminServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_01()  throws Throwable  {
      //caseID:5d0876d2de8ba85d3204820203d5a55f
      //CoveredLines: [45, 154]
      //Input_0_Long: (-2332L)
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long((-2332L));
      
      //Call method: getItem
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_getResourceList_02()  throws Throwable  {
      //caseID:018ce2ec5312d3b339198e2b29a7db67
      //CoveredLines: [45, 226, 227, 230, 231, 232, 234]
      //Input_0_Long: 831L
      //Assert: assertTrue(method_result.contains(umsResource0));
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2147483645", "1").when(umsResource0).toString();
      
      stack0.add(umsResource0);
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getResourceList(anyLong());
      ArrayList<UmsResource> arrayList0 = new ArrayList<UmsResource>();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminCacheService0).getResourceList(anyLong());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(831L);
      
      //Call method: getResourceList
      List<UmsResource> list0 = umsAdminServiceImpl0.getResourceList(long0);
      
      //Test Result Assert
      assertTrue(list0.contains(umsResource0));
  }

  @Test(timeout = 4000)
  public void test_getRoleList_03()  throws Throwable  {
      //caseID:5963afed03088ad1b8e0e448835b5587
      //CoveredLines: [45, 221]
      //Input_0_Long: 3709L
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(3709L);
      
      //Call method: getRoleList
      List<UmsRole> list0 = umsAdminServiceImpl0.getRoleList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_insertLoginLog_04()  throws Throwable  {
      //caseID:c82f6e1f87e118fefca1b8583c581fba
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 125, 126]
      //Input_0_String: 0
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: insertLoginLog
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "insertLoginLog", (Object) "0", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_insertLoginLog_05()  throws Throwable  {
      //caseID:f581bc7e3133199c6d6030d3677152e6
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 125, 126]
      //Input_0_String: \u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: insertLoginLog
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "insertLoginLog", (Object) "\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:3fd94e25ae001f59e2ad4c7cba3c4bf7
      //CoveredLines: [45, 159, 160, 161, 162, 166]
      //Input_0_String: 
      //Input_1_Integer: (-3)
      //Input_2_Integer: (-3)
      //Assert: assertEquals(0, method_result.size());
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsAdmin> stack0 = new Stack<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer((-3));
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list("", integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_07()  throws Throwable  {
      //caseID:493a0ec505da7329b257dcdb834804eb
      //CoveredLines: [45, 159, 160, 161, 162, 163, 164, 166]
      //Input_0_String: ResponseCookie must not be null
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      List<UmsAdmin> list0 = umsAdminServiceImpl0.list("ResponseCookie must not be null", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_loadUserByUsername_08()  throws Throwable  {
      //caseID:0f2c91a54c22314c3403ec4b2be35590
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: g};KRCZ$1+M,b4
      //Assert: assertTrue(method_result.isAccountNonExpired());
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getResourceList(anyLong());
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      Integer integer0 = new Integer((-2));
      Long long0 = new Long(0L);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("-2076186806").when(umsAdmin0).getUsername();
      doReturn("1").when(umsAdmin0).toString();
      
      arrayList0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((UmsAdmin) null).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(stack0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: loadUserByUsername
      UserDetails userDetails0 = umsAdminServiceImpl0.loadUserByUsername("g};KRCZ$1+M,b4");
      
      //Test Result Assert
      assertTrue(userDetails0.isAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test_login_09()  throws Throwable  {
      //caseID:9154224a4222826b1a18c3fdf69eb6ff
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 109, 110, 111, 113, 125, 126, 127, 128, 129, 130, 131, 226, 227, 228, 263, 264, 265, 266]
      //Input_0_String: io.lettuce.core.masterslave.SentinelTopologyRefresh$SentinelReconnectMessagePredicate
      //Input_1_String: ;K.u;?jysdr&*^4mcE<
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsResource> arrayList0 = new ArrayList<UmsResource>();
      Long long0 = new Long(0L);
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsResource0).getId();
      doReturn("%").when(umsResource0).getName();
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsResource0).toString();
      
      arrayList0.add(umsResource0);
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-3").when(jwtTokenUtil0).generateToken(any(org.springframework.security.core.userdetails.UserDetails.class));
      Integer integer0 = new Integer(1);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("%").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsAdmin0).toString();
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin1).getId();
      doReturn("ybBrejQ*cm?|eQUP~").when(umsAdmin1).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0, umsAdmin1).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(arrayList0).when(umsAdminCacheService0).getResourceList(anyLong());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("io.lettuce.core.masterslave.SentinelTopologyRefresh$SentinelReconnectMessagePredicate", ";K.u;?jysdr&*^4mcE<");
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.UmsAdminServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_login_10()  throws Throwable  {
      //caseID:0fde030d3b76cb56956db482919d44e0
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 109, 110, 111, 113, 125, 126, 127, 128, 129, 130, 131, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: 1
      //Input_1_String: 1
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reactor.onErrorDropped.local").when(jwtTokenUtil0).generateToken(any(org.springframework.security.core.userdetails.UserDetails.class));
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("-1954108315").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("jKAG>8U{GrO6t&9").when(umsAdmin0).toString();
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin1).getId();
      doReturn("\u5BC6\u7801\u4E0D\u6B63\u786E").when(umsAdmin1).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0, umsAdmin1).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(stack0).when(umsAdminCacheService0).getResourceList(anyLong());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("1", "1");
      } catch(Throwable e) {
         verifyException("com.macro.mall.service.impl.UmsAdminServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_login_11()  throws Throwable  {
      //caseID:59e2bae0cccfb148bd0af54fee01abe9
      //CoveredLines: [45, 64, 65, 99, 102, 103, 104, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: 1.0
      //Input_1_String: boundedServices
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("1.0", "boundedServices");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5BC6\u7801\u4E0D\u6B63\u786E", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_12()  throws Throwable  {
      //caseID:3d343096f4e6b8f5f72ca906dd282d81
      //CoveredLines: [45, 64, 65, 66, 67, 68, 69, 74, 99, 102, 114, 115, 117, 263, 264, 268]
      //Input_0_String: m\"G_
      //Input_1_String: 
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: login
      String string0 = umsAdminServiceImpl0.login("m\"G_", "");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_login_13()  throws Throwable  {
      //caseID:cf9ceec3aece46b8faec404fff935fc2
      //CoveredLines: [45, 64, 65, 99, 102, 103, 106, 107, 226, 227, 230, 231, 234, 263, 264, 265, 266]
      //Input_0_String: -1
      //Input_1_String: 
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getResourceList(nullable(java.lang.Long.class));
      Long long0 = new Long(79L);
      Integer integer0 = new Integer(1024);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsAdmin0).getId();
      doReturn("%").when(umsAdmin0).getPassword();
      doReturn(integer0).when(umsAdmin0).getStatus();
      doReturn("%").when(umsAdmin0).toString();
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminCacheService0).getAdmin(anyString());
      doReturn(stack0).when(umsAdminCacheService0).getResourceList(nullable(java.lang.Long.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: login
      // Undeclared exception!
      try { 
        umsAdminServiceImpl0.login("-1", "");
      } catch(Throwable e) {
         verifyException("com.macro.mall.common.exception.Asserts", e);
         assertEquals("com.macro.mall.common.exception.ApiException", e.getClass().getName());
         assertEquals("\u5E10\u53F7\u5DF2\u88AB\u7981\u7528", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_refreshToken_14()  throws Throwable  {
      //caseID:b7c7a023936f6eaddfd088b2f79de2fd
      //CoveredLines: [45, 149]
      //Input_0_String: 0Hy~ 4\",)B?q
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock jwtTokenUtil0
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "jwtTokenUtil", (Object) jwtTokenUtil0);
      
      //Call method: refreshToken
      String string0 = umsAdminServiceImpl0.refreshToken("0Hy~ 4\",)B?q");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_register_15()  throws Throwable  {
      //caseID:d136e3f9171ad00867ee95c82170c4a2
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 88]
      //Input_0_UmsAdminParam: {getPassword=\"-(3QweX$O6n+IoV\", getNickName=\"-(3QweX$O6n+IoV\", getEmail=\"-(3QweX$O6n+IoV\", getNote=\"-(3QweX$O6n+IoV\", getIcon=\"-(3QweX$O6n+IoV\", getUsername=\"-(3QweX$O6n+IoV\"}
      //Assert: assertNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsAdmin> stack0 = new Stack<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(umsAdmin0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getEmail();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getIcon();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getNickName();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getNote();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getPassword();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin1 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertNull(umsAdmin1);
  }

  @Test(timeout = 4000)
  public void test_register_16()  throws Throwable  {
      //caseID:5b399cdc127984c047363f27f3b80423
      //CoveredLines: [45, 79, 80, 81, 82, 84, 85, 86, 87, 91, 92, 93, 94]
      //Input_0_UmsAdminParam: {getPassword=\"-(3QweX$O6n+IoV\", getNickName=\"-(3QweX$O6n+IoV\", getEmail=\"-(3QweX$O6n+IoV\", getNote=\"-(3QweX$O6n+IoV\", getIcon=\"-(3QweX$O6n+IoV\", getUsername=\"-(3QweX$O6n+IoV\"}
      //Assert: assertEquals(1, (int)method_result.getStatus());
      //Assert: assertNotNull(method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Stack<UmsAdmin> stack0 = new Stack<UmsAdmin>();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1789569713)).when(umsAdminMapper0).insert(any(com.macro.mall.model.UmsAdmin.class));
      doReturn(stack0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-(3QweX$O6n+IoV").when(passwordEncoder0).encode(any(java.lang.CharSequence.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock umsAdminParam0
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getEmail();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getIcon();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getNickName();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getNote();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getPassword();
      doReturn("-(3QweX$O6n+IoV").when(umsAdminParam0).getUsername();
      
      //Call method: register
      UmsAdmin umsAdmin0 = umsAdminServiceImpl0.register(umsAdminParam0);
      
      //Test Result Assert
      assertEquals(1, (int)umsAdmin0.getStatus());
      
      //Test Result Assert
      assertNotNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_update_17()  throws Throwable  {
      //caseID:86a0ea1b7da868bc3ffb1bf22551ab86
      //CoveredLines: [45, 171, 172, 173, 175, 184, 185, 186]
      //Input_0_Long: 1925L
      //Input_1_UmsAdmin: {getPassword=\"com.macro.mall.service.impl.UmsAdminServiceImpl\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(1925L);
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.service.impl.UmsAdminServiceImpl").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_18()  throws Throwable  {
      //caseID:ea715fe6bdc1c536a8da39babb325c5a
      //CoveredLines: [45, 171, 172, 173, 178, 179, 184, 185, 186]
      //Input_0_Long: 1925L
      //Input_1_UmsAdmin: {getPassword=\"\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(1925L);
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_19()  throws Throwable  {
      //caseID:ca1c4c26807b722770466121fce1b640
      //CoveredLines: [45, 171, 172, 173, 178, 181, 184, 185, 186]
      //Input_0_Long: 0L
      //Input_1_UmsAdmin: {getPassword=\"Cannot retrieve SpelExpression from %s\"}
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(umsAdmin0).getPassword();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminMapper0).selectByPrimaryKey(anyLong());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      Long long0 = new Long(0L);
      //mock umsAdmin1
      UmsAdmin umsAdmin1 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Cannot retrieve SpelExpression from %s").when(umsAdmin1).getPassword();
      
      //Call method: update
      int int0 = umsAdminServiceImpl0.update(long0, umsAdmin1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateLoginTimeByUsername_20()  throws Throwable  {
      //caseID:9e44a14a23731afcda8d1a6a3533b2ef
      //CoveredLines: [45, 140, 141, 142, 143, 144, 145]
      //Input_0_String: array
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      
      //Call method: updateLoginTimeByUsername
      PrivateAccess.callMethod((Class<UmsAdminServiceImpl>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "updateLoginTimeByUsername", (Object) "array", (Class<?>) String.class);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_21()  throws Throwable  {
      //caseID:fca852930d27204b9700c9656e329e70
      //CoveredLines: [45, 239, 242]
      //Input_0_UpdateAdminPasswordParam: {}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_22()  throws Throwable  {
      //caseID:95c1265b87dd48f315dff5acda5cdc14
      //CoveredLines: [45, 239, 240, 242]
      //Input_0_UpdateAdminPasswordParam: {getUsername=\"%\"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("%").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_23()  throws Throwable  {
      //caseID:3896353171f14a007bf92af6550a3b7a
      //CoveredLines: [45, 239, 240, 241, 242]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\", getUsername=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\"}
      //Assert: assertEquals((-1), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_24()  throws Throwable  {
      //caseID:2f7a0f51d0faf46e81004102ed4ca18c
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 248]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\", getNewPassword=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\", getUsername=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\"}
      //Assert: assertEquals((-2), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_25()  throws Throwable  {
      //caseID:c0b97b4cb9feef1b2b54c50ae5145ad7
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 252]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\", getNewPassword=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\", getUsername=\"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\" \"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC\"}
      //Assert: assertEquals((-3), method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      Vector<UmsAdmin> vector0 = new Vector<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC", "Alg.Alias.AlgorithmParameters.PBEWITHSHAANDDES2KEY-CBC").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test_updatePassword_26()  throws Throwable  {
      //caseID:3fd209648a709cd122c6003915f07f70
      //CoveredLines: [45, 239, 240, 241, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257]
      //Input_0_UpdateAdminPasswordParam: {getOldPassword=\"d4d~'_2LH@A=e)\" \"d4d~'_2LH@A=e)\", getNewPassword=\"d4d~'_2LH@A=e)\", getUsername=\"d4d~'_2LH@A=e)\" \"d4d~'_2LH@A=e)\"}
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      ArrayList<UmsAdmin> arrayList0 = new ArrayList<UmsAdmin>();
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("d4d~'_2LH@A=e)").when(umsAdmin0).getPassword();
      
      arrayList0.add(umsAdmin0);
      //mock umsAdminMapper0
      UmsAdminMapper umsAdminMapper0 = mock(UmsAdminMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminMapper0).selectByExample(any(com.macro.mall.model.UmsAdminExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock passwordEncoder0
      PasswordEncoder passwordEncoder0 = mock(PasswordEncoder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(passwordEncoder0).matches(nullable(java.lang.CharSequence.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "passwordEncoder", (Object) passwordEncoder0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminMapper", (Object) umsAdminMapper0);
      //mock updateAdminPasswordParam0
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("d4d~'_2LH@A=e)").when(updateAdminPasswordParam0).getNewPassword();
      doReturn("d4d~'_2LH@A=e)", "d4d~'_2LH@A=e)").when(updateAdminPasswordParam0).getOldPassword();
      doReturn("d4d~'_2LH@A=e)", "d4d~'_2LH@A=e)").when(updateAdminPasswordParam0).getUsername();
      
      //Call method: updatePassword
      int int0 = umsAdminServiceImpl0.updatePassword(updateAdminPasswordParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_27()  throws Throwable  {
      //caseID:19a1ad9f88c3b4eab679775f4e70207c
      //CoveredLines: [45, 199, 201, 202, 203, 205, 215, 216]
      //Input_0_Long: (-344298049)
      //Input_1_List<Long>: null
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-344298049)).when(umsAdminRoleRelationMapper0).deleteByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      Long long0 = new Long((-344298049));
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, (List<Long>) null);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_28()  throws Throwable  {
      //caseID:c33e2eaf1930ceb337d084f442ce53d8
      //CoveredLines: [45, 199, 201, 202, 203, 205, 215, 216]
      //Input_0_Long: 430227734
      //Input_1_List<Long>: stack0
      //Assert: assertEquals(0, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(430227734).when(umsAdminRoleRelationMapper0).deleteByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      Long long0 = new Long(430227734);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, stack0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateRole_29()  throws Throwable  {
      //caseID:8b7c312dca284dcec19aff2a4b864e34
      //CoveredLines: [45, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216]
      //Input_0_Long: 1574L
      //Input_1_List<Long>: vector0
      //Assert: assertEquals(1, method_result);
      
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminServiceImpl.class, umsAdminServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      Long long0 = new Long(1574L);
      Vector<Long> vector0 = new Vector<Long>();
      
      vector0.add(long0);
      
      //Call method: updateRole
      int int0 = umsAdminServiceImpl0.updateRole(long0, vector0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }
}
