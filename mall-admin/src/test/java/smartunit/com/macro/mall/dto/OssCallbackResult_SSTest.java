/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.macro.mall.dto.OssCallbackResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OssCallbackResult_SSTest extends OssCallbackResult_SSTest_scaffolding {
// allCoveredLines:[11, 12, 15, 17, 19, 21, 23]

  @Test(timeout = 4000)
  public void test_equals_00()  throws Throwable  {
      //caseID:f1cb3c75d41fb097bbf4cf87759d3006
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12]
      //Input_0_Object: ossCallbackResult0
      //Assert: assertTrue(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult0.equals(ossCallbackResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_01()  throws Throwable  {
      //caseID:8e5267ab2876df37e4206d485acd92a4
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12]
      //Input_0_Object: )0MaN{BO1Py]dlAKMxD
      //Assert: assertFalse(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult0.equals(")0MaN{BO1Py]dlAKMxD");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_02()  throws Throwable  {
      //caseID:c900ec226902e9311674fd1fa81e6c3c
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 15, 17, 19, 21, 23]
      //Input_0_Object: ossCallbackResult0
      //Assert: assertTrue(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      OssCallbackResult ossCallbackResult1 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult1.equals(ossCallbackResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_03()  throws Throwable  {
      //caseID:95638ef9f07ad8d5c68afce7ef5c5437
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 15, 17, 19, 21, 23]
      //Input_0_Object: ossCallbackResult1
      //Assert: assertTrue(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      OssCallbackResult ossCallbackResult1 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult0.equals(ossCallbackResult1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:2023f8e730b2eb2edd8160ef2fe1890b
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 15, 17, 19, 21, 23]
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: hashCode
      ossCallbackResult0.hashCode();
  }

  @Test(timeout = 4000)
  public void test_setFilename_05()  throws Throwable  {
      //caseID:5bc712d44d6b7d2a107416664be3bda6
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: 1
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setFilename
      ossCallbackResult0.setFilename("1");
      
      //Test Result Assert
      assertNull(ossCallbackResult0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test_setHeight_06()  throws Throwable  {
      //caseID:241164c57b7a76e8933839ff9415a039
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: LNOeQ
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setHeight
      ossCallbackResult0.setHeight("LNOeQ");
      
      //Test Result Assert
      assertNull(ossCallbackResult0.getSize());
  }

  @Test(timeout = 4000)
  public void test_setMimeType_07()  throws Throwable  {
      //caseID:28d2ffb6fafb009f21457f3158104d35
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: 2
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setMimeType
      ossCallbackResult0.setMimeType("2");
      
      //Test Result Assert
      assertNull(ossCallbackResult0.getFilename());
  }

  @Test(timeout = 4000)
  public void test_setSize_08()  throws Throwable  {
      //caseID:455d0e00a705f4fbb3207c217f350dfb
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: 1.0
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setSize
      ossCallbackResult0.setSize("1.0");
      
      //Test Result Assert
      assertEquals("1.0", ossCallbackResult0.getSize());
  }

  @Test(timeout = 4000)
  public void test_setWidth_09()  throws Throwable  {
      //caseID:d3ce1e365e01200bba2ab549d77b1b9b
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: f!>qL
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setWidth
      ossCallbackResult0.setWidth("f!>qL");
      
      //Test Result Assert
      assertNull(ossCallbackResult0.getFilename());
  }

  @Test(timeout = 4000)
  public void test_toString_10()  throws Throwable  {
      //caseID:9366c2af2ed6840a5bb5bfbd31c52547
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 15, 17, 19, 21, 23]
      //Assert: assertEquals("OssCallbackResult(filename=null, size=null, mimeType=null, width=null, height=null)", method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: toString
      String string0 = ossCallbackResult0.toString();
      
      //Test Result Assert
      assertEquals("OssCallbackResult(filename=null, size=null, mimeType=null, width=null, height=null)", string0);
  }
}
