/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.macro.mall.dto.OssCallbackResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OssCallbackResult_SSTest extends OssCallbackResult_SSTest_scaffolding {
// allCoveredLines:[11, 12, 15, 17, 19, 21, 23]

  @Test(timeout = 4000)
  public void test_equals_00()  throws Throwable  {
      //caseID:888d5087c98d7ff0178a5aa9f5964997
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12]
      //Input_0_Object: ossCallbackResult0
      //Assert: assertTrue(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult0.equals(ossCallbackResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_01()  throws Throwable  {
      //caseID:7052b09140215e1d634612df8e5c749a
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12]
      //Input_0_Object: 1.0
      //Assert: assertFalse(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult0.equals("1.0");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_02()  throws Throwable  {
      //caseID:a8d53331e914e7a2cb4692c9d7b806f6
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 15, 17, 19, 21, 23]
      //Input_0_Object: ossCallbackResult0
      //Assert: assertTrue(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      OssCallbackResult ossCallbackResult1 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult1.equals(ossCallbackResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_03()  throws Throwable  {
      //caseID:657077d725581a899e0fdf9c379b5b13
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 15, 17, 19, 21, 23]
      //Input_0_Object: ossCallbackResult1
      //Assert: assertTrue(method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      OssCallbackResult ossCallbackResult1 = new OssCallbackResult();
      
      //Call method: equals
      boolean boolean0 = ossCallbackResult0.equals(ossCallbackResult1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:c4ef72b8a5c89cfce7395f8804e11263
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 15, 17, 19, 21, 23]
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: hashCode
      ossCallbackResult0.hashCode();
  }

  @Test(timeout = 4000)
  public void test_setFilename_05()  throws Throwable  {
      //caseID:cfe55464898f1286d79fa48e6a0ec205
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: , size=
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setFilename
      ossCallbackResult0.setFilename(", size=");
      
      //Test Result Assert
      assertNull(ossCallbackResult0.getWidth());
  }

  @Test(timeout = 4000)
  public void test_setHeight_06()  throws Throwable  {
      //caseID:872dcedf775cb031478a8716434ca072
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: 1
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setHeight
      ossCallbackResult0.setHeight("1");
      
      //Test Result Assert
      assertNull(ossCallbackResult0.getWidth());
  }

  @Test(timeout = 4000)
  public void test_setMimeType_07()  throws Throwable  {
      //caseID:2e73857f6f805843740d2b9baa20a62e
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: 1.0
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setMimeType
      ossCallbackResult0.setMimeType("1.0");
      
      //Test Result Assert
      assertNull(ossCallbackResult0.getFilename());
  }

  @Test(timeout = 4000)
  public void test_setSize_08()  throws Throwable  {
      //caseID:3c3f53ea38bbb0cc25864d733f55fddc
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: DTRJ\"3QM(6Lj
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setSize
      ossCallbackResult0.setSize("DTRJ\"3QM(6Lj");
      
      //Test Result Assert
      assertEquals("DTRJ\"3QM(6Lj", ossCallbackResult0.getSize());
  }

  @Test(timeout = 4000)
  public void test_setWidth_09()  throws Throwable  {
      //caseID:a3333a286448c9b41622dd9c2efb0209
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11]
      //Input_0_String: fely.nz\"
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: setWidth
      ossCallbackResult0.setWidth("fely.nz\"");
      
      //Test Result Assert
      assertEquals("fely.nz\"", ossCallbackResult0.getWidth());
  }

  @Test(timeout = 4000)
  public void test_toString_10()  throws Throwable  {
      //caseID:3c4880e9cb385e3b96bd46810663f8e9
      //CoveredLines: [11, 11, 11, 11, 11, 11, 11, 15, 17, 19, 21, 23]
      //Assert: assertEquals("OssCallbackResult(filename=null, size=null, mimeType=null, width=null, height=null)", method_result);
      
      OssCallbackResult ossCallbackResult0 = new OssCallbackResult();
      
      //Call method: toString
      String string0 = ossCallbackResult0.toString();
      
      //Test Result Assert
      assertEquals("OssCallbackResult(filename=null, size=null, mimeType=null, width=null, height=null)", string0);
  }
}
