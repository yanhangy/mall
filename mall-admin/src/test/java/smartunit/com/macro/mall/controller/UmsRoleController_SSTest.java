/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.UmsRoleController;
import com.macro.mall.model.UmsMenu;
import com.macro.mall.model.UmsResource;
import com.macro.mall.model.UmsRole;
import com.macro.mall.service.UmsRoleService;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsRoleController_SSTest extends UmsRoleController_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 34, 41, 42, 43, 45, 52, 53, 54, 56, 63, 64, 73, 74, 81, 82, 83, 84, 85, 87, 94, 95, 102, 103, 110, 111, 118, 119]

  @Test(timeout = 4000)
  public void test_allocMenu_00()  throws Throwable  {
      //caseID:3856337ce25b474358ea6a0bdc93042e
      //CoveredLines: [22, 110, 111]
      //Input_0_Long: 1185147655
      //Input_1_List<Long>: stack0
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1185147655).when(umsRoleService0).allocMenu(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(1185147655);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: allocMenu
      CommonResult commonResult0 = umsRoleController0.allocMenu(long0, stack0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_allocResource_01()  throws Throwable  {
      //caseID:b715fad53c2ed8a5e7f80533487955f0
      //CoveredLines: [22, 118, 119]
      //Input_0_Long: 2
      //Input_1_List<Long>: stack0
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(umsRoleService0).allocResource(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(2);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: allocResource
      CommonResult commonResult0 = umsRoleController0.allocResource(long0, stack0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_create_02()  throws Throwable  {
      //caseID:9e9b62da84d99602d091b345ab341b63
      //CoveredLines: [22, 30, 31, 32]
      //Input_0_UmsRole: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(100000).when(umsRoleService0).create(any(com.macro.mall.model.UmsRole.class));
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = umsRoleController0.create(umsRole0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_03()  throws Throwable  {
      //caseID:3ac9db939dcb0a568093505145403573
      //CoveredLines: [22, 30, 31, 34]
      //Input_0_UmsRole: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = umsRoleController0.create(umsRole0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_04()  throws Throwable  {
      //caseID:9726642206070520e8dd82a9290a7c41
      //CoveredLines: [22, 52, 53, 56]
      //Input_0_List<Long>: stack0
      //Assert: assertEquals(500L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(umsRoleService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = umsRoleController0.delete(stack0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_05()  throws Throwable  {
      //caseID:efc2e092b8967b85424705e0c4267578
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_List<Long>: linkedList0
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(811).when(umsRoleService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = umsRoleController0.delete(linkedList0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:ca97eee8c10ede369eafe5a2cebd5ed4
      //CoveredLines: [22, 73, 74]
      //Input_0_String: io.lettuce.core.masterslave.SentinelTopologyRefresh$TopologyRefreshMessagePredicate
      //Input_1_Integer: 25
      //Input_2_Integer: 25
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      Vector<UmsRole> vector0 = new Vector<UmsRole>();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsRoleService0).list(anyString() , anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Integer integer0 = new Integer(25);
      
      //Call method: list
      CommonResult<CommonPage<UmsRole>> commonResult0 = umsRoleController0.list("io.lettuce.core.masterslave.SentinelTopologyRefresh$TopologyRefreshMessagePredicate", integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_listAll_07()  throws Throwable  {
      //caseID:065b00b71ba13a44d974bb74a758145a
      //CoveredLines: [22, 63, 64]
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      
      //Call method: listAll
      CommonResult<List<UmsRole>> commonResult0 = umsRoleController0.listAll();
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_listMenu_08()  throws Throwable  {
      //caseID:ba9a223e6b2a67732e4492009a8770ac
      //CoveredLines: [22, 94, 95]
      //Input_0_Long: 2909L
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(2909L);
      
      //Call method: listMenu
      CommonResult<List<UmsMenu>> commonResult0 = umsRoleController0.listMenu(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_listResource_09()  throws Throwable  {
      //caseID:c22ffd00290a95b5097570a64aa403d4
      //CoveredLines: [22, 102, 103]
      //Input_0_Long: 0L
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(0L);
      
      //Call method: listResource
      CommonResult<List<UmsResource>> commonResult0 = umsRoleController0.listResource(long0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_10()  throws Throwable  {
      //caseID:9f9293b1f295a313b1eef46fff1b4a6e
      //CoveredLines: [22, 41, 42, 43]
      //Input_0_Long: 1033
      //Input_1_UmsRole: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1033).when(umsRoleService0).update(anyLong() , any(com.macro.mall.model.UmsRole.class));
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(1033);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = umsRoleController0.update(long0, umsRole0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_11()  throws Throwable  {
      //caseID:9952961236d91fe704a71f76b3cc6464
      //CoveredLines: [22, 41, 42, 45]
      //Input_0_Long: 0L
      //Input_1_UmsRole: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(0L);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = umsRoleController0.update(long0, umsRole0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateStatus_12()  throws Throwable  {
      //caseID:2dc1992b2bbaafe487adee4ac555414f
      //CoveredLines: [22, 81, 82, 83, 84, 85]
      //Input_0_Long: 93
      //Input_1_Integer: 93
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(93).when(umsRoleService0).update(anyLong() , any(com.macro.mall.model.UmsRole.class));
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(93);
      Integer integer0 = new Integer(93);
      
      //Call method: updateStatus
      CommonResult commonResult0 = umsRoleController0.updateStatus(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateStatus_13()  throws Throwable  {
      //caseID:c28a07d0571b2ab313e74bc72492cdc2
      //CoveredLines: [22, 81, 82, 83, 84, 87]
      //Input_0_Long: 0L
      //Input_1_Integer: 44
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(44);
      
      //Call method: updateStatus
      CommonResult commonResult0 = umsRoleController0.updateStatus(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
}
