/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.UmsRoleController;
import com.macro.mall.model.UmsMenu;
import com.macro.mall.model.UmsResource;
import com.macro.mall.model.UmsRole;
import com.macro.mall.service.UmsRoleService;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsRoleController_SSTest extends UmsRoleController_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 34, 41, 42, 43, 45, 52, 53, 54, 56, 63, 64, 73, 74, 81, 82, 83, 84, 85, 87, 94, 95, 102, 103, 110, 111, 118, 119]

  @Test(timeout = 4000)
  public void test_allocMenu_00()  throws Throwable  {
      //caseID:4195ca4e8fde07a41ebc9b92f5bed603
      //CoveredLines: [22, 110, 111]
      //Input_0_Long: 397
      //Input_1_Long>: stack0
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(397).when(umsRoleService0).allocMenu(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(397);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: allocMenu
      CommonResult commonResult0 = umsRoleController0.allocMenu(long0, stack0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_allocResource_01()  throws Throwable  {
      //caseID:d560399d9ad5f4fa3d75ebca21a4f2a8
      //CoveredLines: [22, 118, 119]
      //Input_0_Long: 1
      //Input_1_Long>: linkedList0
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(umsRoleService0).allocResource(anyLong() , ArgumentMatchers.<java.lang.Long>anyList());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(1);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: allocResource
      CommonResult commonResult0 = umsRoleController0.allocResource(long0, linkedList0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_02()  throws Throwable  {
      //caseID:5ed53d1da44e96288af8737e37119254
      //CoveredLines: [22, 30, 31, 32]
      //Input_0_UmsRole: {}
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(429).when(umsRoleService0).create(any(com.macro.mall.model.UmsRole.class));
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = umsRoleController0.create(umsRole0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_03()  throws Throwable  {
      //caseID:929093a845a3a1043e7dc4ad9b900a4c
      //CoveredLines: [22, 30, 31, 34]
      //Input_0_UmsRole: {}
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      CommonResult commonResult0 = umsRoleController0.create(umsRole0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_04()  throws Throwable  {
      //caseID:fa5f1132b47eb129b0a3e894884e30cd
      //CoveredLines: [22, 52, 53, 56]
      //Input_0_Long>: vector0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(umsRoleService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Vector<Long> vector0 = new Vector<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = umsRoleController0.delete(vector0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_05()  throws Throwable  {
      //caseID:3afe21a52376e9e7149a60fdc5832a22
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_Long>: vector0
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1073741824).when(umsRoleService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Vector<Long> vector0 = new Vector<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = umsRoleController0.delete(vector0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:3f79a19ec2c8af01ef3f50201f400c09
      //CoveredLines: [22, 73, 74]
      //Input_0_String: "%c>"
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Assert: assertEquals(200L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      Stack<UmsRole> stack0 = new Stack<UmsRole>();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsRoleService0).list(anyString() , anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      CommonResult<CommonPage<UmsRole>> commonResult0 = umsRoleController0.list("%c>", integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_listAll_07()  throws Throwable  {
      //caseID:f973c91cbdd4b80384e80d8cdefb8402
      //CoveredLines: [22, 63, 64]
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      
      //Call method: listAll
      CommonResult<List<UmsRole>> commonResult0 = umsRoleController0.listAll();
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_listMenu_08()  throws Throwable  {
      //caseID:276ba5d75902563069c44690df058a2f
      //CoveredLines: [22, 94, 95]
      //Input_0_Long: 0L
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(0L);
      
      //Call method: listMenu
      CommonResult<List<UmsMenu>> commonResult0 = umsRoleController0.listMenu(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_listResource_09()  throws Throwable  {
      //caseID:673e5abeb0757613d7390da02c03bef8
      //CoveredLines: [22, 102, 103]
      //Input_0_Long: 0L
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(0L);
      
      //Call method: listResource
      CommonResult<List<UmsResource>> commonResult0 = umsRoleController0.listResource(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_update_10()  throws Throwable  {
      //caseID:c02135376985e72d8b0d7153c42414cc
      //CoveredLines: [22, 41, 42, 43]
      //Input_0_Long: 1100
      //Input_1_UmsRole: {}
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1100).when(umsRoleService0).update(anyLong() , any(com.macro.mall.model.UmsRole.class));
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(1100);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = umsRoleController0.update(long0, umsRole0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_update_11()  throws Throwable  {
      //caseID:b9e9da91689a084e76cab80456ff62ce
      //CoveredLines: [22, 41, 42, 45]
      //Input_0_Long: 2264L
      //Input_1_UmsRole: {}
      //Assert: assertEquals(500L, method_result.getCode());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(2264L);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      CommonResult commonResult0 = umsRoleController0.update(long0, umsRole0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateStatus_12()  throws Throwable  {
      //caseID:cc06f690c579a07d9e8e2a3355d48226
      //CoveredLines: [22, 81, 82, 83, 84, 85]
      //Input_0_Long: 256
      //Input_1_Integer: 256
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(256).when(umsRoleService0).update(anyLong() , any(com.macro.mall.model.UmsRole.class));
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(256);
      Integer integer0 = new Integer(256);
      
      //Call method: updateStatus
      CommonResult commonResult0 = umsRoleController0.updateStatus(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateStatus_13()  throws Throwable  {
      //caseID:9d4dce945ba08a2204fbd4cabbe5eb87
      //CoveredLines: [22, 81, 82, 83, 84, 87]
      //Input_0_Long: 2418L
      //Input_1_Integer: 0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      UmsRoleController umsRoleController0 = new UmsRoleController();
      //mock umsRoleService0
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UmsRoleController.class, umsRoleController0, "roleService", (Object) umsRoleService0);
      Long long0 = new Long(2418L);
      Integer integer0 = new Integer(0);
      
      //Call method: updateStatus
      CommonResult commonResult0 = umsRoleController0.updateStatus(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
}
