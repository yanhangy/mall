/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsHomeBrandMapper;
import com.macro.mall.model.SmsHomeBrand;
import com.macro.mall.service.impl.SmsHomeBrandServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeBrandServiceImpl_SSTest extends SmsHomeBrandServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 42, 43, 44, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 67, 68]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:cdf1f7758df6f559379c07c1d687770e
      //CoveredLines: [19, 24, 25, 26, 27, 28, 29]
      //Input_0_List<SmsHomeBrand>: arrayList0
      //Assert: assertEquals(1, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      ArrayList<SmsHomeBrand> arrayList0 = new ArrayList<SmsHomeBrand>();
      //mock smsHomeBrand0
      SmsHomeBrand smsHomeBrand0 = mock(SmsHomeBrand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(smsHomeBrand0);
      
      //Call method: create
      int int0 = smsHomeBrandServiceImpl0.create(arrayList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:f7dab8fb87a1742def884f2360c32074
      //CoveredLines: [19, 42, 43, 44]
      //Input_0_List<Long>: stack0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      int int0 = smsHomeBrandServiceImpl0.delete(stack0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:a44596c7b02cd6753ed69d7d4b1b0954
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 67, 68]
      //Input_0_String: 1
      //Input_1_Integer: null
      //Input_2_Integer: 501
      //Input_3_Integer: 501
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      Stack<SmsHomeBrand> stack0 = new Stack<SmsHomeBrand>();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsHomeBrandMapper0).selectByExample(any(com.macro.mall.model.SmsHomeBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Integer integer0 = new Integer(501);
      
      //Call method: list
      List<SmsHomeBrand> list0 = smsHomeBrandServiceImpl0.list("1", (Integer) null, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:31919637e22af6e9373f347d75681166
      //CoveredLines: [19, 58, 59, 60, 61, 64, 65, 67, 68]
      //Input_0_String: 
      //Input_1_Integer: 402
      //Input_2_Integer: 402
      //Input_3_Integer: 402
      //Assert: assertEquals(0, method_result.size());
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      Stack<SmsHomeBrand> stack0 = new Stack<SmsHomeBrand>();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsHomeBrandMapper0).selectByExample(any(com.macro.mall.model.SmsHomeBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Integer integer0 = new Integer(402);
      
      //Call method: list
      List<SmsHomeBrand> list0 = smsHomeBrandServiceImpl0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:539ffd1d16a2bf624e339b700550f969
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 65, 67, 68]
      //Input_0_String: 1
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Input_3_Integer: (-1)
      //Assert: assertEquals(0, method_result.size());
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      Stack<SmsHomeBrand> stack0 = new Stack<SmsHomeBrand>();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsHomeBrandMapper0).selectByExample(any(com.macro.mall.model.SmsHomeBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      List<SmsHomeBrand> list0 = smsHomeBrandServiceImpl0.list("1", integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:e96eb4d9b5e03e24f79c1035fab13293
      //CoveredLines: [19, 49, 50, 51, 52, 53]
      //Input_0_List<Long>: arrayList0
      //Input_1_Integer: 1302
      //Assert: assertEquals(1302, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1302).when(smsHomeBrandMapper0).updateByExampleSelective(any(com.macro.mall.model.SmsHomeBrand.class) , any(com.macro.mall.model.SmsHomeBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(1302);
      
      //Call method: updateRecommendStatus
      int int0 = smsHomeBrandServiceImpl0.updateRecommendStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(1302, int0);
  }

  @Test(timeout = 4000)
  public void test_updateSort_6()  throws Throwable  {
      //caseID:172ea568dc714a990007d5b87ca53ba9
      //CoveredLines: [19, 34, 35, 36, 37]
      //Input_0_Long: 516
      //Input_1_Integer: 516
      //Assert: assertEquals(516, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(516).when(smsHomeBrandMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsHomeBrand.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Long long0 = new Long(516);
      Integer integer0 = new Integer(516);
      
      //Call method: updateSort
      int int0 = smsHomeBrandServiceImpl0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(516, int0);
  }
}
