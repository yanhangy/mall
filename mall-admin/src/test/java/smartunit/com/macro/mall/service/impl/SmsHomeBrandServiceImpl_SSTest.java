/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsHomeBrandMapper;
import com.macro.mall.model.SmsHomeBrand;
import com.macro.mall.service.impl.SmsHomeBrandServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeBrandServiceImpl_SSTest extends SmsHomeBrandServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 42, 43, 44, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 67, 68]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:daf3080ca2b629889b916a14e05aa64b
      //CoveredLines: [19, 24, 25, 26, 27, 28, 29]
      //Input_0_List<SmsHomeBrand>: linkedList0
      //Assert: assertEquals(1, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      LinkedList<SmsHomeBrand> linkedList0 = new LinkedList<SmsHomeBrand>();
      //mock smsHomeBrand0
      SmsHomeBrand smsHomeBrand0 = mock(SmsHomeBrand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(smsHomeBrand0);
      
      //Call method: create
      int int0 = smsHomeBrandServiceImpl0.create(linkedList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:8971efab68a1b2d62574dfed22f42256
      //CoveredLines: [19, 42, 43, 44]
      //Input_0_List<Long>: linkedList0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: delete
      int int0 = smsHomeBrandServiceImpl0.delete(linkedList0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:562bf43dfea978682d93cf77d4fea755
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 67, 68]
      //Input_0_String: %
      //Input_1_Integer: null
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      LinkedList<SmsHomeBrand> linkedList0 = new LinkedList<SmsHomeBrand>();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsHomeBrandMapper0).selectByExample(any(com.macro.mall.model.SmsHomeBrandExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeBrand> list0 = smsHomeBrandServiceImpl0.list("%", (Integer) null, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:42a1787932e589d41893d8cf9c5c610a
      //CoveredLines: [19, 58, 59, 60, 61, 64, 65, 67, 68]
      //Input_0_String: 
      //Input_1_Integer: 1225
      //Input_2_Integer: 1225
      //Input_3_Integer: 1225
      //Assert: assertNull(method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Integer integer0 = new Integer(1225);
      
      //Call method: list
      List<SmsHomeBrand> list0 = smsHomeBrandServiceImpl0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:266b0b5a75f8d4417ea1ba5eefab574a
      //CoveredLines: [19, 58, 59, 60, 61, 62, 64, 65, 67, 68]
      //Input_0_String: 1
      //Input_1_Integer: 1
      //Input_2_Integer: 1
      //Input_3_Integer: 1
      //Assert: assertNull(method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Integer integer0 = new Integer(1);
      
      //Call method: list
      List<SmsHomeBrand> list0 = smsHomeBrandServiceImpl0.list("1", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:56941f833d592e35030a7e2333719cf6
      //CoveredLines: [19, 49, 50, 51, 52, 53]
      //Input_0_List<Long>: arrayList0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateRecommendStatus
      int int0 = smsHomeBrandServiceImpl0.updateRecommendStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateSort_6()  throws Throwable  {
      //caseID:1113b4f41ff2c35797609233b6b56e56
      //CoveredLines: [19, 34, 35, 36, 37]
      //Input_0_Long: 204
      //Input_1_Integer: 204
      //Assert: assertEquals(204, method_result);
      
      SmsHomeBrandServiceImpl smsHomeBrandServiceImpl0 = new SmsHomeBrandServiceImpl();
      //mock smsHomeBrandMapper0
      SmsHomeBrandMapper smsHomeBrandMapper0 = mock(SmsHomeBrandMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(204).when(smsHomeBrandMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsHomeBrand.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandServiceImpl.class, smsHomeBrandServiceImpl0, "homeBrandMapper", (Object) smsHomeBrandMapper0);
      Long long0 = new Long(204);
      Integer integer0 = new Integer(204);
      
      //Call method: updateSort
      int int0 = smsHomeBrandServiceImpl0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(204, int0);
  }
}
