/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dto.UmsMenuNode;
import com.macro.mall.mapper.UmsMenuMapper;
import com.macro.mall.model.UmsMenu;
import com.macro.mall.service.impl.UmsMenuServiceImpl;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsMenuServiceImpl_SSTest extends UmsMenuServiceImpl_SSTest_scaffolding {
// allCoveredLines:[21, 27, 28, 29, 36, 38, 41, 42, 43, 45, 48, 52, 53, 54, 59, 64, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:4e1a63b57d9a08d1cce992c5ae84d9ea
      //CoveredLines: [21, 27, 28, 29, 36, 38, 48]
      //Input_0_UmsMenu: {getParentId=0L}
      //Assert: assertEquals(0, method_result);
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long(0L);
      //mock umsMenu0
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMenu0).getParentId();
      
      //Call method: create
      int int0 = umsMenuServiceImpl0.create(umsMenu0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:7bb031580bcc1e465d7b13df72754f3d
      //CoveredLines: [21, 64]
      //Input_0_Long: 2472L
      //Assert: assertEquals(0, method_result);
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long(2472L);
      
      //Call method: delete
      int int0 = umsMenuServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:85aaa4eda600520f0e88bd406ffc3ede
      //CoveredLines: [21, 59]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getItem
      UmsMenu umsMenu0 = umsMenuServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsMenu0);
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:2698f46e49c02695681c19255f20727f
      //CoveredLines: [21, 69, 70, 71, 72, 73]
      //Input_0_Long: 0L
      //Input_1_Integer: 420
      //Input_2_Integer: 420
      //Assert: assertNull(method_result);
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(420);
      
      //Call method: list
      List<UmsMenu> list0 = umsMenuServiceImpl0.list(long0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_treeList_4()  throws Throwable  {
      //caseID:dad52baae4171d21063f326028045d6d
      //CoveredLines: [21, 78, 79, 80, 80, 81, 81, 82, 97, 98, 99, 100, 100, 101, 101, 102, 103]
      //Assert: assertFalse(method_result.isEmpty());
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      Vector<UmsMenu> vector0 = new Vector<UmsMenu>();
      Long long0 = new Long(0L);
      //mock umsMenu0
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMenu0).getParentId();
      
      vector0.add(umsMenu0);
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsMenuMapper0).selectByExample(any(com.macro.mall.model.UmsMenuExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      
      //Call method: treeList
      List<UmsMenuNode> list0 = umsMenuServiceImpl0.treeList();
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:72751908a77523d4d76173531914c94d
      //CoveredLines: [21, 36, 41, 42, 43, 48, 52, 53, 54]
      //Input_0_Long: (-1L)
      //Input_1_UmsMenu: {getParentId=(-1L) (-1L)}
      //Assert: assertEquals((-1), method_result);
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      Integer integer0 = new Integer(1);
      //mock umsMenu0
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsMenu0).getLevel();
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMenu0).when(umsMenuMapper0).selectByPrimaryKey(anyLong());
      doReturn((-1)).when(umsMenuMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.UmsMenu.class));
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long((-1L));
      //mock umsMenu1
      UmsMenu umsMenu1 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(umsMenu1).getParentId();
      
      //Call method: update
      int int0 = umsMenuServiceImpl0.update(long0, umsMenu1);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_update_6()  throws Throwable  {
      //caseID:6aaa4b131fab3adc17cf3d06a626d0fc
      //CoveredLines: [21, 36, 41, 42, 45, 48, 52, 53, 54]
      //Input_0_Long: (-1L)
      //Input_1_UmsMenu: {getParentId=(-1L)}
      //Assert: assertEquals(0, method_result);
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long((-1L));
      //mock umsMenu0
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMenu0).getParentId();
      
      //Call method: update
      int int0 = umsMenuServiceImpl0.update(long0, umsMenu0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateHidden_7()  throws Throwable  {
      //caseID:f149f348ed0f0be49b15582608af0140
      //CoveredLines: [21, 87, 88, 89, 90]
      //Input_0_Long: (-1L)
      //Input_1_Integer: 618
      //Assert: assertEquals(0, method_result);
      
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      //mock umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer(618);
      
      //Call method: updateHidden
      int int0 = umsMenuServiceImpl0.updateHidden(long0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
