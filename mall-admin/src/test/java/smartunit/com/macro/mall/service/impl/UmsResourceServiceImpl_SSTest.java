/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.UmsResourceMapper;
import com.macro.mall.model.UmsResource;
import com.macro.mall.service.UmsAdminCacheService;
import com.macro.mall.service.impl.UmsResourceServiceImpl;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsResourceServiceImpl_SSTest extends UmsResourceServiceImpl_SSTest_scaffolding {
// allCoveredLines:[21, 28, 29, 34, 35, 36, 37, 42, 47, 48, 49, 54, 55, 56, 57, 58, 60, 61, 63, 64, 66, 71]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:65845525f192c38f04e9350629148578
      //CoveredLines: [21, 28, 29]
      //Input_0_UmsResource: {}
      //Assert: assertEquals(0, method_result);
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = umsResourceServiceImpl0.create(umsResource0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:622c42682638cfb9f782658b60ff6970
      //CoveredLines: [21, 47, 48, 49]
      //Input_0_Long: 1237L
      //Assert: assertEquals(0, method_result);
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      Long long0 = new Long(1237L);
      
      //Call method: delete
      int int0 = umsResourceServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:437fd3debc457d03326bdeeebc2ece41
      //CoveredLines: [21, 42]
      //Input_0_Long: 971L
      //Assert: assertNull(method_result);
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      Long long0 = new Long(971L);
      
      //Call method: getItem
      UmsResource umsResource0 = umsResourceServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(umsResource0);
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:b95f28b231e31d97a3a95ff3580bd563
      //CoveredLines: [21, 54, 55, 56, 57, 58, 60, 61, 63, 66]
      //Input_0_Long: 1251L
      //Input_1_String: 1
      //Input_2_String: 
      //Input_3_Integer: 37
      //Input_4_Integer: 37
      //Assert: assertEquals(0, method_result.size());
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsResourceMapper0).selectByExample(any(com.macro.mall.model.UmsResourceExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      Long long0 = new Long(1251L);
      Integer integer0 = new Integer(37);
      
      //Call method: list
      List<UmsResource> list0 = umsResourceServiceImpl0.list(long0, "1", "", integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:9124744c3d917a7011d95a0b74d81276
      //CoveredLines: [21, 54, 55, 56, 57, 60, 61, 63, 64, 66]
      //Input_0_Long: null
      //Input_1_String: Cannot find method on deserialization: 
      //Input_2_String: 1.0
      //Input_3_Integer: 0
      //Input_4_Integer: 0
      //Assert: assertTrue(method_result.isEmpty());
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsResourceMapper0).selectByExample(any(com.macro.mall.model.UmsResourceExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<UmsResource> list0 = umsResourceServiceImpl0.list((Long) null, "Cannot find method on deserialization: ", "1.0", integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_5()  throws Throwable  {
      //caseID:d9cc8829dbe9444b64c2ca7970ae4c54
      //CoveredLines: [21, 54, 55, 56, 57, 58, 60, 63, 64, 66]
      //Input_0_Long: 831L
      //Input_1_String: 
      //Input_2_String: 37
      //Input_3_Integer: 0
      //Input_4_Integer: 0
      //Assert: assertEquals(0, method_result.size());
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsResourceMapper0).selectByExample(any(com.macro.mall.model.UmsResourceExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      Long long0 = new Long(831L);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<UmsResource> list0 = umsResourceServiceImpl0.list(long0, "", "37", integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_6()  throws Throwable  {
      //caseID:a5557d9402c140153245f5ba4d3eaf1a
      //CoveredLines: [21, 54, 55, 56, 57, 58, 60, 61, 63, 64, 66]
      //Input_0_Long: 1628L
      //Input_1_String: 37
      //Input_2_String: 37
      //Input_3_Integer: (-1)
      //Input_4_Integer: (-1)
      //Assert: assertNull(method_result);
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      Long long0 = new Long(1628L);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      List<UmsResource> list0 = umsResourceServiceImpl0.list(long0, "37", "37", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listAll_7()  throws Throwable  {
      //caseID:38fd90d99c515f268117c7c2423ab81a
      //CoveredLines: [21, 71]
      //Assert: assertNull(method_result);
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      
      //Call method: listAll
      List<UmsResource> list0 = umsResourceServiceImpl0.listAll();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_8()  throws Throwable  {
      //caseID:be9b4ffaafcdad01a825c390f5bf5a68
      //CoveredLines: [21, 34, 35, 36, 37]
      //Input_0_Long: (-1L)
      //Input_1_UmsResource: {}
      //Assert: assertEquals(0, method_result);
      
      UmsResourceServiceImpl umsResourceServiceImpl0 = new UmsResourceServiceImpl();
      //mock umsResourceMapper0
      UmsResourceMapper umsResourceMapper0 = mock(UmsResourceMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsResourceServiceImpl.class, umsResourceServiceImpl0, "resourceMapper", (Object) umsResourceMapper0);
      Long long0 = new Long((-1L));
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = umsResourceServiceImpl0.update(long0, umsResource0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
