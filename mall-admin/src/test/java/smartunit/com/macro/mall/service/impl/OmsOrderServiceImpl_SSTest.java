/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.OmsOrderDao;
import com.macro.mall.dao.OmsOrderOperateHistoryDao;
import com.macro.mall.dto.OmsMoneyInfoParam;
import com.macro.mall.dto.OmsOrderDeliveryParam;
import com.macro.mall.dto.OmsOrderDetail;
import com.macro.mall.dto.OmsOrderQueryParam;
import com.macro.mall.dto.OmsReceiverInfoParam;
import com.macro.mall.mapper.OmsOrderMapper;
import com.macro.mall.mapper.OmsOrderOperateHistoryMapper;
import com.macro.mall.model.OmsOrder;
import com.macro.mall.service.impl.OmsOrderServiceImpl;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsOrderServiceImpl_SSTest extends OmsOrderServiceImpl_SSTest_scaffolding {
// allCoveredLines:[25, 37, 38, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151]

  @Test(timeout = 4000)
  public void test_close_0()  throws Throwable  {
      //caseID:8e8e651692f3adcd2caca0e5fbffdd51
      //CoveredLines: [25, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
      //Input_0_List<Long>: stack0
      //Input_1_String: 1.0
      //Assert: assertEquals(0, method_result);
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      //mock omsOrderOperateHistoryDao0
      OmsOrderOperateHistoryDao omsOrderOperateHistoryDao0 = mock(OmsOrderOperateHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryDao", (Object) omsOrderOperateHistoryDao0);
      Stack<Long> stack0 = new Stack<Long>();
      Long long0 = new Long(532L);
      
      stack0.add(long0);
      
      //Call method: close
      int int0 = omsOrderServiceImpl0.close(stack0, "1.0");
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:db3c8c32c637d898dccbbeacb0c31f1d
      //CoveredLines: [25, 82, 83, 84, 85, 86]
      //Input_0_List<Long>: stack0
      //Assert: assertEquals(0, method_result);
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(omsOrderMapper0).updateByExampleSelective(any(com.macro.mall.model.OmsOrder.class) , any(com.macro.mall.model.OmsOrderExample.class));
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      int int0 = omsOrderServiceImpl0.delete(stack0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delivery_2()  throws Throwable  {
      //caseID:f7373e08f848245432c26173796f59e1
      //CoveredLines: [25, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57]
      //Input_0_List<OmsOrderDeliveryParam>: stack0
      //Assert: assertEquals(0, method_result);
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      //mock omsOrderDao0
      OmsOrderDao omsOrderDao0 = mock(OmsOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderOperateHistoryDao0
      OmsOrderOperateHistoryDao omsOrderOperateHistoryDao0 = mock(OmsOrderOperateHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryDao", (Object) omsOrderOperateHistoryDao0);
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderDao", (Object) omsOrderDao0);
      Stack<OmsOrderDeliveryParam> stack0 = new Stack<OmsOrderDeliveryParam>();
      //mock omsOrderDeliveryParam0
      OmsOrderDeliveryParam omsOrderDeliveryParam0 = mock(OmsOrderDeliveryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(omsOrderDeliveryParam0);
      
      //Call method: delivery
      int int0 = omsOrderServiceImpl0.delivery(stack0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_detail_3()  throws Throwable  {
      //caseID:00fd531cc8f35d396f15c28b7fe63a91
      //CoveredLines: [25, 91]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      //mock omsOrderDao0
      OmsOrderDao omsOrderDao0 = mock(OmsOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderDao", (Object) omsOrderDao0);
      Long long0 = new Long(0L);
      
      //Call method: detail
      OmsOrderDetail omsOrderDetail0 = omsOrderServiceImpl0.detail(long0);
      
      //Test Result Assert
      assertNull(omsOrderDetail0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:51be0a2abdaad0854f48584a37d8f9c7
      //CoveredLines: [25, 37, 38]
      //Input_0_OmsOrderQueryParam: {}
      //Input_1_Integer: 23
      //Input_2_Integer: 23
      //Assert: assertEquals(0, method_result.size());
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      LinkedList<OmsOrder> linkedList0 = new LinkedList<OmsOrder>();
      //mock omsOrderDao0
      OmsOrderDao omsOrderDao0 = mock(OmsOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(omsOrderDao0).getList(any(com.macro.mall.dto.OmsOrderQueryParam.class));
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderDao", (Object) omsOrderDao0);
      //mock omsOrderQueryParam0
      OmsOrderQueryParam omsOrderQueryParam0 = mock(OmsOrderQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Integer integer0 = new Integer(23);
      
      //Call method: list
      List<OmsOrder> list0 = omsOrderServiceImpl0.list(omsOrderQueryParam0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_updateMoneyInfo_5()  throws Throwable  {
      //caseID:c52983a57f1c78afa9c6251c889083f0
      //CoveredLines: [25, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134]
      //Input_0_OmsMoneyInfoParam: {}
      //Assert: assertEquals(0, method_result);
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderOperateHistoryMapper0
      OmsOrderOperateHistoryMapper omsOrderOperateHistoryMapper0 = mock(OmsOrderOperateHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryMapper", (Object) omsOrderOperateHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      //mock omsMoneyInfoParam0
      OmsMoneyInfoParam omsMoneyInfoParam0 = mock(OmsMoneyInfoParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateMoneyInfo
      int int0 = omsOrderServiceImpl0.updateMoneyInfo(omsMoneyInfoParam0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateNote_6()  throws Throwable  {
      //caseID:b66a543dae62402446ac1df023a90275
      //CoveredLines: [25, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151]
      //Input_0_Long: 1004L
      //Input_1_String: com.macro.mall.service.impl.OmsOrderServiceImpl
      //Input_2_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderOperateHistoryMapper0
      OmsOrderOperateHistoryMapper omsOrderOperateHistoryMapper0 = mock(OmsOrderOperateHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryMapper", (Object) omsOrderOperateHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(1004L);
      Integer integer0 = new Integer(0);
      
      //Call method: updateNote
      int int0 = omsOrderServiceImpl0.updateNote(long0, "com.macro.mall.service.impl.OmsOrderServiceImpl", integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateReceiverInfo_7()  throws Throwable  {
      //caseID:3b1d82d834ab7331702c6549dd1f1178
      //CoveredLines: [25, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115]
      //Input_0_OmsReceiverInfoParam: {}
      //Assert: assertEquals(0, method_result);
      
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();
      //mock omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsOrderOperateHistoryMapper0
      OmsOrderOperateHistoryMapper omsOrderOperateHistoryMapper0 = mock(OmsOrderOperateHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryMapper", (Object) omsOrderOperateHistoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      //mock omsReceiverInfoParam0
      OmsReceiverInfoParam omsReceiverInfoParam0 = mock(OmsReceiverInfoParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateReceiverInfo
      int int0 = omsOrderServiceImpl0.updateReceiverInfo(omsReceiverInfoParam0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
