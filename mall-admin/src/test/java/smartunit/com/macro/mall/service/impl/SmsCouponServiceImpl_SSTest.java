/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.SmsCouponDao;
import com.macro.mall.dao.SmsCouponProductCategoryRelationDao;
import com.macro.mall.dao.SmsCouponProductRelationDao;
import com.macro.mall.dto.SmsCouponParam;
import com.macro.mall.mapper.SmsCouponMapper;
import com.macro.mall.mapper.SmsCouponProductCategoryRelationMapper;
import com.macro.mall.mapper.SmsCouponProductRelationMapper;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.model.SmsCouponProductCategoryRelation;
import com.macro.mall.model.SmsCouponProductRelation;
import com.macro.mall.service.impl.SmsCouponServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsCouponServiceImpl_SSTest extends SmsCouponServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 58, 64, 66, 68, 69, 73, 74, 75, 76, 79, 80, 81, 82, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 109, 110, 111, 112, 114, 115, 117, 118, 123]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:149ecea72fa1fecd71ebc12e239af793
      //CoveredLines: [24, 39, 40, 41, 43, 45, 46, 47, 48, 49, 52, 58]
      //Input_0_SmsCouponParam: {getUseType=2, getPublishCount=2, getProductRelationList=stack0}
      //Assert: assertEquals(2, method_result);
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      //mock smsCouponProductRelationDao0
      SmsCouponProductRelationDao smsCouponProductRelationDao0 = mock(SmsCouponProductRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(smsCouponMapper0).insert(any(com.macro.mall.model.SmsCoupon.class));
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productRelationDao", (Object) smsCouponProductRelationDao0);
      Integer integer0 = new Integer(2);
      Stack<SmsCouponProductRelation> stack0 = new Stack<SmsCouponProductRelation>();
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      stack0.add(smsCouponProductRelation0);
      //mock smsCouponParam0
      SmsCouponParam smsCouponParam0 = mock(SmsCouponParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponParam0).getProductRelationList();
      doReturn(integer0).when(smsCouponParam0).getPublishCount();
      doReturn(integer0).when(smsCouponParam0).getUseType();
      
      //Call method: create
      int int0 = smsCouponServiceImpl0.create(smsCouponParam0);
      
      //Test Result Assert
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:c1ccf41ad15163b57f407144788cff1b
      //CoveredLines: [24, 39, 40, 41, 43, 45, 52, 53, 54, 55, 56, 58]
      //Input_0_SmsCouponParam: {getUseType=1 1, getPublishCount=1, getProductCategoryRelationList=linkedList0}
      //Assert: assertEquals(1, method_result);
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      //mock smsCouponProductCategoryRelationDao0
      SmsCouponProductCategoryRelationDao smsCouponProductCategoryRelationDao0 = mock(SmsCouponProductCategoryRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsCouponMapper0).insert(any(com.macro.mall.model.SmsCoupon.class));
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productCategoryRelationDao", (Object) smsCouponProductCategoryRelationDao0);
      Integer integer0 = new Integer(1);
      LinkedList<SmsCouponProductCategoryRelation> linkedList0 = new LinkedList<SmsCouponProductCategoryRelation>();
      //mock smsCouponProductCategoryRelation0
      SmsCouponProductCategoryRelation smsCouponProductCategoryRelation0 = mock(SmsCouponProductCategoryRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      linkedList0.add(smsCouponProductCategoryRelation0);
      //mock smsCouponParam0
      SmsCouponParam smsCouponParam0 = mock(SmsCouponParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsCouponParam0).getProductCategoryRelationList();
      doReturn(integer0).when(smsCouponParam0).getPublishCount();
      doReturn(integer0, integer0).when(smsCouponParam0).getUseType();
      
      //Call method: create
      int int0 = smsCouponServiceImpl0.create(smsCouponParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:24e1cc9d44094af4341954cb3e5c1a90
      //CoveredLines: [24, 64, 66, 68, 69, 73, 74, 75, 76, 79, 80, 81, 82]
      //Input_0_Long: 1L
      //Assert: assertEquals(0, method_result);
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCouponProductCategoryRelationMapper0
      SmsCouponProductCategoryRelationMapper smsCouponProductCategoryRelationMapper0 = mock(SmsCouponProductCategoryRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCouponProductRelationMapper0
      SmsCouponProductRelationMapper smsCouponProductRelationMapper0 = mock(SmsCouponProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productRelationMapper", (Object) smsCouponProductRelationMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productCategoryRelationMapper", (Object) smsCouponProductCategoryRelationMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      Long long0 = new Long(1L);
      
      //Call method: delete
      int int0 = smsCouponServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_3()  throws Throwable  {
      //caseID:d5eb80463d84614d6594448ad31cb723
      //CoveredLines: [24, 123]
      //Input_0_Long: 597L
      //Assert: assertNull(method_result);
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      //mock smsCouponDao0
      SmsCouponDao smsCouponDao0 = mock(SmsCouponDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponDao", (Object) smsCouponDao0);
      Long long0 = new Long(597L);
      
      //Call method: getItem
      SmsCouponParam smsCouponParam0 = smsCouponServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(smsCouponParam0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:257be641ca15dae57c1a72367ac2d3e1
      //CoveredLines: [24, 109, 110, 111, 112, 114, 117, 118]
      //Input_0_String: "sp"
      //Input_1_Integer: null
      //Input_2_Integer: 28
      //Input_3_Integer: 28
      //Assert: assertEquals(0, method_result.size());
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      Stack<SmsCoupon> stack0 = new Stack<SmsCoupon>();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponMapper0).selectByExample(any(com.macro.mall.model.SmsCouponExample.class));
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      Integer integer0 = new Integer(28);
      
      //Call method: list
      List<SmsCoupon> list0 = smsCouponServiceImpl0.list("sp", (Integer) null, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_5()  throws Throwable  {
      //caseID:aef46dcf0dedab021e2eb4e982ab6857
      //CoveredLines: [24, 109, 110, 111, 114, 115, 117, 118]
      //Input_0_String: ""
      //Input_1_Integer: 1504
      //Input_2_Integer: 1504
      //Input_3_Integer: 1504
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      Stack<SmsCoupon> stack0 = new Stack<SmsCoupon>();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponMapper0).selectByExample(any(com.macro.mall.model.SmsCouponExample.class));
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      Integer integer0 = new Integer(1504);
      
      //Call method: list
      List<SmsCoupon> list0 = smsCouponServiceImpl0.list("", integer0, integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_6()  throws Throwable  {
      //caseID:433adc902ad63ab44291b76af712e649
      //CoveredLines: [24, 109, 110, 111, 112, 114, 115, 117, 118]
      //Input_0_String: "2"
      //Input_1_Integer: 0
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertNull(method_result);
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsCoupon> list0 = smsCouponServiceImpl0.list("2", integer0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_7()  throws Throwable  {
      //caseID:9368db70a65064bd87d7d7c6bc760afe
      //CoveredLines: [24, 79, 80, 81, 82, 86, 87, 89, 90, 91, 92, 93, 94, 97, 104]
      //Input_0_Long: 2
      //Input_1_SmsCouponParam: {getUseType=2 2, getProductRelationList=arrayList0 arrayList0}
      //Assert: assertEquals(2, method_result);
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      //mock smsCouponProductRelationDao0
      SmsCouponProductRelationDao smsCouponProductRelationDao0 = mock(SmsCouponProductRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(smsCouponProductRelationDao0).insertList(ArgumentMatchers.<com.macro.mall.model.SmsCouponProductRelation>anyList());
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(smsCouponMapper0).updateByPrimaryKey(any(com.macro.mall.model.SmsCoupon.class));
      //mock smsCouponProductRelationMapper0
      SmsCouponProductRelationMapper smsCouponProductRelationMapper0 = mock(SmsCouponProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(smsCouponProductRelationMapper0).deleteByExample(any(com.macro.mall.model.SmsCouponProductRelationExample.class));
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productRelationMapper", (Object) smsCouponProductRelationMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productRelationDao", (Object) smsCouponProductRelationDao0);
      Long long0 = new Long(2);
      Integer integer0 = new Integer(2);
      ArrayList<SmsCouponProductRelation> arrayList0 = new ArrayList<SmsCouponProductRelation>();
      //mock smsCouponProductRelation0
      SmsCouponProductRelation smsCouponProductRelation0 = mock(SmsCouponProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      arrayList0.add(smsCouponProductRelation0);
      //mock smsCouponParam0
      SmsCouponParam smsCouponParam0 = mock(SmsCouponParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0, arrayList0).when(smsCouponParam0).getProductRelationList();
      doReturn(integer0, integer0).when(smsCouponParam0).getUseType();
      
      //Call method: update
      int int0 = smsCouponServiceImpl0.update(long0, smsCouponParam0);
      
      //Test Result Assert
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test_update_8()  throws Throwable  {
      //caseID:9d0ae4e4b847dc1958ab83e3e1d204f3
      //CoveredLines: [24, 73, 74, 75, 76, 86, 87, 89, 97, 98, 99, 100, 101, 102, 104]
      //Input_0_Long: 1
      //Input_1_SmsCouponParam: {getUseType=1 1, getProductCategoryRelationList=stack0}
      //Assert: assertEquals(1, method_result);
      
      SmsCouponServiceImpl smsCouponServiceImpl0 = new SmsCouponServiceImpl();
      //mock smsCouponProductCategoryRelationDao0
      SmsCouponProductCategoryRelationDao smsCouponProductCategoryRelationDao0 = mock(SmsCouponProductCategoryRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock smsCouponMapper0
      SmsCouponMapper smsCouponMapper0 = mock(SmsCouponMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsCouponMapper0).updateByPrimaryKey(any(com.macro.mall.model.SmsCoupon.class));
      //mock smsCouponProductCategoryRelationMapper0
      SmsCouponProductCategoryRelationMapper smsCouponProductCategoryRelationMapper0 = mock(SmsCouponProductCategoryRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productCategoryRelationMapper", (Object) smsCouponProductCategoryRelationMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "couponMapper", (Object) smsCouponMapper0);
      PrivateAccess.setVariable((Class<?>) SmsCouponServiceImpl.class, smsCouponServiceImpl0, "productCategoryRelationDao", (Object) smsCouponProductCategoryRelationDao0);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(1);
      Stack<SmsCouponProductCategoryRelation> stack0 = new Stack<SmsCouponProductCategoryRelation>();
      //mock smsCouponProductCategoryRelation0
      SmsCouponProductCategoryRelation smsCouponProductCategoryRelation0 = mock(SmsCouponProductCategoryRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      stack0.add(smsCouponProductCategoryRelation0);
      //mock smsCouponParam0
      SmsCouponParam smsCouponParam0 = mock(SmsCouponParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponParam0).getProductCategoryRelationList();
      doReturn(integer0, integer0).when(smsCouponParam0).getUseType();
      
      //Call method: update
      int int0 = smsCouponServiceImpl0.update(long0, smsCouponParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }
}
