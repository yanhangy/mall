/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsFlashPromotionMapper;
import com.macro.mall.model.SmsFlashPromotion;
import com.macro.mall.service.impl.SmsFlashPromotionServiceImpl;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsFlashPromotionServiceImpl_SSTest extends SmsFlashPromotionServiceImpl_SSTest_scaffolding {
// allCoveredLines:[20, 26, 27, 32, 33, 38, 43, 44, 45, 46, 51, 56, 57, 58, 59, 61]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:bd201650cefcc4607018438ddc1365e6
      //CoveredLines: [20, 26, 27]
      //Input_0_SmsFlashPromotion: {}
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionServiceImpl smsFlashPromotionServiceImpl0 = new SmsFlashPromotionServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionServiceImpl.class, smsFlashPromotionServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = smsFlashPromotionServiceImpl0.create(smsFlashPromotion0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:0c2d8fd23c3a29c667e670abd7159674
      //CoveredLines: [20, 38]
      //Input_0_Long: 2712L
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionServiceImpl smsFlashPromotionServiceImpl0 = new SmsFlashPromotionServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionServiceImpl.class, smsFlashPromotionServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      Long long0 = new Long(2712L);
      
      //Call method: delete
      int int0 = smsFlashPromotionServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:dbe07cb5fb0297e004075cde7ae7b3d5
      //CoveredLines: [20, 51]
      //Input_0_Long: 2691L
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionServiceImpl smsFlashPromotionServiceImpl0 = new SmsFlashPromotionServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionServiceImpl.class, smsFlashPromotionServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      Long long0 = new Long(2691L);
      
      //Call method: getItem
      SmsFlashPromotion smsFlashPromotion0 = smsFlashPromotionServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(smsFlashPromotion0);
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:3aedb713b94fe9b05143c26b10d1d315
      //CoveredLines: [20, 56, 57, 58, 61]
      //Input_0_String: 
      //Input_1_Integer: 1
      //Input_2_Integer: 1
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsFlashPromotionServiceImpl smsFlashPromotionServiceImpl0 = new SmsFlashPromotionServiceImpl();
      Vector<SmsFlashPromotion> vector0 = new Vector<SmsFlashPromotion>();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(smsFlashPromotionMapper0).selectByExample(any(com.macro.mall.model.SmsFlashPromotionExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionServiceImpl.class, smsFlashPromotionServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      Integer integer0 = new Integer(1);
      
      //Call method: list
      List<SmsFlashPromotion> list0 = smsFlashPromotionServiceImpl0.list("", integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:f28ae3f65e86476743a7a423e8f19294
      //CoveredLines: [20, 56, 57, 58, 59, 61]
      //Input_0_String: 8F@:P
      //Input_1_Integer: 41
      //Input_2_Integer: 41
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionServiceImpl smsFlashPromotionServiceImpl0 = new SmsFlashPromotionServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionServiceImpl.class, smsFlashPromotionServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      Integer integer0 = new Integer(41);
      
      //Call method: list
      List<SmsFlashPromotion> list0 = smsFlashPromotionServiceImpl0.list("8F@:P", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:83df60ec7947f15bdcc4fb5823b8e239
      //CoveredLines: [20, 32, 33]
      //Input_0_Long: (-1L)
      //Input_1_SmsFlashPromotion: {}
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionServiceImpl smsFlashPromotionServiceImpl0 = new SmsFlashPromotionServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionServiceImpl.class, smsFlashPromotionServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      Long long0 = new Long((-1L));
      //mock smsFlashPromotion0
      SmsFlashPromotion smsFlashPromotion0 = mock(SmsFlashPromotion.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = smsFlashPromotionServiceImpl0.update(long0, smsFlashPromotion0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateStatus_6()  throws Throwable  {
      //caseID:741e73945623871f29d8712627fbd676
      //CoveredLines: [20, 43, 44, 45, 46]
      //Input_0_Long: 421
      //Input_1_Integer: 421
      //Assert: assertEquals(421, method_result);
      
      SmsFlashPromotionServiceImpl smsFlashPromotionServiceImpl0 = new SmsFlashPromotionServiceImpl();
      //mock smsFlashPromotionMapper0
      SmsFlashPromotionMapper smsFlashPromotionMapper0 = mock(SmsFlashPromotionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(421).when(smsFlashPromotionMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsFlashPromotion.class));
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionServiceImpl.class, smsFlashPromotionServiceImpl0, "flashPromotionMapper", (Object) smsFlashPromotionMapper0);
      Long long0 = new Long(421);
      Integer integer0 = new Integer(421);
      
      //Call method: updateStatus
      int int0 = smsFlashPromotionServiceImpl0.updateStatus(long0, integer0);
      
      //Test Result Assert
      assertEquals(421, int0);
  }
}
