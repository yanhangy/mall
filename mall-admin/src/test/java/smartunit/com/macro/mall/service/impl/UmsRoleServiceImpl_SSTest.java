/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.UmsRoleDao;
import com.macro.mall.mapper.UmsRoleMapper;
import com.macro.mall.mapper.UmsRoleMenuRelationMapper;
import com.macro.mall.mapper.UmsRoleResourceRelationMapper;
import com.macro.mall.model.UmsMenu;
import com.macro.mall.model.UmsResource;
import com.macro.mall.model.UmsRole;
import com.macro.mall.service.UmsAdminCacheService;
import com.macro.mall.service.impl.UmsRoleServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsRoleServiceImpl_SSTest extends UmsRoleServiceImpl_SSTest_scaffolding {
// allCoveredLines:[23, 36, 37, 38, 39, 44, 45, 50, 51, 52, 53, 54, 59, 64, 65, 66, 67, 69, 74, 79, 84, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117]

  @Test(timeout = 4000)
  public void test_allocMenu_00()  throws Throwable  {
      //caseID:6f689475ba4a6297409b3b90475c6f72
      //CoveredLines: [23, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100]
      //Input_0_Long: 1000L
      //Input_1_List<Long>: linkedList0
      //Assert: assertEquals(1, method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleMenuRelationMapper0
      UmsRoleMenuRelationMapper umsRoleMenuRelationMapper0 = mock(UmsRoleMenuRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleMenuRelationMapper", (Object) umsRoleMenuRelationMapper0);
      Long long0 = new Long(1000L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      linkedList0.add(long0);
      
      //Call method: allocMenu
      int int0 = umsRoleServiceImpl0.allocMenu(long0, linkedList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_allocResource_01()  throws Throwable  {
      //caseID:7b841b31f432d0df54a79db0ea83074e
      //CoveredLines: [23, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117]
      //Input_0_Long: (-1)
      //Input_1_List<Long>: arrayList0
      //Assert: assertEquals(1, method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleResourceRelationMapper0
      UmsRoleResourceRelationMapper umsRoleResourceRelationMapper0 = mock(UmsRoleResourceRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(umsRoleResourceRelationMapper0).deleteByExample(any(com.macro.mall.model.UmsRoleResourceRelationExample.class));
      doReturn(1).when(umsRoleResourceRelationMapper0).insert(any(com.macro.mall.model.UmsRoleResourceRelation.class));
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleResourceRelationMapper", (Object) umsRoleResourceRelationMapper0);
      Long long0 = new Long((-1));
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      arrayList0.add(long0);
      
      //Call method: allocResource
      int int0 = umsRoleServiceImpl0.allocResource(long0, arrayList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_create_02()  throws Throwable  {
      //caseID:cb0decd9935a426c017e809b7fe7718f
      //CoveredLines: [23, 36, 37, 38, 39]
      //Input_0_UmsRole: {}
      //Assert: assertEquals(0, method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleMapper0
      UmsRoleMapper umsRoleMapper0 = mock(UmsRoleMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleMapper", (Object) umsRoleMapper0);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = umsRoleServiceImpl0.create(umsRole0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_03()  throws Throwable  {
      //caseID:055d6e962ebc00c0d9749b47ddd246fc
      //CoveredLines: [23, 50, 51, 52, 53, 54]
      //Input_0_List<Long>: arrayList0
      //Assert: assertEquals(0, method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleMapper0
      UmsRoleMapper umsRoleMapper0 = mock(UmsRoleMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminCacheService0
      UmsAdminCacheService umsAdminCacheService0 = mock(UmsAdminCacheService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "adminCacheService", (Object) umsAdminCacheService0);
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleMapper", (Object) umsRoleMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      //Call method: delete
      int int0 = umsRoleServiceImpl0.delete(arrayList0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getMenuList_04()  throws Throwable  {
      //caseID:7a16a588082454a1d03c2aef3e30f3d2
      //CoveredLines: [23, 74]
      //Input_0_Long: 1L
      //Assert: assertNull(method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleDao0
      UmsRoleDao umsRoleDao0 = mock(UmsRoleDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleDao", (Object) umsRoleDao0);
      Long long0 = new Long(1L);
      
      //Call method: getMenuList
      List<UmsMenu> list0 = umsRoleServiceImpl0.getMenuList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_05()  throws Throwable  {
      //caseID:bdcb363bb3f1991d888463acdecc140a
      //CoveredLines: [23, 59]
      //Assert: assertNull(method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleMapper0
      UmsRoleMapper umsRoleMapper0 = mock(UmsRoleMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleMapper", (Object) umsRoleMapper0);
      
      //Call method: list
      List<UmsRole> list0 = umsRoleServiceImpl0.list();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_list_06()  throws Throwable  {
      //caseID:b5f3688ed58567c5c8437d9b9d72fda2
      //CoveredLines: [23, 64, 65, 66, 69]
      //Input_0_String: 
      //Input_1_Integer: 1
      //Input_2_Integer: 1
      //Assert: assertEquals(0, method_result.size());
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      Stack<UmsRole> stack0 = new Stack<UmsRole>();
      //mock umsRoleMapper0
      UmsRoleMapper umsRoleMapper0 = mock(UmsRoleMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsRoleMapper0).selectByExample(any(com.macro.mall.model.UmsRoleExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleMapper", (Object) umsRoleMapper0);
      Integer integer0 = new Integer(1);
      
      //Call method: list
      List<UmsRole> list0 = umsRoleServiceImpl0.list("", integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test_list_07()  throws Throwable  {
      //caseID:03bdf5373d68d6b8c094a85a751ee39c
      //CoveredLines: [23, 64, 65, 66, 67, 69]
      //Input_0_String: 3:+@x9/VJ0B^zy(
      //Input_1_Integer: 2934
      //Input_2_Integer: 2934
      //Assert: assertNull(method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleMapper0
      UmsRoleMapper umsRoleMapper0 = mock(UmsRoleMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleMapper", (Object) umsRoleMapper0);
      Integer integer0 = new Integer(2934);
      
      //Call method: list
      List<UmsRole> list0 = umsRoleServiceImpl0.list("3:+@x9/VJ0B^zy(", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listMenu_08()  throws Throwable  {
      //caseID:181e27c4247fdb545eebd1306f1b7438
      //CoveredLines: [23, 79]
      //Input_0_Long: 1973L
      //Assert: assertNull(method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleDao0
      UmsRoleDao umsRoleDao0 = mock(UmsRoleDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleDao", (Object) umsRoleDao0);
      Long long0 = new Long(1973L);
      
      //Call method: listMenu
      List<UmsMenu> list0 = umsRoleServiceImpl0.listMenu(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listResource_09()  throws Throwable  {
      //caseID:cc28420e9605b3eef2b1d08afe873b03
      //CoveredLines: [23, 84]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleDao0
      UmsRoleDao umsRoleDao0 = mock(UmsRoleDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleDao", (Object) umsRoleDao0);
      Long long0 = new Long(0L);
      
      //Call method: listResource
      List<UmsResource> list0 = umsRoleServiceImpl0.listResource(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_10()  throws Throwable  {
      //caseID:ba64b117a431d3f6491404888a3600fb
      //CoveredLines: [23, 44, 45]
      //Input_0_Long: 0L
      //Input_1_UmsRole: {}
      //Assert: assertEquals(0, method_result);
      
      UmsRoleServiceImpl umsRoleServiceImpl0 = new UmsRoleServiceImpl();
      //mock umsRoleMapper0
      UmsRoleMapper umsRoleMapper0 = mock(UmsRoleMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsRoleServiceImpl.class, umsRoleServiceImpl0, "roleMapper", (Object) umsRoleMapper0);
      Long long0 = new Long(0L);
      //mock umsRole0
      UmsRole umsRole0 = mock(UmsRole.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = umsRoleServiceImpl0.update(long0, umsRole0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
