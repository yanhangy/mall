/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.PmsProductCategoryAttributeRelationDao;
import com.macro.mall.dao.PmsProductCategoryDao;
import com.macro.mall.dto.PmsProductCategoryParam;
import com.macro.mall.dto.PmsProductCategoryWithChildrenItem;
import com.macro.mall.mapper.PmsProductCategoryAttributeRelationMapper;
import com.macro.mall.mapper.PmsProductCategoryMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.service.impl.PmsProductCategoryServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductCategoryServiceImpl_SSTest extends PmsProductCategoryServiceImpl_SSTest_scaffolding {
// allCoveredLines:[26, 39, 40, 41, 43, 44, 46, 47, 48, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 100, 101, 106, 111, 116, 117, 118, 119, 120, 125, 126, 127, 128, 129, 134, 142, 143, 146, 147, 148, 150, 153]

  @Test(timeout = 4000)
  public void test_create_00()  throws Throwable  {
      //caseID:567502cfa57d3a8037980b2f48ced306
      //CoveredLines: [26, 39, 40, 41, 43, 44, 46, 47, 50, 142, 146, 147, 150, 153]
      //Input_0_PmsProductCategoryParam: {getSort=(-1), getName=\"2146491280\", getProductUnit=\"2146491280\", getShowStatus=(-1), getNavStatus=(-1), getKeywords=\"2146491280\", getDescription=\"2146491280\", getParentId=(-1), getIcon=\"2146491280\", getProductAttributeIdList=stack0}
      //Assert: assertEquals((-1), method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsProductCategoryMapper0).insertSelective(any(com.macro.mall.model.PmsProductCategory.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Integer integer0 = new Integer((-1));
      Long long0 = new Long((-1));
      Stack<Long> stack0 = new Stack<Long>();
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2146491280").when(pmsProductCategoryParam0).getDescription();
      doReturn("2146491280").when(pmsProductCategoryParam0).getIcon();
      doReturn("2146491280").when(pmsProductCategoryParam0).getKeywords();
      doReturn("2146491280").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn(stack0).when(pmsProductCategoryParam0).getProductAttributeIdList();
      doReturn("2146491280").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: create
      int int0 = pmsProductCategoryServiceImpl0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_create_01()  throws Throwable  {
      //caseID:c2166465bc35e54c0e1a3f082b8cc1ca
      //CoveredLines: [26, 39, 40, 41, 43, 44, 46, 47, 48, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 142, 146, 147, 148, 153]
      //Input_0_PmsProductCategoryParam: {getSort=0, getName=\"2146491280\", getProductUnit=\"2146491280\", getShowStatus=0, getNavStatus=0, getKeywords=\"2146491280\", getDescription=\"2146491280\", getParentId=(-1), getIcon=\"2146491280\", getProductAttributeIdList=stack0}
      //Assert: assertEquals(1, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryAttributeRelationDao0
      PmsProductCategoryAttributeRelationDao pmsProductCategoryAttributeRelationDao0 = mock(PmsProductCategoryAttributeRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(pmsProductCategoryAttributeRelationDao0).insertList(ArgumentMatchers.<com.macro.mall.model.PmsProductCategoryAttributeRelation>anyList());
      Integer integer0 = new Integer(0);
      //mock pmsProductCategory0
      PmsProductCategory pmsProductCategory0 = mock(PmsProductCategory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsProductCategory0).getLevel();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(pmsProductCategoryMapper0).insertSelective(any(com.macro.mall.model.PmsProductCategory.class));
      doReturn(pmsProductCategory0).when(pmsProductCategoryMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationDao", (Object) pmsProductCategoryAttributeRelationDao0);
      Long long0 = new Long((-1));
      Stack<Long> stack0 = new Stack<Long>();
      
      stack0.add(long0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2146491280").when(pmsProductCategoryParam0).getDescription();
      doReturn("2146491280").when(pmsProductCategoryParam0).getIcon();
      doReturn("2146491280").when(pmsProductCategoryParam0).getKeywords();
      doReturn("2146491280").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn(stack0).when(pmsProductCategoryParam0).getProductAttributeIdList();
      doReturn("2146491280").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: create
      int int0 = pmsProductCategoryServiceImpl0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_02()  throws Throwable  {
      //caseID:44561f6de6f6488b565fbc36008555b8
      //CoveredLines: [26, 106]
      //Input_0_Long: (-1081L)
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long((-1081L));
      
      //Call method: delete
      int int0 = pmsProductCategoryServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_03()  throws Throwable  {
      //caseID:8d9fdca7a6e4f3fc1bfda7e825cbf1fa
      //CoveredLines: [26, 111]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getItem
      PmsProductCategory pmsProductCategory0 = pmsProductCategoryServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(pmsProductCategory0);
  }

  @Test(timeout = 4000)
  public void test_getList_04()  throws Throwable  {
      //caseID:5d6ccd0a274fb716b13f17b4db705a58
      //CoveredLines: [26, 97, 98, 99, 100, 101]
      //Input_0_Long: 56L
      //Input_1_Integer: 1
      //Input_2_Integer: 1
      //Assert: assertNull(method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long(56L);
      Integer integer0 = new Integer(1);
      
      //Call method: getList
      List<PmsProductCategory> list0 = pmsProductCategoryServiceImpl0.getList(long0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listWithChildren_05()  throws Throwable  {
      //caseID:7ddbcc3a6151cf7d581379d920b2e1de
      //CoveredLines: [26, 134]
      //Assert: assertNull(method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryDao0
      PmsProductCategoryDao pmsProductCategoryDao0 = mock(PmsProductCategoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryDao", (Object) pmsProductCategoryDao0);
      
      //Call method: listWithChildren
      List<PmsProductCategoryWithChildrenItem> list0 = pmsProductCategoryServiceImpl0.listWithChildren();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_06()  throws Throwable  {
      //caseID:d149a818e76fe837aa56e7e9155df6a7
      //CoveredLines: [26, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 88, 89, 90, 92, 142, 146, 147, 150, 153]
      //Input_0_Long: 1702L
      //Input_1_PmsProductCategoryParam: {getSort=2296, getName=\"-1073741823\", getProductUnit=\"equals\", getShowStatus=2296, getNavStatus=2296, getKeywords=\"sort desc\", getDescription=\"executor\", getParentId=1702L, getIcon=\"sort desc\"}
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryAttributeRelationMapper0
      PmsProductCategoryAttributeRelationMapper pmsProductCategoryAttributeRelationMapper0 = mock(PmsProductCategoryAttributeRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationMapper", (Object) pmsProductCategoryAttributeRelationMapper0);
      Long long0 = new Long(1702L);
      Integer integer0 = new Integer(2296);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("executor").when(pmsProductCategoryParam0).getDescription();
      doReturn("sort desc").when(pmsProductCategoryParam0).getIcon();
      doReturn("sort desc").when(pmsProductCategoryParam0).getKeywords();
      doReturn("-1073741823").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn("equals").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: update
      int int0 = pmsProductCategoryServiceImpl0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_07()  throws Throwable  {
      //caseID:f657e935d9e6eac977f6f82f05f76387
      //CoveredLines: [26, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 92, 142, 143, 153]
      //Input_0_Long: 0L
      //Input_1_PmsProductCategoryParam: {getSort=1423, getName=\"com.macro.mall.service.impl.PmsProductCategoryServiceImpl\", getProductUnit=\"2142442606\", getShowStatus=1423, getNavStatus=1423, getKeywords=\"':fWx;+J|mb%6,\", getDescription=\"com.macro.mall.service.impl.PmsProductCategoryServiceImpl\", getParentId=0L, getIcon=\"2142442606\", getProductAttributeIdList=arrayList0 arrayList0}
      //Assert: assertEquals(74, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryAttributeRelationDao0
      PmsProductCategoryAttributeRelationDao pmsProductCategoryAttributeRelationDao0 = mock(PmsProductCategoryAttributeRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsProductCategoryAttributeRelationDao0).insertList(ArgumentMatchers.<com.macro.mall.model.PmsProductCategoryAttributeRelation>anyList());
      //mock pmsProductCategoryAttributeRelationMapper0
      PmsProductCategoryAttributeRelationMapper pmsProductCategoryAttributeRelationMapper0 = mock(PmsProductCategoryAttributeRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1423).when(pmsProductCategoryAttributeRelationMapper0).deleteByExample(any(com.macro.mall.model.PmsProductCategoryAttributeRelationExample.class));
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(74).when(pmsProductCategoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsProductCategory.class));
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2070787803).when(pmsProductMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsProduct.class) , any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationMapper", (Object) pmsProductCategoryAttributeRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationDao", (Object) pmsProductCategoryAttributeRelationDao0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1423);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      arrayList0.add(long0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.macro.mall.service.impl.PmsProductCategoryServiceImpl").when(pmsProductCategoryParam0).getDescription();
      doReturn("2142442606").when(pmsProductCategoryParam0).getIcon();
      doReturn("':fWx;+J|mb%6,").when(pmsProductCategoryParam0).getKeywords();
      doReturn("com.macro.mall.service.impl.PmsProductCategoryServiceImpl").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn(arrayList0, arrayList0).when(pmsProductCategoryParam0).getProductAttributeIdList();
      doReturn("2142442606").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: update
      int int0 = pmsProductCategoryServiceImpl0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test_update_08()  throws Throwable  {
      //caseID:f353e4d1c61157472d10595652eb9fa9
      //CoveredLines: [26, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 92, 142, 146, 147, 148, 153]
      //Input_0_Long: 1702L
      //Input_1_PmsProductCategoryParam: {getSort=0, getName=\"1\", getProductUnit=\"0\", getShowStatus=0, getNavStatus=0, getKeywords=\"s'\\\"qkV 5 )=}._\", getDescription=\"2145788712\", getParentId=1702L, getIcon=\"1.0\", getProductAttributeIdList=arrayList0 arrayList0}
      //Assert: assertEquals(406, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryAttributeRelationDao0
      PmsProductCategoryAttributeRelationDao pmsProductCategoryAttributeRelationDao0 = mock(PmsProductCategoryAttributeRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(pmsProductCategoryAttributeRelationDao0).insertList(ArgumentMatchers.<com.macro.mall.model.PmsProductCategoryAttributeRelation>anyList());
      //mock pmsProductCategoryAttributeRelationMapper0
      PmsProductCategoryAttributeRelationMapper pmsProductCategoryAttributeRelationMapper0 = mock(PmsProductCategoryAttributeRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsProductCategoryAttributeRelationMapper0).deleteByExample(any(com.macro.mall.model.PmsProductCategoryAttributeRelationExample.class));
      Integer integer0 = new Integer(0);
      //mock pmsProductCategory0
      PmsProductCategory pmsProductCategory0 = mock(PmsProductCategory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsProductCategory0).getLevel();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(pmsProductCategory0).when(pmsProductCategoryMapper0).selectByPrimaryKey(anyLong());
      doReturn(406).when(pmsProductCategoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsProductCategory.class));
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(14).when(pmsProductMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsProduct.class) , any(com.macro.mall.model.PmsProductExample.class));
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationMapper", (Object) pmsProductCategoryAttributeRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationDao", (Object) pmsProductCategoryAttributeRelationDao0);
      Long long0 = new Long(1702L);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      arrayList0.add(long0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2145788712").when(pmsProductCategoryParam0).getDescription();
      doReturn("1.0").when(pmsProductCategoryParam0).getIcon();
      doReturn("s'\"qkV 5 )=}._").when(pmsProductCategoryParam0).getKeywords();
      doReturn("1").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn(arrayList0, arrayList0).when(pmsProductCategoryParam0).getProductAttributeIdList();
      doReturn("0").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: update
      int int0 = pmsProductCategoryServiceImpl0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(406, int0);
  }

  @Test(timeout = 4000)
  public void test_updateNavStatus_09()  throws Throwable  {
      //caseID:5a4d24911942ff2f5f2b6280c4f9a178
      //CoveredLines: [26, 116, 117, 118, 119, 120]
      //Input_0_List<Long>: vector0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateNavStatus
      int int0 = pmsProductCategoryServiceImpl0.updateNavStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_10()  throws Throwable  {
      //caseID:36f6f2f4b3f92d8de7e760b8f76160c2
      //CoveredLines: [26, 125, 126, 127, 128, 129]
      //Input_0_List<Long>: arrayList0
      //Input_1_Integer: 286
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(286);
      
      //Call method: updateShowStatus
      int int0 = pmsProductCategoryServiceImpl0.updateShowStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
