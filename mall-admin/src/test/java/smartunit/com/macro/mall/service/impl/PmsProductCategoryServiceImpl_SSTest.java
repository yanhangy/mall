/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.PmsProductCategoryAttributeRelationDao;
import com.macro.mall.dao.PmsProductCategoryDao;
import com.macro.mall.dto.PmsProductCategoryParam;
import com.macro.mall.dto.PmsProductCategoryWithChildrenItem;
import com.macro.mall.mapper.PmsProductCategoryAttributeRelationMapper;
import com.macro.mall.mapper.PmsProductCategoryMapper;
import com.macro.mall.mapper.PmsProductMapper;
import com.macro.mall.model.PmsProductCategory;
import com.macro.mall.service.impl.PmsProductCategoryServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductCategoryServiceImpl_SSTest extends PmsProductCategoryServiceImpl_SSTest_scaffolding {
// allCoveredLines:[26, 39, 40, 41, 43, 44, 46, 47, 48, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 100, 101, 106, 111, 116, 117, 118, 119, 120, 125, 126, 127, 128, 129, 134, 142, 143, 146, 147, 148, 150, 153]

  @Test(timeout = 4000)
  public void test_create_00()  throws Throwable  {
      //caseID:6eb70ecbd4d8f9851316e022b4b43a2c
      //CoveredLines: [26, 39, 40, 41, 43, 44, 46, 47, 50, 142, 146, 147, 148, 153]
      //Input_0_PmsProductCategoryParam: {getSort=(-1), getName="/v;kuey4*w`Cr", getProductUnit="/v;kuey4*w`Cr", getShowStatus=(-1), getNavStatus=(-1), getKeywords="/v;kuey4*w`Cr", getDescription="/v;kuey4*w`Cr", getParentId=(-1), getIcon="/v;kuey4*w`Cr", getProductAttributeIdList=linkedList0}
      //Assert: assertEquals(491, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      Integer integer0 = new Integer((-1));
      //mock pmsProductCategory0
      PmsProductCategory pmsProductCategory0 = mock(PmsProductCategory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsProductCategory0).getLevel();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(491).when(pmsProductCategoryMapper0).insertSelective(any(com.macro.mall.model.PmsProductCategory.class));
      doReturn(pmsProductCategory0).when(pmsProductCategoryMapper0).selectByPrimaryKey(anyLong());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long((-1));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getDescription();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getIcon();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getKeywords();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn(linkedList0).when(pmsProductCategoryParam0).getProductAttributeIdList();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: create
      int int0 = pmsProductCategoryServiceImpl0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(491, int0);
  }

  @Test(timeout = 4000)
  public void test_create_01()  throws Throwable  {
      //caseID:a782347111882a4f0665322ef479179f
      //CoveredLines: [26, 39, 40, 41, 43, 44, 46, 47, 48, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 142, 143, 153]
      //Input_0_PmsProductCategoryParam: {getSort=0, getName="/v;kuey4*w`Cr", getProductUnit="/v;kuey4*w`Cr", getShowStatus=0, getNavStatus=0, getKeywords="/v;kuey4*w`Cr", getDescription="/v;kuey4*w`Cr", getParentId=0, getIcon="/v;kuey4*w`Cr", getProductAttributeIdList=linkedList0}
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryAttributeRelationDao0
      PmsProductCategoryAttributeRelationDao pmsProductCategoryAttributeRelationDao0 = mock(PmsProductCategoryAttributeRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2146587743).when(pmsProductCategoryAttributeRelationDao0).insertList(ArgumentMatchers.<com.macro.mall.model.PmsProductCategoryAttributeRelation>anyList());
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(pmsProductCategoryMapper0).insertSelective(any(com.macro.mall.model.PmsProductCategory.class));
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationDao", (Object) pmsProductCategoryAttributeRelationDao0);
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add(long0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getDescription();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getIcon();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getKeywords();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn(linkedList0).when(pmsProductCategoryParam0).getProductAttributeIdList();
      doReturn("/v;kuey4*w`Cr").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: create
      int int0 = pmsProductCategoryServiceImpl0.create(pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_02()  throws Throwable  {
      //caseID:6331650814aa00067c0990869ece03a8
      //CoveredLines: [26, 106]
      //Input_0_Long: 1286L
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long(1286L);
      
      //Call method: delete
      int int0 = pmsProductCategoryServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_03()  throws Throwable  {
      //caseID:09f4bc44108ed7fcffbbd820c3a6424f
      //CoveredLines: [26, 111]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getItem
      PmsProductCategory pmsProductCategory0 = pmsProductCategoryServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(pmsProductCategory0);
  }

  @Test(timeout = 4000)
  public void test_getList_04()  throws Throwable  {
      //caseID:4427ccaeb223b2bcba80546d878b226b
      //CoveredLines: [26, 97, 98, 99, 100, 101]
      //Input_0_Long: (-1008L)
      //Input_1_Integer: (-2124)
      //Input_2_Integer: (-2124)
      //Assert: assertNull(method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long((-1008L));
      Integer integer0 = new Integer((-2124));
      
      //Call method: getList
      List<PmsProductCategory> list0 = pmsProductCategoryServiceImpl0.getList(long0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_listWithChildren_05()  throws Throwable  {
      //caseID:e7a7a97bb2d85f82270a7272affa66c5
      //CoveredLines: [26, 134]
      //Assert: assertNull(method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryDao0
      PmsProductCategoryDao pmsProductCategoryDao0 = mock(PmsProductCategoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryDao", (Object) pmsProductCategoryDao0);
      
      //Call method: listWithChildren
      List<PmsProductCategoryWithChildrenItem> list0 = pmsProductCategoryServiceImpl0.listWithChildren();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_setCategoryLevel_06()  throws Throwable  {
      //caseID:660d651ad694d4607c18b90aa1171bff
      //CoveredLines: [26, 142, 146, 147, 150, 153]
      //Input_0_PmsProductCategory: {getParentId=1L}
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Long long0 = new Long(1L);
      //mock pmsProductCategory0
      PmsProductCategory pmsProductCategory0 = mock(PmsProductCategory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsProductCategory0).getParentId();
      
      //Call method: setCategoryLevel
      PrivateAccess.callMethod((Class<PmsProductCategoryServiceImpl>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "setCategoryLevel", (Object) pmsProductCategory0, (Class<?>) PmsProductCategory.class);
  }

  @Test(timeout = 4000)
  public void test_update_07()  throws Throwable  {
      //caseID:27d5673a3e2fa0db5cd1fe3ed7f61f8d
      //CoveredLines: [26, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 88, 89, 90, 92, 142, 143, 153]
      //Input_0_Long: 0L
      //Input_1_PmsProductCategoryParam: {getSort=1, getName="= f8:2}nLJafL[p", getProductUnit="promotion_per_limit not between", getShowStatus=1, getNavStatus=1, getKeywords="", getDescription="org.springframework.http.server.reactive.WriteResultPublisher", getParentId=0L, getIcon="-1073741823"}
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryAttributeRelationMapper0
      PmsProductCategoryAttributeRelationMapper pmsProductCategoryAttributeRelationMapper0 = mock(PmsProductCategoryAttributeRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationMapper", (Object) pmsProductCategoryAttributeRelationMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.http.server.reactive.WriteResultPublisher").when(pmsProductCategoryParam0).getDescription();
      doReturn("-1073741823").when(pmsProductCategoryParam0).getIcon();
      doReturn("").when(pmsProductCategoryParam0).getKeywords();
      doReturn("= f8:2}nLJafL[p").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn("promotion_per_limit not between").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: update
      int int0 = pmsProductCategoryServiceImpl0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_update_08()  throws Throwable  {
      //caseID:a19b20141972ce8e824e0153e913cc4b
      //CoveredLines: [26, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 92, 142, 143, 153]
      //Input_0_Long: 0L
      //Input_1_PmsProductCategoryParam: {getSort=1, getName="= f8:2}nLJafL[p", getProductUnit="promotion_per_limit not between", getShowStatus=1, getNavStatus=1, getKeywords="", getDescription="org.springframework.http.server.reactive.WriteResultPublisher", getParentId=0L, getIcon="-1073741823", getProductAttributeIdList=vector0 vector0}
      //Assert: assertEquals((-1), method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryAttributeRelationDao0
      PmsProductCategoryAttributeRelationDao pmsProductCategoryAttributeRelationDao0 = mock(PmsProductCategoryAttributeRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2144454757).when(pmsProductCategoryAttributeRelationDao0).insertList(ArgumentMatchers.<com.macro.mall.model.PmsProductCategoryAttributeRelation>anyList());
      //mock pmsProductCategoryAttributeRelationMapper0
      PmsProductCategoryAttributeRelationMapper pmsProductCategoryAttributeRelationMapper0 = mock(PmsProductCategoryAttributeRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(pmsProductCategoryAttributeRelationMapper0).deleteByExample(any(com.macro.mall.model.PmsProductCategoryAttributeRelationExample.class));
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(pmsProductCategoryMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.PmsProductCategory.class));
      //mock pmsProductMapper0
      PmsProductMapper pmsProductMapper0 = mock(PmsProductMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3530).when(pmsProductMapper0).updateByExampleSelective(any(com.macro.mall.model.PmsProduct.class) , any(com.macro.mall.model.PmsProductExample.class));
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productMapper", (Object) pmsProductMapper0);
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationMapper", (Object) pmsProductCategoryAttributeRelationMapper0);
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryAttributeRelationDao", (Object) pmsProductCategoryAttributeRelationDao0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1);
      Vector<Long> vector0 = new Vector<Long>();
      vector0.add(long0);
      //mock pmsProductCategoryParam0
      PmsProductCategoryParam pmsProductCategoryParam0 = mock(PmsProductCategoryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.http.server.reactive.WriteResultPublisher").when(pmsProductCategoryParam0).getDescription();
      doReturn("-1073741823").when(pmsProductCategoryParam0).getIcon();
      doReturn("").when(pmsProductCategoryParam0).getKeywords();
      doReturn("= f8:2}nLJafL[p").when(pmsProductCategoryParam0).getName();
      doReturn(integer0).when(pmsProductCategoryParam0).getNavStatus();
      doReturn(long0).when(pmsProductCategoryParam0).getParentId();
      doReturn(vector0, vector0).when(pmsProductCategoryParam0).getProductAttributeIdList();
      doReturn("promotion_per_limit not between").when(pmsProductCategoryParam0).getProductUnit();
      doReturn(integer0).when(pmsProductCategoryParam0).getShowStatus();
      doReturn(integer0).when(pmsProductCategoryParam0).getSort();
      
      //Call method: update
      int int0 = pmsProductCategoryServiceImpl0.update(long0, pmsProductCategoryParam0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updateNavStatus_09()  throws Throwable  {
      //caseID:884b7c2e4d7c6c3456824b461b0a3475
      //CoveredLines: [26, 116, 117, 118, 119, 120]
      //Input_0_Long>: vector0
      //Input_1_Integer: 0
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateNavStatus
      int int0 = pmsProductCategoryServiceImpl0.updateNavStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateShowStatus_10()  throws Throwable  {
      //caseID:a4634734f6332bd1e57d48b07bbdd487
      //CoveredLines: [26, 125, 126, 127, 128, 129]
      //Input_0_Long>: arrayList0
      //Input_1_Integer: 1
      //Assert: assertEquals(0, method_result);
      
      PmsProductCategoryServiceImpl pmsProductCategoryServiceImpl0 = new PmsProductCategoryServiceImpl();
      //mock pmsProductCategoryMapper0
      PmsProductCategoryMapper pmsProductCategoryMapper0 = mock(PmsProductCategoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductCategoryServiceImpl.class, pmsProductCategoryServiceImpl0, "productCategoryMapper", (Object) pmsProductCategoryMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(1);
      
      //Call method: updateShowStatus
      int int0 = pmsProductCategoryServiceImpl0.updateShowStatus(arrayList0, integer0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
