/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.PmsProductAttributeCategoryController;
import com.macro.mall.dto.PmsProductAttributeCategoryItem;
import com.macro.mall.model.PmsProductAttributeCategory;
import com.macro.mall.service.PmsProductAttributeCategoryService;
import java.util.ArrayList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsProductAttributeCategoryController_SSTest extends PmsProductAttributeCategoryController_SSTest_scaffolding {
// allCoveredLines:[23, 31, 32, 33, 35, 43, 44, 45, 47, 55, 56, 57, 59, 67, 68, 75, 76, 83, 84]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:671adcc71d43fa60a567d23a915a3964
      //CoveredLines: [23, 31, 32, 33]
      //Input_0_String: ""
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2437).when(pmsProductAttributeCategoryService0).create(anyString());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      
      //Call method: create
      CommonResult commonResult0 = pmsProductAttributeCategoryController0.create("");
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:e7b49b314de650ff49e0455bdad216b9
      //CoveredLines: [23, 31, 32, 35]
      //Input_0_String: "AHL58F{fi,,<|R"
      //Assert: assertEquals(500L, method_result.getCode());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      
      //Call method: create
      CommonResult commonResult0 = pmsProductAttributeCategoryController0.create("AHL58F{fi,,<|R");
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:c496df3ba2b8548040887e1c72af2f35
      //CoveredLines: [23, 55, 56, 57]
      //Input_0_Long: 3617
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3617).when(pmsProductAttributeCategoryService0).delete(anyLong());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      Long long0 = new Long(3617);
      
      //Call method: delete
      CommonResult commonResult0 = pmsProductAttributeCategoryController0.delete(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:d4a5f199ef4b83a6c1640d5f60ba25d9
      //CoveredLines: [23, 55, 56, 59]
      //Input_0_Long: 0L
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      Long long0 = new Long(0L);
      
      //Call method: delete
      CommonResult commonResult0 = pmsProductAttributeCategoryController0.delete(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getItem_4()  throws Throwable  {
      //caseID:00d8c146f282fe4ae0ed25aa158326ab
      //CoveredLines: [23, 67, 68]
      //Input_0_Long: 1030L
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      Long long0 = new Long(1030L);
      
      //Call method: getItem
      CommonResult<PmsProductAttributeCategory> commonResult0 = pmsProductAttributeCategoryController0.getItem(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_getList_5()  throws Throwable  {
      //caseID:a1f0e0bcbb063073c4a981a738e37a2e
      //CoveredLines: [23, 75, 76]
      //Input_0_Integer: 3809
      //Input_1_Integer: 3809
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      ArrayList<PmsProductAttributeCategory> arrayList0 = new ArrayList<PmsProductAttributeCategory>();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(pmsProductAttributeCategoryService0).getList(anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      Integer integer0 = new Integer(3809);
      
      //Call method: getList
      CommonResult<CommonPage<PmsProductAttributeCategory>> commonResult0 = pmsProductAttributeCategoryController0.getList(integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getListWithAttr_6()  throws Throwable  {
      //caseID:8972746b52755809ee7e453b5207215d
      //CoveredLines: [23, 83, 84]
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      
      //Call method: getListWithAttr
      CommonResult<List<PmsProductAttributeCategoryItem>> commonResult0 = pmsProductAttributeCategoryController0.getListWithAttr();
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_update_7()  throws Throwable  {
      //caseID:cae920b26b626dc0e55bf97f17e6a675
      //CoveredLines: [23, 43, 44, 45]
      //Input_0_Long: 301
      //Input_1_String: "1.0"
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(301).when(pmsProductAttributeCategoryService0).update(anyLong() , anyString());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      Long long0 = new Long(301);
      
      //Call method: update
      CommonResult commonResult0 = pmsProductAttributeCategoryController0.update(long0, "1.0");
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_update_8()  throws Throwable  {
      //caseID:a275cca72800b9711b193f7cffa4bfb3
      //CoveredLines: [23, 43, 44, 47]
      //Input_0_Long: 0L
      //Input_1_String: "1.0"
      //Assert: assertEquals(500L, method_result.getCode());
      
      PmsProductAttributeCategoryController pmsProductAttributeCategoryController0 = new PmsProductAttributeCategoryController();
      //mock pmsProductAttributeCategoryService0
      PmsProductAttributeCategoryService pmsProductAttributeCategoryService0 = mock(PmsProductAttributeCategoryService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsProductAttributeCategoryController.class, pmsProductAttributeCategoryController0, "productAttributeCategoryService", (Object) pmsProductAttributeCategoryService0);
      Long long0 = new Long(0L);
      
      //Call method: update
      CommonResult commonResult0 = pmsProductAttributeCategoryController0.update(long0, "1.0");
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }
}
