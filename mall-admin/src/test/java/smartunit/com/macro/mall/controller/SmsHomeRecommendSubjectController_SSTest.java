/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.SmsHomeRecommendSubjectController;
import com.macro.mall.model.SmsHomeRecommendSubject;
import com.macro.mall.service.SmsHomeRecommendSubjectService;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeRecommendSubjectController_SSTest extends SmsHomeRecommendSubjectController_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 34, 41, 42, 43, 45, 52, 53, 54, 56, 63, 64, 65, 67, 77, 78]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:869ee8a63b06c6465c307ef8e2791403
      //CoveredLines: [22, 30, 31, 32]
      //Input_0_List<SmsHomeRecommendSubject>: linkedList0
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4).when(smsHomeRecommendSubjectService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeRecommendSubject>anyList());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      LinkedList<SmsHomeRecommendSubject> linkedList0 = new LinkedList<SmsHomeRecommendSubject>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.create(linkedList0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:7b4b46882a5467e4acfd3eb91fcd2bd8
      //CoveredLines: [22, 30, 31, 34]
      //Input_0_List<SmsHomeRecommendSubject>: linkedList0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      LinkedList<SmsHomeRecommendSubject> linkedList0 = new LinkedList<SmsHomeRecommendSubject>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.create(linkedList0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:133a5422358c2e60667adbfe8cbc89ae
      //CoveredLines: [22, 52, 53, 56]
      //Input_0_List<Long>: stack0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeRecommendSubjectService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.delete(stack0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:22a59344082d8e2c9afcdabb0c72415f
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_List<Long>: arrayList0
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsHomeRecommendSubjectService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.delete(arrayList0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:e5ffd6d049a05557beff319f0c220111
      //CoveredLines: [22, 77, 78]
      //Input_0_String: 2166
      //Input_1_Integer: (-1)
      //Input_2_Integer: (-1)
      //Input_3_Integer: (-1)
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      ArrayList<SmsHomeRecommendSubject> arrayList0 = new ArrayList<SmsHomeRecommendSubject>();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsHomeRecommendSubjectService0).list(anyString() , anyInt() , anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      CommonResult<CommonPage<SmsHomeRecommendSubject>> commonResult0 = smsHomeRecommendSubjectController0.list("2166", integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:74a332960347ea74b6680aad03105cc4
      //CoveredLines: [22, 63, 64, 65]
      //Input_0_List<Long>: vector0
      //Input_1_Integer: (-998)
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsHomeRecommendSubjectService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer((-998));
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.updateRecommendStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_6()  throws Throwable  {
      //caseID:90a8212f36db6f7385333984af7cb3da
      //CoveredLines: [22, 63, 64, 67]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: 0
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeRecommendSubjectService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateSort_7()  throws Throwable  {
      //caseID:d4d52a8d32993885c0b541d7fc71e826
      //CoveredLines: [22, 41, 42, 43]
      //Input_0_Long: 2338
      //Input_1_Integer: 2338
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2338).when(smsHomeRecommendSubjectService0).updateSort(anyLong() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      Long long0 = new Long(2338);
      Integer integer0 = new Integer(2338);
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateSort_8()  throws Throwable  {
      //caseID:402c433320c05a0aaa5405d3fa76950a
      //CoveredLines: [22, 41, 42, 45]
      //Input_0_Long: 0L
      //Input_1_Integer: (-1)
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeRecommendSubjectController smsHomeRecommendSubjectController0 = new SmsHomeRecommendSubjectController();
      //mock smsHomeRecommendSubjectService0
      SmsHomeRecommendSubjectService smsHomeRecommendSubjectService0 = mock(SmsHomeRecommendSubjectService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeRecommendSubjectController.class, smsHomeRecommendSubjectController0, "recommendSubjectService", (Object) smsHomeRecommendSubjectService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-1));
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeRecommendSubjectController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }
}
