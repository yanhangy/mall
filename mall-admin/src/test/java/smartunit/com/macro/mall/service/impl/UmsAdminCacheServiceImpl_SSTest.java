/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.service.RedisService;
import com.macro.mall.dao.UmsAdminRoleRelationDao;
import com.macro.mall.mapper.UmsAdminRoleRelationMapper;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsAdminRoleRelation;
import com.macro.mall.model.UmsResource;
import com.macro.mall.service.UmsAdminService;
import com.macro.mall.service.impl.UmsAdminCacheServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminCacheServiceImpl_SSTest extends UmsAdminCacheServiceImpl_SSTest_scaffolding {
// allCoveredLines:[25, 45, 46, 47, 48, 50, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 74, 75, 76, 77, 78, 80, 84, 85, 86, 87, 88, 90, 94, 95, 100, 101, 102, 106, 107, 112, 113, 114]

  @Test(timeout = 4000)
  public void test_delAdmin_00()  throws Throwable  {
      //caseID:755c2301ad07b0c2bca36d655e77d36f
      //CoveredLines: [25, 45, 46, 50]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminService", (Object) umsAdminService0);
      
      //Call method: delAdmin
      umsAdminCacheServiceImpl0.delAdmin(long0);
  }

  @Test(timeout = 4000)
  public void test_delAdmin_01()  throws Throwable  {
      //caseID:b2cc6407a574a4ec6718255f247996f4
      //CoveredLines: [25, 45, 46, 47, 48, 50]
      //Input_0_Long: 1L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminService0).getItem(anyLong());
      Long long0 = new Long(1L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminService", (Object) umsAdminService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delAdmin
      umsAdminCacheServiceImpl0.delAdmin(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceList_02()  throws Throwable  {
      //caseID:50429b91802173a302e4853f941129c2
      //CoveredLines: [25, 54, 55, 56]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delResourceList
      umsAdminCacheServiceImpl0.delResourceList(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByResource_03()  throws Throwable  {
      //caseID:d81ae33b2e9d74c876613caf4d2656f3
      //CoveredLines: [25, 84, 85, 90]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: delResourceListByResource
      umsAdminCacheServiceImpl0.delResourceListByResource(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByResource_04()  throws Throwable  {
      //caseID:1d972030fb1941d99f00e936c9e5abb4
      //CoveredLines: [25, 84, 85, 86, 87, 87, 88, 90]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Stack<Long> stack0 = new Stack<Long>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationDao0).getAdminIdList(anyLong());
      Long long0 = new Long(0L);
      
      stack0.add(long0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delResourceListByResource
      umsAdminCacheServiceImpl0.delResourceListByResource(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRole_05()  throws Throwable  {
      //caseID:bbc49834381cfde358c66d3da4e6d790
      //CoveredLines: [25, 60, 61, 62, 63, 68]
      //Input_0_Long: (-1L)
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long((-1L));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      //Call method: delResourceListByRole
      umsAdminCacheServiceImpl0.delResourceListByRole(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRole_06()  throws Throwable  {
      //caseID:8ab2f8d644c78cbf91069afebd65af00
      //CoveredLines: [25, 60, 61, 62, 63, 64, 65, 65, 66, 68]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ArrayList<UmsAdminRoleRelation> arrayList0 = new ArrayList<UmsAdminRoleRelation>();
      //mock umsAdminRoleRelation0
      UmsAdminRoleRelation umsAdminRoleRelation0 = mock(UmsAdminRoleRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(umsAdminRoleRelation0);
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminRoleRelationMapper0).selectByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      Long long0 = new Long(0L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delResourceListByRole
      umsAdminCacheServiceImpl0.delResourceListByRole(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRoleIds_07()  throws Throwable  {
      //caseID:c8c963be7db0512e602aa82f2100d081
      //CoveredLines: [25, 72, 73, 74, 75, 80]
      //Input_0_List<Long>: stack1
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      Stack<UmsAdminRoleRelation> stack0 = new Stack<UmsAdminRoleRelation>();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationMapper0).selectByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      Stack<Long> stack1 = new Stack<Long>();
      
      //Call method: delResourceListByRoleIds
      umsAdminCacheServiceImpl0.delResourceListByRoleIds(stack1);
      
      //Test Result Assert
      assertTrue(stack1.empty());
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRoleIds_08()  throws Throwable  {
      //caseID:9d418a0e56248811e696de6ce94e0165
      //CoveredLines: [25, 72, 73, 74, 75, 76, 77, 77, 78, 80]
      //Input_0_List<Long>: vector1
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Vector<UmsAdminRoleRelation> vector0 = new Vector<UmsAdminRoleRelation>();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminRoleRelationMapper0).selectByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminRoleRelation0
      UmsAdminRoleRelation umsAdminRoleRelation0 = mock(UmsAdminRoleRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(umsAdminRoleRelation0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      Vector<Long> vector1 = new Vector<Long>();
      
      //Call method: delResourceListByRoleIds
      umsAdminCacheServiceImpl0.delResourceListByRoleIds(vector1);
      
      //Test Result Assert
      assertEquals("[]", vector1.toString());
  }

  @Test(timeout = 4000)
  public void test_getAdmin_09()  throws Throwable  {
      //caseID:7de6c44f482c7f3ede67c1525d7b7601
      //CoveredLines: [25, 94, 95]
      //Input_0_String: com.macro.mall.service.impl.UmsAdminCacheServiceImpl
      //Assert: assertNull(method_result);
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: getAdmin
      UmsAdmin umsAdmin0 = umsAdminCacheServiceImpl0.getAdmin("com.macro.mall.service.impl.UmsAdminCacheServiceImpl");
      
      //Test Result Assert
      assertNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_getResourceList_10()  throws Throwable  {
      //caseID:6cdbd4015e2c53c0cc92da61e57da6f9
      //CoveredLines: [25, 106, 107]
      //Input_0_Long: 1743L
      //Assert: assertNull(method_result);
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1743L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: getResourceList
      List<UmsResource> list0 = umsAdminCacheServiceImpl0.getResourceList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_setAdmin_11()  throws Throwable  {
      //caseID:902399c9e41dbe85f3a064ab4cf6cdf2
      //CoveredLines: [25, 100, 101, 102]
      //Input_0_UmsAdmin: {}
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "REDIS_EXPIRE", (Object) long0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setAdmin
      umsAdminCacheServiceImpl0.setAdmin(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_setResourceList_12()  throws Throwable  {
      //caseID:8ecbed7328174d0d92faf22ffbae9ff9
      //CoveredLines: [25, 112, 113, 114]
      //Input_0_Long: 1660L
      //Input_1_List<UmsResource>: vector0
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1660L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "REDIS_EXPIRE", (Object) long0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      
      //Call method: setResourceList
      umsAdminCacheServiceImpl0.setResourceList(long0, vector0);
      
      //Test Result Assert
      assertEquals("[]", vector0.toString());
  }
}
