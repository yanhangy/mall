/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.service.RedisService;
import com.macro.mall.dao.UmsAdminRoleRelationDao;
import com.macro.mall.mapper.UmsAdminRoleRelationMapper;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsAdminRoleRelation;
import com.macro.mall.model.UmsResource;
import com.macro.mall.service.UmsAdminService;
import com.macro.mall.service.impl.UmsAdminCacheServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminCacheServiceImpl_SSTest extends UmsAdminCacheServiceImpl_SSTest_scaffolding {
// allCoveredLines:[25, 45, 46, 47, 48, 50, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 74, 75, 76, 77, 78, 80, 84, 85, 86, 87, 88, 90, 94, 95, 100, 101, 102, 106, 107, 112, 113, 114]

  @Test(timeout = 4000)
  public void test_delAdmin_00()  throws Throwable  {
      //caseID:c756f02fce3a91776fed1244cee2b473
      //CoveredLines: [25, 45, 46, 50]
      //Input_0_Long: 1406L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1406L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminService", (Object) umsAdminService0);
      
      //Call method: delAdmin
      umsAdminCacheServiceImpl0.delAdmin(long0);
  }

  @Test(timeout = 4000)
  public void test_delAdmin_01()  throws Throwable  {
      //caseID:6723f0d0c895329a782db3104b1eff7f
      //CoveredLines: [25, 45, 46, 47, 48, 50]
      //Input_0_Long: 1406L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminService0).getItem(anyLong());
      Long long0 = new Long(1406L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminService", (Object) umsAdminService0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delAdmin
      umsAdminCacheServiceImpl0.delAdmin(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceList_02()  throws Throwable  {
      //caseID:45704083da0090b69b520b1d25e0ad6b
      //CoveredLines: [25, 54, 55, 56]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delResourceList
      umsAdminCacheServiceImpl0.delResourceList(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByResource_03()  throws Throwable  {
      //caseID:f946a4a419f34107447c3c351b40c35d
      //CoveredLines: [25, 84, 85, 90]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      //Call method: delResourceListByResource
      umsAdminCacheServiceImpl0.delResourceListByResource(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByResource_04()  throws Throwable  {
      //caseID:4bf902f3093e284332e45197c1c2e074
      //CoveredLines: [25, 84, 85, 86, 87, 87, 88, 90]
      //Input_0_Long: 0L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Vector<Long> vector0 = new Vector<Long>();
      //mock umsAdminRoleRelationDao0
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminRoleRelationDao0).getAdminIdList(anyLong());
      Long long0 = new Long(0L);
      
      vector0.add(long0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delResourceListByResource
      umsAdminCacheServiceImpl0.delResourceListByResource(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRole_05()  throws Throwable  {
      //caseID:b33713c428fa7c42737e745195dd53aa
      //CoveredLines: [25, 60, 61, 62, 63, 68]
      //Input_0_Long: 856L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(856L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      //Call method: delResourceListByRole
      umsAdminCacheServiceImpl0.delResourceListByRole(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRole_06()  throws Throwable  {
      //caseID:239efa5f0a481bd9ae6b5b26b7de6a4a
      //CoveredLines: [25, 60, 61, 62, 63, 64, 65, 65, 66, 68]
      //Input_0_Long: 856L
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Stack<UmsAdminRoleRelation> stack0 = new Stack<UmsAdminRoleRelation>();
      //mock umsAdminRoleRelation0
      UmsAdminRoleRelation umsAdminRoleRelation0 = mock(UmsAdminRoleRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(umsAdminRoleRelation0);
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsAdminRoleRelationMapper0).selectByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      Long long0 = new Long(856L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: delResourceListByRole
      umsAdminCacheServiceImpl0.delResourceListByRole(long0);
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRoleIds_07()  throws Throwable  {
      //caseID:fb2032d5ba16e8b61a641b241c8b6001
      //CoveredLines: [25, 72, 73, 74, 75, 80]
      //Input_0_List<Long>: arrayList0
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      LinkedList<UmsAdminRoleRelation> linkedList0 = new LinkedList<UmsAdminRoleRelation>();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationMapper0).selectByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      
      //Call method: delResourceListByRoleIds
      umsAdminCacheServiceImpl0.delResourceListByRoleIds(arrayList0);
      
      //Test Result Assert
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_delResourceListByRoleIds_08()  throws Throwable  {
      //caseID:2df0b07868dabd47e4cb9deda68c4b7f
      //CoveredLines: [25, 72, 73, 74, 75, 76, 77, 77, 78, 80]
      //Input_0_List<Long>: linkedList1
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<UmsAdminRoleRelation> linkedList0 = new LinkedList<UmsAdminRoleRelation>();
      //mock umsAdminRoleRelationMapper0
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminRoleRelationMapper0).selectByExample(any(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      //mock umsAdminRoleRelation0
      UmsAdminRoleRelation umsAdminRoleRelation0 = mock(UmsAdminRoleRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(umsAdminRoleRelation0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      
      //Call method: delResourceListByRoleIds
      umsAdminCacheServiceImpl0.delResourceListByRoleIds(linkedList1);
      
      //Test Result Assert
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test_getAdmin_09()  throws Throwable  {
      //caseID:21a22d4960d8edf0cdb8b21444fc3a50
      //CoveredLines: [25, 94, 95]
      //Input_0_String: Zuj{
      //Assert: assertNull(method_result);
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: getAdmin
      UmsAdmin umsAdmin0 = umsAdminCacheServiceImpl0.getAdmin("Zuj{");
      
      //Test Result Assert
      assertNull(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_getResourceList_10()  throws Throwable  {
      //caseID:546be3097bff9fba83490fa564dbac7a
      //CoveredLines: [25, 106, 107]
      //Input_0_Long: 4382L
      //Assert: assertNull(method_result);
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(4382L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: getResourceList
      List<UmsResource> list0 = umsAdminCacheServiceImpl0.getResourceList(long0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_setAdmin_11()  throws Throwable  {
      //caseID:7b520a50c37c25c26f1e5b6d9b9d0465
      //CoveredLines: [25, 100, 101, 102]
      //Input_0_UmsAdmin: {}
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(2093L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "REDIS_EXPIRE", (Object) long0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setAdmin
      umsAdminCacheServiceImpl0.setAdmin(umsAdmin0);
  }

  @Test(timeout = 4000)
  public void test_setResourceList_12()  throws Throwable  {
      //caseID:bda94cc9f4470dcb6bc5b0846af54d0f
      //CoveredLines: [25, 112, 113, 114]
      //Input_0_Long: 2567L
      //Input_1_List<UmsResource>: stack0
      
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(2567L);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "REDIS_EXPIRE", (Object) long0);
      
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      
      //Call method: setResourceList
      umsAdminCacheServiceImpl0.setResourceList(long0, stack0);
      
      //Test Result Assert
      assertEquals(10, stack0.capacity());
  }
}
