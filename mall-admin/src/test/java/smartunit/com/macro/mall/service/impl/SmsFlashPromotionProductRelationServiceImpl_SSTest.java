/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.SmsFlashPromotionProductRelationDao;
import com.macro.mall.dto.SmsFlashPromotionProduct;
import com.macro.mall.mapper.SmsFlashPromotionProductRelationMapper;
import com.macro.mall.model.SmsFlashPromotionProductRelation;
import com.macro.mall.service.impl.SmsFlashPromotionProductRelationServiceImpl;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsFlashPromotionProductRelationServiceImpl_SSTest extends SmsFlashPromotionProductRelationServiceImpl_SSTest_scaffolding {
// allCoveredLines:[20, 27, 28, 29, 30, 35, 36, 41, 46, 51, 52, 57, 58, 59, 60, 61]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:01c24131a39b22bbd90952c61d5181e0
      //CoveredLines: [20, 27, 28, 29, 30]
      //Input_0_SmsFlashPromotionProductRelation>: linkedList0
      //Assert: assertEquals(1, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      LinkedList<SmsFlashPromotionProductRelation> linkedList0 = new LinkedList<SmsFlashPromotionProductRelation>();
      //mock smsFlashPromotionProductRelation0
      SmsFlashPromotionProductRelation smsFlashPromotionProductRelation0 = mock(SmsFlashPromotionProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      linkedList0.add(smsFlashPromotionProductRelation0);
      
      //Call method: create
      int int0 = smsFlashPromotionProductRelationServiceImpl0.create(linkedList0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:be93579685e73d632c5b3b5950982f2f
      //CoveredLines: [20, 41]
      //Input_0_Long: 0L
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long(0L);
      
      //Call method: delete
      int int0 = smsFlashPromotionProductRelationServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getCount_2()  throws Throwable  {
      //caseID:c2191717fe8da3084e1f9a74985b713e
      //CoveredLines: [20, 57, 58, 59, 60, 61]
      //Input_0_Long: 0L
      //Input_1_Long: 0L
      //Assert: assertEquals(1016L, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1016L).when(smsFlashPromotionProductRelationMapper0).countByExample(any(com.macro.mall.model.SmsFlashPromotionProductRelationExample.class));
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getCount
      long long1 = smsFlashPromotionProductRelationServiceImpl0.getCount(long0, long0);
      
      //Test Result Assert
      assertEquals(1016L, long1);
  }

  @Test(timeout = 4000)
  public void test_getItem_3()  throws Throwable  {
      //caseID:0b1715dd18b7036068463e30fcda37a5
      //CoveredLines: [20, 46]
      //Input_0_Long: (-1L)
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long((-1L));
      
      //Call method: getItem
      SmsFlashPromotionProductRelation smsFlashPromotionProductRelation0 = smsFlashPromotionProductRelationServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(smsFlashPromotionProductRelation0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:dce70dcf5a2c0eb0a6f90cab68075291
      //CoveredLines: [20, 51, 52]
      //Input_0_Long: 2891L
      //Input_1_Long: 2891L
      //Input_2_Integer: 0
      //Input_3_Integer: 0
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationDao0
      SmsFlashPromotionProductRelationDao smsFlashPromotionProductRelationDao0 = mock(SmsFlashPromotionProductRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationDao", (Object) smsFlashPromotionProductRelationDao0);
      Long long0 = new Long(2891L);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsFlashPromotionProduct> list0 = smsFlashPromotionProductRelationServiceImpl0.list(long0, long0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:1629021a43ce9ea272ab1c93fda09717
      //CoveredLines: [20, 35, 36]
      //Input_0_Long: 0L
      //Input_1_SmsFlashPromotionProductRelation: {}
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long(0L);
      //mock smsFlashPromotionProductRelation0
      SmsFlashPromotionProductRelation smsFlashPromotionProductRelation0 = mock(SmsFlashPromotionProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = smsFlashPromotionProductRelationServiceImpl0.update(long0, smsFlashPromotionProductRelation0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
