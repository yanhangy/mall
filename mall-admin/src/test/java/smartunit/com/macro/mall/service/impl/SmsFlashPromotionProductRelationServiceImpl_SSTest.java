/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.SmsFlashPromotionProductRelationDao;
import com.macro.mall.dto.SmsFlashPromotionProduct;
import com.macro.mall.mapper.SmsFlashPromotionProductRelationMapper;
import com.macro.mall.model.SmsFlashPromotionProductRelation;
import com.macro.mall.service.impl.SmsFlashPromotionProductRelationServiceImpl;
import java.util.List;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsFlashPromotionProductRelationServiceImpl_SSTest extends SmsFlashPromotionProductRelationServiceImpl_SSTest_scaffolding {
// allCoveredLines:[20, 27, 28, 29, 30, 35, 36, 41, 46, 51, 52, 57, 58, 59, 60, 61]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:67e682e0c5a6faf4b6af8e32dd756544
      //CoveredLines: [20, 27, 28, 29, 30]
      //Input_0_List<SmsFlashPromotionProductRelation>: stack0
      //Assert: assertEquals(1, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Stack<SmsFlashPromotionProductRelation> stack0 = new Stack<SmsFlashPromotionProductRelation>();
      //mock smsFlashPromotionProductRelation0
      SmsFlashPromotionProductRelation smsFlashPromotionProductRelation0 = mock(SmsFlashPromotionProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(smsFlashPromotionProductRelation0);
      
      //Call method: create
      int int0 = smsFlashPromotionProductRelationServiceImpl0.create(stack0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:3853fe69c601da701260e4847b9f852b
      //CoveredLines: [20, 41]
      //Input_0_Long: 1394L
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long(1394L);
      
      //Call method: delete
      int int0 = smsFlashPromotionProductRelationServiceImpl0.delete(long0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getCount_2()  throws Throwable  {
      //caseID:bf612bd98bf6b50923183bc261f3e104
      //CoveredLines: [20, 57, 58, 59, 60, 61]
      //Input_0_Long: 0L
      //Input_1_Long: 0L
      //Assert: assertEquals(0L, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long(0L);
      
      //Call method: getCount
      long long1 = smsFlashPromotionProductRelationServiceImpl0.getCount(long0, long0);
      
      //Test Result Assert
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test_getItem_3()  throws Throwable  {
      //caseID:ac598462e5a32189f6bd52f355c11529
      //CoveredLines: [20, 46]
      //Input_0_Long: 907L
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long(907L);
      
      //Call method: getItem
      SmsFlashPromotionProductRelation smsFlashPromotionProductRelation0 = smsFlashPromotionProductRelationServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(smsFlashPromotionProductRelation0);
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:7167ecf218c4b82aea6ce2cdc2be88d8
      //CoveredLines: [20, 51, 52]
      //Input_0_Long: 0L
      //Input_1_Long: 0L
      //Input_2_Integer: 32768
      //Input_3_Integer: 32768
      //Assert: assertNull(method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationDao0
      SmsFlashPromotionProductRelationDao smsFlashPromotionProductRelationDao0 = mock(SmsFlashPromotionProductRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationDao", (Object) smsFlashPromotionProductRelationDao0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(32768);
      
      //Call method: list
      List<SmsFlashPromotionProduct> list0 = smsFlashPromotionProductRelationServiceImpl0.list(long0, long0, integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_5()  throws Throwable  {
      //caseID:022cb6ebf2827cb98974e274d1527133
      //CoveredLines: [20, 35, 36]
      //Input_0_Long: (-1L)
      //Input_1_SmsFlashPromotionProductRelation: {}
      //Assert: assertEquals(0, method_result);
      
      SmsFlashPromotionProductRelationServiceImpl smsFlashPromotionProductRelationServiceImpl0 = new SmsFlashPromotionProductRelationServiceImpl();
      //mock smsFlashPromotionProductRelationMapper0
      SmsFlashPromotionProductRelationMapper smsFlashPromotionProductRelationMapper0 = mock(SmsFlashPromotionProductRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsFlashPromotionProductRelationServiceImpl.class, smsFlashPromotionProductRelationServiceImpl0, "relationMapper", (Object) smsFlashPromotionProductRelationMapper0);
      Long long0 = new Long((-1L));
      //mock smsFlashPromotionProductRelation0
      SmsFlashPromotionProductRelation smsFlashPromotionProductRelation0 = mock(SmsFlashPromotionProductRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = smsFlashPromotionProductRelationServiceImpl0.update(long0, smsFlashPromotionProductRelation0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
