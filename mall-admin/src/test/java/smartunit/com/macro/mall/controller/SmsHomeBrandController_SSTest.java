/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.SmsHomeBrandController;
import com.macro.mall.model.SmsHomeBrand;
import com.macro.mall.service.SmsHomeBrandService;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeBrandController_SSTest extends SmsHomeBrandController_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 34, 41, 42, 43, 45, 52, 53, 54, 56, 63, 64, 65, 67, 77, 78]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:728daa729c582c6a04324576e0929d4f
      //CoveredLines: [22, 30, 31, 32]
      //Input_0_SmsHomeBrand>: stack0
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1664).when(smsHomeBrandService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeBrand>anyList());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Stack<SmsHomeBrand> stack0 = new Stack<SmsHomeBrand>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeBrandController0.create(stack0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:2a392c77f74eeabd13e9d060c124961e
      //CoveredLines: [22, 30, 31, 34]
      //Input_0_SmsHomeBrand>: arrayList0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeBrandService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeBrand>anyList());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      ArrayList<SmsHomeBrand> arrayList0 = new ArrayList<SmsHomeBrand>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeBrandController0.create(arrayList0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:cad93e49d29d47e8f1354c2987ee8a64
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_Long>: stack0
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(305).when(smsHomeBrandService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Stack<Long> stack0 = new Stack<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeBrandController0.delete(stack0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:10bf6d34afc2b04f7c088d9e5956bb84
      //CoveredLines: [22, 52, 53, 56]
      //Input_0_Long>: vector0
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Vector<Long> vector0 = new Vector<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeBrandController0.delete(vector0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:a92fd29c307fde44c29b4dfd48dba813
      //CoveredLines: [22, 77, 78]
      //Input_0_String: "com.macro.mall.controller.SmsHomeBrandController"
      //Input_1_Integer: (-5)
      //Input_2_Integer: (-5)
      //Input_3_Integer: (-5)
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      Stack<SmsHomeBrand> stack0 = new Stack<SmsHomeBrand>();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsHomeBrandService0).list(anyString() , anyInt() , anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Integer integer0 = new Integer((-5));
      
      //Call method: list
      CommonResult<CommonPage<SmsHomeBrand>> commonResult0 = smsHomeBrandController0.list("com.macro.mall.controller.SmsHomeBrandController", integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:1a0cedb5061e6bff6a92f226920ff164
      //CoveredLines: [22, 63, 64, 67]
      //Input_0_Long>: stack0
      //Input_1_Integer: (-1)
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeBrandService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeBrandController0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_6()  throws Throwable  {
      //caseID:5826cc3369f2dd4f93094228809cdb5e
      //CoveredLines: [22, 63, 64, 65]
      //Input_0_Long>: vector0
      //Input_1_Integer: 0
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2648).when(smsHomeBrandService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Vector<Long> vector0 = new Vector<Long>();
      Integer integer0 = new Integer(0);
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeBrandController0.updateRecommendStatus(vector0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateSort_7()  throws Throwable  {
      //caseID:d3abac64d2da0249fb6ab0f01586471b
      //CoveredLines: [22, 41, 42, 43]
      //Input_0_Long: 1542
      //Input_1_Integer: 1542
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1542).when(smsHomeBrandService0).updateSort(anyLong() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Long long0 = new Long(1542);
      Integer integer0 = new Integer(1542);
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeBrandController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateSort_8()  throws Throwable  {
      //caseID:dce79b6df09ce6789b428dd95863a50e
      //CoveredLines: [22, 41, 42, 45]
      //Input_0_Long: (-1)
      //Input_1_Integer: (-1)
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeBrandService0).updateSort(anyLong() , anyInt());
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Long long0 = new Long((-1));
      Integer integer0 = new Integer((-1));
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeBrandController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }
}
