/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.SmsHomeBrandController;
import com.macro.mall.model.SmsHomeBrand;
import com.macro.mall.service.SmsHomeBrandService;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeBrandController_SSTest extends SmsHomeBrandController_SSTest_scaffolding {
// allCoveredLines:[22, 30, 31, 32, 34, 41, 42, 43, 45, 52, 53, 54, 56, 63, 64, 65, 67, 77, 78]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:2742f3f0b001521e867b954899b793c2
      //CoveredLines: [22, 30, 31, 32]
      //Input_0_List<SmsHomeBrand>: vector0
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(930).when(smsHomeBrandService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeBrand>anyList());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Vector<SmsHomeBrand> vector0 = new Vector<SmsHomeBrand>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeBrandController0.create(vector0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:bb8d6bd02ce5903d7daa7ae2b8db850c
      //CoveredLines: [22, 30, 31, 34]
      //Input_0_List<SmsHomeBrand>: linkedList0
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      LinkedList<SmsHomeBrand> linkedList0 = new LinkedList<SmsHomeBrand>();
      
      //Call method: create
      CommonResult commonResult0 = smsHomeBrandController0.create(linkedList0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      //caseID:60499d6a7c584e85b56610697f784055
      //CoveredLines: [22, 52, 53, 54]
      //Input_0_List<Long>: linkedList0
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(19).when(smsHomeBrandService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeBrandController0.delete(linkedList0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      //caseID:f9718492964078510ff4000359109881
      //CoveredLines: [22, 52, 53, 56]
      //Input_0_List<Long>: linkedList0
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeBrandService0).delete(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      
      //Call method: delete
      CommonResult commonResult0 = smsHomeBrandController0.delete(linkedList0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:5600cec9cefa70bd75ff78b68489dea4
      //CoveredLines: [22, 77, 78]
      //Input_0_String: 1
      //Input_1_Integer: 5
      //Input_2_Integer: 5
      //Input_3_Integer: 5
      //Assert: assertEquals(200L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      LinkedList<SmsHomeBrand> linkedList0 = new LinkedList<SmsHomeBrand>();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsHomeBrandService0).list(anyString() , anyInt() , anyInt() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Integer integer0 = new Integer(5);
      
      //Call method: list
      CommonResult<CommonPage<SmsHomeBrand>> commonResult0 = smsHomeBrandController0.list("1", integer0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_5()  throws Throwable  {
      //caseID:df881811584c126da8f8adec211d5731
      //CoveredLines: [22, 63, 64, 67]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: (-1)
      //Assert: assertEquals(500L, method_result.getCode());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeBrandService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer((-1));
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeBrandController0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals(500L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_updateRecommendStatus_6()  throws Throwable  {
      //caseID:87874f315bb9d92990c31db3f2119d4b
      //CoveredLines: [22, 63, 64, 65]
      //Input_0_List<Long>: stack0
      //Input_1_Integer: 1716
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(877).when(smsHomeBrandService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Stack<Long> stack0 = new Stack<Long>();
      Integer integer0 = new Integer(1716);
      
      //Call method: updateRecommendStatus
      CommonResult commonResult0 = smsHomeBrandController0.updateRecommendStatus(stack0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateSort_7()  throws Throwable  {
      //caseID:27426460269bb4b22ee91c5553c7ac25
      //CoveredLines: [22, 41, 42, 43]
      //Input_0_Long: 1076
      //Input_1_Integer: 1076
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMessage());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1076).when(smsHomeBrandService0).updateSort(anyLong() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Long long0 = new Long(1076);
      Integer integer0 = new Integer(1076);
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeBrandController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_updateSort_8()  throws Throwable  {
      //caseID:57dc3448dc0dc85c59801328b6813252
      //CoveredLines: [22, 41, 42, 45]
      //Input_0_Long: 0
      //Input_1_Integer: 0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      SmsHomeBrandController smsHomeBrandController0 = new SmsHomeBrandController();
      //mock smsHomeBrandService0
      SmsHomeBrandService smsHomeBrandService0 = mock(SmsHomeBrandService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeBrandService0).updateSort(anyLong() , anyInt());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeBrandController.class, smsHomeBrandController0, "homeBrandService", (Object) smsHomeBrandService0);
      Long long0 = new Long(0);
      Integer integer0 = new Integer(0);
      
      //Call method: updateSort
      CommonResult commonResult0 = smsHomeBrandController0.updateSort(long0, integer0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
}
