/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.mapper.SmsHomeAdvertiseMapper;
import com.macro.mall.model.SmsHomeAdvertise;
import com.macro.mall.service.impl.SmsHomeAdvertiseServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeAdvertiseServiceImpl_SSTest extends SmsHomeAdvertiseServiceImpl_SSTest_scaffolding {
// allCoveredLines:[22, 28, 29, 30, 35, 36, 37, 42, 43, 44, 45, 50, 55, 56, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 80, 82, 83, 84, 86, 90, 91]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:8dc2a36fed2a06a95090c140d86f0ec6
      //CoveredLines: [22, 28, 29, 30]
      //Input_0_SmsHomeAdvertise: {}
      //Assert: assertEquals(0, method_result);
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      //mock smsHomeAdvertise0
      SmsHomeAdvertise smsHomeAdvertise0 = mock(SmsHomeAdvertise.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      int int0 = smsHomeAdvertiseServiceImpl0.create(smsHomeAdvertise0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      //caseID:375a7795e24aaa69360a623811e3970b
      //CoveredLines: [22, 35, 36, 37]
      //Input_0_List<Long>: vector0
      //Assert: assertEquals(0, method_result);
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Vector<Long> vector0 = new Vector<Long>();
      
      //Call method: delete
      int int0 = smsHomeAdvertiseServiceImpl0.delete(vector0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getItem_2()  throws Throwable  {
      //caseID:05388cbcc1696602b1ea36de3c463b39
      //CoveredLines: [22, 50]
      //Input_0_Long: 2912L
      //Assert: assertNull(method_result);
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Long long0 = new Long(2912L);
      
      //Call method: getItem
      SmsHomeAdvertise smsHomeAdvertise0 = smsHomeAdvertiseServiceImpl0.getItem(long0);
      
      //Test Result Assert
      assertNull(smsHomeAdvertise0);
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:d5e475b7580e0894921dbcb0c835dde0
      //CoveredLines: [22, 61, 62, 63, 64, 65, 67, 68, 70, 90, 91]
      //Input_0_String:  23:59:59
      //Input_1_Integer: 1
      //Input_2_String: 
      //Input_3_Integer: 1
      //Input_4_Integer: 1
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      LinkedList<SmsHomeAdvertise> linkedList0 = new LinkedList<SmsHomeAdvertise>();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(smsHomeAdvertiseMapper0).selectByExample(any(com.macro.mall.model.SmsHomeAdvertiseExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Integer integer0 = new Integer(1);
      
      //Call method: list
      List<SmsHomeAdvertise> list0 = smsHomeAdvertiseServiceImpl0.list(" 23:59:59", integer0, "", integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:0771597051ba941171bc2b5c338e2b8e
      //CoveredLines: [22, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 76, 77, 78, 80, 82, 83, 84, 86, 90, 91]
      //Input_0_String:  23:59:59
      //Input_1_Integer: null
      //Input_2_String:  23:59:59
      //Input_3_Integer: (-1)
      //Input_4_Integer: (-1)
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      ArrayList<SmsHomeAdvertise> arrayList0 = new ArrayList<SmsHomeAdvertise>();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsHomeAdvertiseMapper0).selectByExample(any(com.macro.mall.model.SmsHomeAdvertiseExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      List<SmsHomeAdvertise> list0 = smsHomeAdvertiseServiceImpl0.list(" 23:59:59", (Integer) null, " 23:59:59", integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_5()  throws Throwable  {
      //caseID:01197db81b29ba39d29eef86e37f61a1
      //CoveredLines: [22, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 80, 82, 83, 84, 86, 90, 91]
      //Input_0_String: 
      //Input_1_Integer: (-1)
      //Input_2_String: sort desc
      //Input_3_Integer: (-1)
      //Input_4_Integer: (-1)
      //Assert: assertTrue(method_result.isEmpty());
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      ArrayList<SmsHomeAdvertise> arrayList0 = new ArrayList<SmsHomeAdvertise>();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(smsHomeAdvertiseMapper0).selectByExample(any(com.macro.mall.model.SmsHomeAdvertiseExample.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Integer integer0 = new Integer((-1));
      
      //Call method: list
      List<SmsHomeAdvertise> list0 = smsHomeAdvertiseServiceImpl0.list("", integer0, "sort desc", integer0, integer0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_list_6()  throws Throwable  {
      //caseID:0990948f418b2d306db4b6e593a9af65
      //CoveredLines: [22, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 80, 82, 83, 84, 86, 90, 91]
      //Input_0_String:  23:59:59
      //Input_1_Integer: 0
      //Input_2_String: #block terminated with an error
      //Input_3_Integer: 0
      //Input_4_Integer: 0
      //Assert: assertNull(method_result);
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Integer integer0 = new Integer(0);
      
      //Call method: list
      List<SmsHomeAdvertise> list0 = smsHomeAdvertiseServiceImpl0.list(" 23:59:59", integer0, "#block terminated with an error", integer0, integer0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_7()  throws Throwable  {
      //caseID:b3f36b3f20bbb4f903d1ad3fc5d64ce1
      //CoveredLines: [22, 55, 56]
      //Input_0_Long: 1054L
      //Input_1_SmsHomeAdvertise: {}
      //Assert: assertEquals(0, method_result);
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Long long0 = new Long(1054L);
      //mock smsHomeAdvertise0
      SmsHomeAdvertise smsHomeAdvertise0 = mock(SmsHomeAdvertise.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: update
      int int0 = smsHomeAdvertiseServiceImpl0.update(long0, smsHomeAdvertise0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateStatus_8()  throws Throwable  {
      //caseID:d1349d5773a8b0b9616802ad1bc43b73
      //CoveredLines: [22, 42, 43, 44, 45]
      //Input_0_Long: 1
      //Input_1_Integer: 1
      //Assert: assertEquals(1, method_result);
      
      SmsHomeAdvertiseServiceImpl smsHomeAdvertiseServiceImpl0 = new SmsHomeAdvertiseServiceImpl();
      //mock smsHomeAdvertiseMapper0
      SmsHomeAdvertiseMapper smsHomeAdvertiseMapper0 = mock(SmsHomeAdvertiseMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsHomeAdvertiseMapper0).updateByPrimaryKeySelective(any(com.macro.mall.model.SmsHomeAdvertise.class));
      
      PrivateAccess.setVariable((Class<?>) SmsHomeAdvertiseServiceImpl.class, smsHomeAdvertiseServiceImpl0, "advertiseMapper", (Object) smsHomeAdvertiseMapper0);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(1);
      
      //Call method: updateStatus
      int int0 = smsHomeAdvertiseServiceImpl0.updateStatus(long0, integer0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }
}
