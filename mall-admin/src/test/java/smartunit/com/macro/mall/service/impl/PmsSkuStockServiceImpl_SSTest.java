/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.PmsSkuStockDao;
import com.macro.mall.mapper.PmsSkuStockMapper;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.service.impl.PmsSkuStockServiceImpl;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsSkuStockServiceImpl_SSTest extends PmsSkuStockServiceImpl_SSTest_scaffolding {
// allCoveredLines:[19, 27, 28, 29, 30, 32, 37]

  @Test(timeout = 4000)
  public void test_getList_0()  throws Throwable  {
      //caseID:25186efb8855d57de37deedcc608543f
      //CoveredLines: [19, 27, 28, 29, 32]
      //Input_0_Long: 959L
      //Input_1_String: 
      //Assert: assertNull(method_result);
      
      PmsSkuStockServiceImpl pmsSkuStockServiceImpl0 = new PmsSkuStockServiceImpl();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsSkuStockServiceImpl.class, pmsSkuStockServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      Long long0 = new Long(959L);
      
      //Call method: getList
      List<PmsSkuStock> list0 = pmsSkuStockServiceImpl0.getList(long0, "");
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_getList_1()  throws Throwable  {
      //caseID:0afa1890d11714105d900b3c124bfb37
      //CoveredLines: [19, 27, 28, 29, 30, 32]
      //Input_0_Long: 1L
      //Input_1_String: 1
      //Assert: assertNull(method_result);
      
      PmsSkuStockServiceImpl pmsSkuStockServiceImpl0 = new PmsSkuStockServiceImpl();
      //mock pmsSkuStockMapper0
      PmsSkuStockMapper pmsSkuStockMapper0 = mock(PmsSkuStockMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsSkuStockServiceImpl.class, pmsSkuStockServiceImpl0, "skuStockMapper", (Object) pmsSkuStockMapper0);
      Long long0 = new Long(1L);
      
      //Call method: getList
      List<PmsSkuStock> list0 = pmsSkuStockServiceImpl0.getList(long0, "1");
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_update_2()  throws Throwable  {
      //caseID:2273df94ddb9dc7d91521b0f49c0ded5
      //CoveredLines: [19, 37]
      //Input_0_Long: 1803L
      //Input_1_List<PmsSkuStock>: vector0
      //Assert: assertEquals(0, method_result);
      
      PmsSkuStockServiceImpl pmsSkuStockServiceImpl0 = new PmsSkuStockServiceImpl();
      //mock pmsSkuStockDao0
      PmsSkuStockDao pmsSkuStockDao0 = mock(PmsSkuStockDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PmsSkuStockServiceImpl.class, pmsSkuStockServiceImpl0, "skuStockDao", (Object) pmsSkuStockDao0);
      Long long0 = new Long(1803L);
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      
      //Call method: update
      int int0 = pmsSkuStockServiceImpl0.update(long0, vector0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }
}
