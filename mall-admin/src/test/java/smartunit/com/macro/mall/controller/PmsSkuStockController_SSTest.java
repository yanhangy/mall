/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.PmsSkuStockController;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.service.PmsSkuStockService;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PmsSkuStockController_SSTest extends PmsSkuStockController_SSTest_scaffolding {
// allCoveredLines:[21, 29, 30, 36, 37, 38, 40]

  @Test(timeout = 4000)
  public void test_getList_0()  throws Throwable  {
      //caseID:16453ae0c837360603fd23eca39f013f
      //CoveredLines: [21, 29, 30]
      //Input_0_Long: 516L
      //Input_1_String: "1"
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsSkuStockController pmsSkuStockController0 = new PmsSkuStockController();
      //mock pmsSkuStockService0
      PmsSkuStockService pmsSkuStockService0 = mock(PmsSkuStockService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsSkuStockController.class, pmsSkuStockController0, "skuStockService", (Object) pmsSkuStockService0);
      Long long0 = new Long(516L);
      
      //Call method: getList
      CommonResult<List<PmsSkuStock>> commonResult0 = pmsSkuStockController0.getList(long0, "1");
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_1()  throws Throwable  {
      //caseID:971e8754ef9e65daea794559280570b9
      //CoveredLines: [21, 36, 37, 38]
      //Input_0_Long: 536
      //Input_1_PmsSkuStock>: vector0
      //Assert: assertEquals(200L, method_result.getCode());
      
      PmsSkuStockController pmsSkuStockController0 = new PmsSkuStockController();
      //mock pmsSkuStockService0
      PmsSkuStockService pmsSkuStockService0 = mock(PmsSkuStockService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(536).when(pmsSkuStockService0).update(anyLong() , ArgumentMatchers.<com.macro.mall.model.PmsSkuStock>anyList());
      PrivateAccess.setVariable((Class<?>) PmsSkuStockController.class, pmsSkuStockController0, "skuStockService", (Object) pmsSkuStockService0);
      Long long0 = new Long(536);
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      
      //Call method: update
      CommonResult commonResult0 = pmsSkuStockController0.update(long0, vector0);
      
      //Test Result Assert
      assertEquals(200L, commonResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test_update_2()  throws Throwable  {
      //caseID:5f067ccdd79244588a2244638f2519f9
      //CoveredLines: [21, 36, 37, 40]
      //Input_0_Long: 1170L
      //Input_1_PmsSkuStock>: vector0
      //Assert: assertEquals("\u64CD\u4F5C\u5931\u8D25", method_result.getMessage());
      
      PmsSkuStockController pmsSkuStockController0 = new PmsSkuStockController();
      //mock pmsSkuStockService0
      PmsSkuStockService pmsSkuStockService0 = mock(PmsSkuStockService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) PmsSkuStockController.class, pmsSkuStockController0, "skuStockService", (Object) pmsSkuStockService0);
      Long long0 = new Long(1170L);
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      
      //Call method: update
      CommonResult commonResult0 = pmsSkuStockController0.update(long0, vector0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
}
